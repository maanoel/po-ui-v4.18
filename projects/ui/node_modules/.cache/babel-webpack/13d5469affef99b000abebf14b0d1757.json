{
  "ast": null,
  "code": "import _classCallCheck from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license Angular v11.2.14\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { Injectable, Inject, ɵstringify, NgModule, Directive, Component, Pipe, createPlatformFactory, COMPILER_OPTIONS, Injector, CompilerFactory } from '@angular/core';\nimport { TestComponentRenderer, ɵMetadataOverrider, ɵTestingCompilerFactory } from '@angular/core/testing';\nimport { ɵplatformCoreDynamic, ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS } from '@angular/platform-browser-dynamic';\nimport { BrowserTestingModule } from '@angular/platform-browser/testing';\nimport { ɵgetDOM, DOCUMENT } from '@angular/common';\nimport { CompileReflector, PipeResolver, DirectiveResolver, NgModuleResolver, ERROR_COMPONENT_TYPE } from '@angular/compiler';\nimport { MockPipeResolver, MockDirectiveResolver, MockNgModuleResolver } from '@angular/compiler/testing';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar DOMTestComponentRenderer = /*#__PURE__*/function (_TestComponentRendere) {\n  _inherits(DOMTestComponentRenderer, _TestComponentRendere);\n\n  var _super = _createSuper(DOMTestComponentRenderer);\n\n  function DOMTestComponentRenderer(_doc) {\n    var _this;\n\n    _classCallCheck(this, DOMTestComponentRenderer);\n\n    _this = _super.call(this);\n    _this._doc = _doc;\n    return _this;\n  }\n\n  _createClass(DOMTestComponentRenderer, [{\n    key: \"insertRootElement\",\n    value: function insertRootElement(rootElId) {\n      var rootElement = ɵgetDOM().getDefaultDocument().createElement('div');\n      rootElement.setAttribute('id', rootElId); // TODO(juliemr): can/should this be optional?\n\n      var oldRoots = this._doc.querySelectorAll('[id^=root]');\n\n      for (var i = 0; i < oldRoots.length; i++) {\n        ɵgetDOM().remove(oldRoots[i]);\n      }\n\n      this._doc.body.appendChild(rootElement);\n    }\n  }]);\n\n  return DOMTestComponentRenderer;\n}(TestComponentRenderer);\n\nDOMTestComponentRenderer.ɵfac = function DOMTestComponentRenderer_Factory(t) {\n  return new (t || DOMTestComponentRenderer)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nDOMTestComponentRenderer.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: DOMTestComponentRenderer,\n  factory: DOMTestComponentRenderer.ɵfac\n});\n\nDOMTestComponentRenderer.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DOMTestComponentRenderer, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar COMPILER_PROVIDERS = [{\n  provide: MockPipeResolver,\n  deps: [CompileReflector]\n}, {\n  provide: PipeResolver,\n  useExisting: MockPipeResolver\n}, {\n  provide: MockDirectiveResolver,\n  deps: [CompileReflector]\n}, {\n  provide: DirectiveResolver,\n  useExisting: MockDirectiveResolver\n}, {\n  provide: MockNgModuleResolver,\n  deps: [CompileReflector]\n}, {\n  provide: NgModuleResolver,\n  useExisting: MockNgModuleResolver\n}];\n\nvar TestingCompilerFactoryImpl = /*#__PURE__*/function () {\n  function TestingCompilerFactoryImpl(_injector, _compilerFactory) {\n    _classCallCheck(this, TestingCompilerFactoryImpl);\n\n    this._injector = _injector;\n    this._compilerFactory = _compilerFactory;\n  }\n\n  _createClass(TestingCompilerFactoryImpl, [{\n    key: \"createTestingCompiler\",\n    value: function createTestingCompiler(options) {\n      var compiler = this._compilerFactory.createCompiler(options);\n\n      return new TestingCompilerImpl(compiler, compiler.injector.get(MockDirectiveResolver), compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver));\n    }\n  }]);\n\n  return TestingCompilerFactoryImpl;\n}();\n\nvar TestingCompilerImpl = /*#__PURE__*/function () {\n  function TestingCompilerImpl(_compiler, _directiveResolver, _pipeResolver, _moduleResolver) {\n    _classCallCheck(this, TestingCompilerImpl);\n\n    this._compiler = _compiler;\n    this._directiveResolver = _directiveResolver;\n    this._pipeResolver = _pipeResolver;\n    this._moduleResolver = _moduleResolver;\n    this._overrider = new ɵMetadataOverrider();\n  }\n\n  _createClass(TestingCompilerImpl, [{\n    key: \"injector\",\n    get: function get() {\n      return this._compiler.injector;\n    }\n  }, {\n    key: \"compileModuleSync\",\n    value: function compileModuleSync(moduleType) {\n      return this._compiler.compileModuleSync(moduleType);\n    }\n  }, {\n    key: \"compileModuleAsync\",\n    value: function compileModuleAsync(moduleType) {\n      return this._compiler.compileModuleAsync(moduleType);\n    }\n  }, {\n    key: \"compileModuleAndAllComponentsSync\",\n    value: function compileModuleAndAllComponentsSync(moduleType) {\n      return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n    }\n  }, {\n    key: \"compileModuleAndAllComponentsAsync\",\n    value: function compileModuleAndAllComponentsAsync(moduleType) {\n      return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n    }\n  }, {\n    key: \"getComponentFactory\",\n    value: function getComponentFactory(component) {\n      return this._compiler.getComponentFactory(component);\n    }\n  }, {\n    key: \"checkOverrideAllowed\",\n    value: function checkOverrideAllowed(type) {\n      if (this._compiler.hasAotSummary(type)) {\n        throw new Error(\"\".concat(ɵstringify(type), \" was AOT compiled, so its metadata cannot be changed.\"));\n      }\n    }\n  }, {\n    key: \"overrideModule\",\n    value: function overrideModule(ngModule, override) {\n      this.checkOverrideAllowed(ngModule);\n\n      var oldMetadata = this._moduleResolver.resolve(ngModule, false);\n\n      this._moduleResolver.setNgModule(ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\n\n      this.clearCacheFor(ngModule);\n    }\n  }, {\n    key: \"overrideDirective\",\n    value: function overrideDirective(directive, override) {\n      this.checkOverrideAllowed(directive);\n\n      var oldMetadata = this._directiveResolver.resolve(directive, false);\n\n      this._directiveResolver.setDirective(directive, this._overrider.overrideMetadata(Directive, oldMetadata, override));\n\n      this.clearCacheFor(directive);\n    }\n  }, {\n    key: \"overrideComponent\",\n    value: function overrideComponent(component, override) {\n      this.checkOverrideAllowed(component);\n\n      var oldMetadata = this._directiveResolver.resolve(component, false);\n\n      this._directiveResolver.setDirective(component, this._overrider.overrideMetadata(Component, oldMetadata, override));\n\n      this.clearCacheFor(component);\n    }\n  }, {\n    key: \"overridePipe\",\n    value: function overridePipe(pipe, override) {\n      this.checkOverrideAllowed(pipe);\n\n      var oldMetadata = this._pipeResolver.resolve(pipe, false);\n\n      this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\n\n      this.clearCacheFor(pipe);\n    }\n  }, {\n    key: \"loadAotSummaries\",\n    value: function loadAotSummaries(summaries) {\n      this._compiler.loadAotSummaries(summaries);\n    }\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this._compiler.clearCache();\n    }\n  }, {\n    key: \"clearCacheFor\",\n    value: function clearCacheFor(type) {\n      this._compiler.clearCacheFor(type);\n    }\n  }, {\n    key: \"getComponentFromError\",\n    value: function getComponentFromError(error) {\n      return error[ERROR_COMPONENT_TYPE] || null;\n    }\n  }, {\n    key: \"getModuleId\",\n    value: function getModuleId(moduleType) {\n      return this._moduleResolver.resolve(moduleType, true).id;\n    }\n  }]);\n\n  return TestingCompilerImpl;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar ɵ0 = {\n  providers: COMPILER_PROVIDERS\n};\n/**\n * Platform for dynamic tests\n *\n * @publicApi\n */\n\nvar platformCoreDynamicTesting = createPlatformFactory(ɵplatformCoreDynamic, 'coreDynamicTesting', [{\n  provide: COMPILER_OPTIONS,\n  useValue: ɵ0,\n  multi: true\n}, {\n  provide: ɵTestingCompilerFactory,\n  useClass: TestingCompilerFactoryImpl,\n  deps: [Injector, CompilerFactory]\n}]);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @publicApi\n */\n\nvar platformBrowserDynamicTesting = createPlatformFactory(platformCoreDynamicTesting, 'browserDynamicTesting', ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n/**\n * NgModule for testing.\n *\n * @publicApi\n */\n\nvar BrowserDynamicTestingModule = /*#__PURE__*/_createClass(function BrowserDynamicTestingModule() {\n  _classCallCheck(this, BrowserDynamicTestingModule);\n});\n\nBrowserDynamicTestingModule.ɵfac = function BrowserDynamicTestingModule_Factory(t) {\n  return new (t || BrowserDynamicTestingModule)();\n};\n\nBrowserDynamicTestingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: BrowserDynamicTestingModule\n});\nBrowserDynamicTestingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [{\n    provide: TestComponentRenderer,\n    useClass: DOMTestComponentRenderer\n  }],\n  imports: [BrowserTestingModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BrowserDynamicTestingModule, {\n    exports: function exports() {\n      return [BrowserTestingModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserDynamicTestingModule, [{\n    type: NgModule,\n    args: [{\n      exports: [BrowserTestingModule],\n      providers: [{\n        provide: TestComponentRenderer,\n        useClass: DOMTestComponentRenderer\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BrowserDynamicTestingModule, platformBrowserDynamicTesting, DOMTestComponentRenderer as ɵDOMTestComponentRenderer, COMPILER_PROVIDERS as ɵangular_packages_platform_browser_dynamic_testing_testing_a, TestingCompilerFactoryImpl as ɵangular_packages_platform_browser_dynamic_testing_testing_b, platformCoreDynamicTesting as ɵplatformCoreDynamicTesting }; //# sourceMappingURL=testing.js.map",
  "map": {
    "version": 3,
    "sources": [
      "c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@angular/platform-browser-dynamic/__ivy_ngcc__/fesm2015/testing.js"
    ],
    "names": [
      "Injectable",
      "Inject",
      "ɵstringify",
      "NgModule",
      "Directive",
      "Component",
      "Pipe",
      "createPlatformFactory",
      "COMPILER_OPTIONS",
      "Injector",
      "CompilerFactory",
      "TestComponentRenderer",
      "ɵMetadataOverrider",
      "ɵTestingCompilerFactory",
      "ɵplatformCoreDynamic",
      "ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS",
      "BrowserTestingModule",
      "ɵgetDOM",
      "DOCUMENT",
      "CompileReflector",
      "PipeResolver",
      "DirectiveResolver",
      "NgModuleResolver",
      "ERROR_COMPONENT_TYPE",
      "MockPipeResolver",
      "MockDirectiveResolver",
      "MockNgModuleResolver",
      "ɵngcc0",
      "DOMTestComponentRenderer",
      "_doc",
      "rootElId",
      "rootElement",
      "getDefaultDocument",
      "createElement",
      "setAttribute",
      "oldRoots",
      "querySelectorAll",
      "i",
      "length",
      "remove",
      "body",
      "appendChild",
      "ɵfac",
      "DOMTestComponentRenderer_Factory",
      "t",
      "ɵɵinject",
      "ɵprov",
      "ɵɵdefineInjectable",
      "token",
      "factory",
      "ctorParameters",
      "type",
      "undefined",
      "decorators",
      "args",
      "ngDevMode",
      "ɵsetClassMetadata",
      "COMPILER_PROVIDERS",
      "provide",
      "deps",
      "useExisting",
      "TestingCompilerFactoryImpl",
      "_injector",
      "_compilerFactory",
      "options",
      "compiler",
      "createCompiler",
      "TestingCompilerImpl",
      "injector",
      "get",
      "_compiler",
      "_directiveResolver",
      "_pipeResolver",
      "_moduleResolver",
      "_overrider",
      "moduleType",
      "compileModuleSync",
      "compileModuleAsync",
      "compileModuleAndAllComponentsSync",
      "compileModuleAndAllComponentsAsync",
      "component",
      "getComponentFactory",
      "hasAotSummary",
      "Error",
      "ngModule",
      "override",
      "checkOverrideAllowed",
      "oldMetadata",
      "resolve",
      "setNgModule",
      "overrideMetadata",
      "clearCacheFor",
      "directive",
      "setDirective",
      "pipe",
      "setPipe",
      "summaries",
      "loadAotSummaries",
      "clearCache",
      "error",
      "id",
      "ɵ0",
      "providers",
      "platformCoreDynamicTesting",
      "useValue",
      "multi",
      "useClass",
      "platformBrowserDynamicTesting",
      "BrowserDynamicTestingModule",
      "BrowserDynamicTestingModule_Factory",
      "ɵmod",
      "ɵɵdefineNgModule",
      "ɵinj",
      "ɵɵdefineInjector",
      "imports",
      "ngJitMode",
      "ɵɵsetNgModuleScope",
      "exports",
      "ɵDOMTestComponentRenderer",
      "ɵangular_packages_platform_browser_dynamic_testing_testing_a",
      "ɵangular_packages_platform_browser_dynamic_testing_testing_b",
      "ɵplatformCoreDynamicTesting"
    ],
    "mappings": "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",
    "sourcesContent": [
      "/**\n * @license Angular v11.2.14\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, Inject, ɵstringify, NgModule, Directive, Component, Pipe, createPlatformFactory, COMPILER_OPTIONS, Injector, CompilerFactory } from '@angular/core';\nimport { TestComponentRenderer, ɵMetadataOverrider, ɵTestingCompilerFactory } from '@angular/core/testing';\nimport { ɵplatformCoreDynamic, ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS } from '@angular/platform-browser-dynamic';\nimport { BrowserTestingModule } from '@angular/platform-browser/testing';\nimport { ɵgetDOM, DOCUMENT } from '@angular/common';\nimport { CompileReflector, PipeResolver, DirectiveResolver, NgModuleResolver, ERROR_COMPONENT_TYPE } from '@angular/compiler';\nimport { MockPipeResolver, MockDirectiveResolver, MockNgModuleResolver } from '@angular/compiler/testing';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\nimport * as ɵngcc0 from '@angular/core';\nclass DOMTestComponentRenderer extends TestComponentRenderer {\n    constructor(_doc) {\n        super();\n        this._doc = _doc;\n    }\n    insertRootElement(rootElId) {\n        const rootElement = ɵgetDOM().getDefaultDocument().createElement('div');\n        rootElement.setAttribute('id', rootElId);\n        // TODO(juliemr): can/should this be optional?\n        const oldRoots = this._doc.querySelectorAll('[id^=root]');\n        for (let i = 0; i < oldRoots.length; i++) {\n            ɵgetDOM().remove(oldRoots[i]);\n        }\n        this._doc.body.appendChild(rootElement);\n    }\n}\nDOMTestComponentRenderer.ɵfac = function DOMTestComponentRenderer_Factory(t) { return new (t || DOMTestComponentRenderer)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nDOMTestComponentRenderer.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DOMTestComponentRenderer, factory: DOMTestComponentRenderer.ɵfac });\nDOMTestComponentRenderer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DOMTestComponentRenderer, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst COMPILER_PROVIDERS = [\n    { provide: MockPipeResolver, deps: [CompileReflector] },\n    { provide: PipeResolver, useExisting: MockPipeResolver },\n    { provide: MockDirectiveResolver, deps: [CompileReflector] },\n    { provide: DirectiveResolver, useExisting: MockDirectiveResolver },\n    { provide: MockNgModuleResolver, deps: [CompileReflector] },\n    { provide: NgModuleResolver, useExisting: MockNgModuleResolver },\n];\nclass TestingCompilerFactoryImpl {\n    constructor(_injector, _compilerFactory) {\n        this._injector = _injector;\n        this._compilerFactory = _compilerFactory;\n    }\n    createTestingCompiler(options) {\n        const compiler = this._compilerFactory.createCompiler(options);\n        return new TestingCompilerImpl(compiler, compiler.injector.get(MockDirectiveResolver), compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver));\n    }\n}\nclass TestingCompilerImpl {\n    constructor(_compiler, _directiveResolver, _pipeResolver, _moduleResolver) {\n        this._compiler = _compiler;\n        this._directiveResolver = _directiveResolver;\n        this._pipeResolver = _pipeResolver;\n        this._moduleResolver = _moduleResolver;\n        this._overrider = new ɵMetadataOverrider();\n    }\n    get injector() {\n        return this._compiler.injector;\n    }\n    compileModuleSync(moduleType) {\n        return this._compiler.compileModuleSync(moduleType);\n    }\n    compileModuleAsync(moduleType) {\n        return this._compiler.compileModuleAsync(moduleType);\n    }\n    compileModuleAndAllComponentsSync(moduleType) {\n        return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n    }\n    compileModuleAndAllComponentsAsync(moduleType) {\n        return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n    }\n    getComponentFactory(component) {\n        return this._compiler.getComponentFactory(component);\n    }\n    checkOverrideAllowed(type) {\n        if (this._compiler.hasAotSummary(type)) {\n            throw new Error(`${ɵstringify(type)} was AOT compiled, so its metadata cannot be changed.`);\n        }\n    }\n    overrideModule(ngModule, override) {\n        this.checkOverrideAllowed(ngModule);\n        const oldMetadata = this._moduleResolver.resolve(ngModule, false);\n        this._moduleResolver.setNgModule(ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\n        this.clearCacheFor(ngModule);\n    }\n    overrideDirective(directive, override) {\n        this.checkOverrideAllowed(directive);\n        const oldMetadata = this._directiveResolver.resolve(directive, false);\n        this._directiveResolver.setDirective(directive, this._overrider.overrideMetadata(Directive, oldMetadata, override));\n        this.clearCacheFor(directive);\n    }\n    overrideComponent(component, override) {\n        this.checkOverrideAllowed(component);\n        const oldMetadata = this._directiveResolver.resolve(component, false);\n        this._directiveResolver.setDirective(component, this._overrider.overrideMetadata(Component, oldMetadata, override));\n        this.clearCacheFor(component);\n    }\n    overridePipe(pipe, override) {\n        this.checkOverrideAllowed(pipe);\n        const oldMetadata = this._pipeResolver.resolve(pipe, false);\n        this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\n        this.clearCacheFor(pipe);\n    }\n    loadAotSummaries(summaries) {\n        this._compiler.loadAotSummaries(summaries);\n    }\n    clearCache() {\n        this._compiler.clearCache();\n    }\n    clearCacheFor(type) {\n        this._compiler.clearCacheFor(type);\n    }\n    getComponentFromError(error) {\n        return error[ERROR_COMPONENT_TYPE] || null;\n    }\n    getModuleId(moduleType) {\n        return this._moduleResolver.resolve(moduleType, true).id;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ɵ0 = { providers: COMPILER_PROVIDERS };\n/**\n * Platform for dynamic tests\n *\n * @publicApi\n */\nconst platformCoreDynamicTesting = createPlatformFactory(ɵplatformCoreDynamic, 'coreDynamicTesting', [\n    { provide: COMPILER_OPTIONS, useValue: ɵ0, multi: true },\n    {\n        provide: ɵTestingCompilerFactory,\n        useClass: TestingCompilerFactoryImpl,\n        deps: [Injector, CompilerFactory]\n    }\n]);\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nconst platformBrowserDynamicTesting = createPlatformFactory(platformCoreDynamicTesting, 'browserDynamicTesting', ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n/**\n * NgModule for testing.\n *\n * @publicApi\n */\nclass BrowserDynamicTestingModule {\n}\nBrowserDynamicTestingModule.ɵfac = function BrowserDynamicTestingModule_Factory(t) { return new (t || BrowserDynamicTestingModule)(); };\nBrowserDynamicTestingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BrowserDynamicTestingModule });\nBrowserDynamicTestingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        { provide: TestComponentRenderer, useClass: DOMTestComponentRenderer },\n    ], imports: [BrowserTestingModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BrowserDynamicTestingModule, { exports: function () { return [BrowserTestingModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserDynamicTestingModule, [{\n        type: NgModule,\n        args: [{\n                exports: [BrowserTestingModule],\n                providers: [\n                    { provide: TestComponentRenderer, useClass: DOMTestComponentRenderer },\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserDynamicTestingModule, platformBrowserDynamicTesting, DOMTestComponentRenderer as ɵDOMTestComponentRenderer, COMPILER_PROVIDERS as ɵangular_packages_platform_browser_dynamic_testing_testing_a, TestingCompilerFactoryImpl as ɵangular_packages_platform_browser_dynamic_testing_testing_b, platformCoreDynamicTesting as ɵplatformCoreDynamicTesting };\n\n//# sourceMappingURL=testing.js.map"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
