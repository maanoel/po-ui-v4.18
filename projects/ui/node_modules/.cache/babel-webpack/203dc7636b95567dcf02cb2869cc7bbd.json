{
  "ast": null,
  "code": "import _createForOfIteratorHelper from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _inherits from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _slicedToArray from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n/**\n * @license Angular v11.2.14\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { getDebugNode, RendererFactory2, ɵstringify, ɵReflectionCapabilities, Directive, Component, Pipe, NgModule, ɵgetInjectableDef, ɵNG_COMP_DEF, ɵRender3NgModuleRef, ApplicationInitStatus, LOCALE_ID, ɵDEFAULT_LOCALE_ID, ɵsetLocaleId, ɵRender3ComponentFactory, ɵcompileComponent, ɵNG_DIR_DEF, ɵcompileDirective, ɵNG_PIPE_DEF, ɵcompilePipe, ɵNG_MOD_DEF, ɵtransitiveScopesFor, ɵpatchComponentDefWithScope, ɵNG_INJ_DEF, ɵcompileNgModuleDefs, NgZone, Compiler, COMPILER_OPTIONS, ɵNgModuleFactory, ModuleWithComponentFactories, InjectionToken, Injector, InjectFlags, ɵresetCompiledComponents, ɵflushModuleScopingQueueAsMuchAsPossible, Injectable, ɵclearOverrides, ɵoverrideComponentView, ɵINJECTOR_SCOPE, Optional, SkipSelf, ɵoverrideProvider, ɵivyEnabled } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { ResourceLoader } from '@angular/compiler';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', waitForAsync(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * @publicApi\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction waitForAsync(fn) {\n  var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n\n  if (!_Zone) {\n    return function () {\n      return Promise.reject('Zone is needed for the waitForAsync() test helper but could not be found. ' + 'Please make sure that your environment includes zone.js/dist/zone.js');\n    };\n  }\n\n  var asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n\n  if (typeof asyncTest === 'function') {\n    return asyncTest(fn);\n  }\n\n  return function () {\n    return Promise.reject('zone-testing.js is needed for the async() test helper but could not be found. ' + 'Please make sure that your environment includes zone.js/dist/zone-testing.js');\n  };\n}\n/**\n * @deprecated use `waitForAsync()`, (expected removal in v12)\n * @see {@link waitForAsync}\n * @publicApi\n * */\n\n\nfunction async(fn) {\n  return waitForAsync(fn);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Fixture for debugging and testing a component.\n *\n * @publicApi\n */\n\n\nvar ComponentFixture = /*#__PURE__*/function () {\n  function ComponentFixture(componentRef, ngZone, _autoDetect) {\n    var _this = this;\n\n    _classCallCheck(this, ComponentFixture);\n\n    this.componentRef = componentRef;\n    this.ngZone = ngZone;\n    this._autoDetect = _autoDetect;\n    this._isStable = true;\n    this._isDestroyed = false;\n    this._resolve = null;\n    this._promise = null;\n    this._onUnstableSubscription = null;\n    this._onStableSubscription = null;\n    this._onMicrotaskEmptySubscription = null;\n    this._onErrorSubscription = null;\n    this.changeDetectorRef = componentRef.changeDetectorRef;\n    this.elementRef = componentRef.location;\n    this.debugElement = getDebugNode(this.elementRef.nativeElement);\n    this.componentInstance = componentRef.instance;\n    this.nativeElement = this.elementRef.nativeElement;\n    this.componentRef = componentRef;\n    this.ngZone = ngZone;\n\n    if (ngZone) {\n      // Create subscriptions outside the NgZone so that the callbacks run oustide\n      // of NgZone.\n      ngZone.runOutsideAngular(function () {\n        _this._onUnstableSubscription = ngZone.onUnstable.subscribe({\n          next: function next() {\n            _this._isStable = false;\n          }\n        });\n        _this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n          next: function next() {\n            if (_this._autoDetect) {\n              // Do a change detection run with checkNoChanges set to true to check\n              // there are no changes on the second run.\n              _this.detectChanges(true);\n            }\n          }\n        });\n        _this._onStableSubscription = ngZone.onStable.subscribe({\n          next: function next() {\n            _this._isStable = true; // Check whether there is a pending whenStable() completer to resolve.\n\n            if (_this._promise !== null) {\n              // If so check whether there are no pending macrotasks before resolving.\n              // Do this check in the next tick so that ngZone gets a chance to update the state of\n              // pending macrotasks.\n              scheduleMicroTask(function () {\n                if (!ngZone.hasPendingMacrotasks) {\n                  if (_this._promise !== null) {\n                    _this._resolve(true);\n\n                    _this._resolve = null;\n                    _this._promise = null;\n                  }\n                }\n              });\n            }\n          }\n        });\n        _this._onErrorSubscription = ngZone.onError.subscribe({\n          next: function next(error) {\n            throw error;\n          }\n        });\n      });\n    }\n  }\n\n  _createClass(ComponentFixture, [{\n    key: \"_tick\",\n    value: function _tick(checkNoChanges) {\n      this.changeDetectorRef.detectChanges();\n\n      if (checkNoChanges) {\n        this.checkNoChanges();\n      }\n    }\n    /**\n     * Trigger a change detection cycle for the component.\n     */\n\n  }, {\n    key: \"detectChanges\",\n    value: function detectChanges() {\n      var _this2 = this;\n\n      var checkNoChanges = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (this.ngZone != null) {\n        // Run the change detection inside the NgZone so that any async tasks as part of the change\n        // detection are captured by the zone and can be waited for in isStable.\n        this.ngZone.run(function () {\n          _this2._tick(checkNoChanges);\n        });\n      } else {\n        // Running without zone. Just do the change detection.\n        this._tick(checkNoChanges);\n      }\n    }\n    /**\n     * Do a change detection run to make sure there were no changes.\n     */\n\n  }, {\n    key: \"checkNoChanges\",\n    value: function checkNoChanges() {\n      this.changeDetectorRef.checkNoChanges();\n    }\n    /**\n     * Set whether the fixture should autodetect changes.\n     *\n     * Also runs detectChanges once so that any existing change is detected.\n     */\n\n  }, {\n    key: \"autoDetectChanges\",\n    value: function autoDetectChanges() {\n      var autoDetect = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (this.ngZone == null) {\n        throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n      }\n\n      this._autoDetect = autoDetect;\n      this.detectChanges();\n    }\n    /**\n     * Return whether the fixture is currently stable or has async tasks that have not been completed\n     * yet.\n     */\n\n  }, {\n    key: \"isStable\",\n    value: function isStable() {\n      return this._isStable && !this.ngZone.hasPendingMacrotasks;\n    }\n    /**\n     * Get a promise that resolves when the fixture is stable.\n     *\n     * This can be used to resume testing after events have triggered asynchronous activity or\n     * asynchronous change detection.\n     */\n\n  }, {\n    key: \"whenStable\",\n    value: function whenStable() {\n      var _this3 = this;\n\n      if (this.isStable()) {\n        return Promise.resolve(false);\n      } else if (this._promise !== null) {\n        return this._promise;\n      } else {\n        this._promise = new Promise(function (res) {\n          _this3._resolve = res;\n        });\n        return this._promise;\n      }\n    }\n  }, {\n    key: \"_getRenderer\",\n    value: function _getRenderer() {\n      if (this._renderer === undefined) {\n        this._renderer = this.componentRef.injector.get(RendererFactory2, null);\n      }\n\n      return this._renderer;\n    }\n    /**\n     * Get a promise that resolves when the ui state is stable following animations.\n     */\n\n  }, {\n    key: \"whenRenderingDone\",\n    value: function whenRenderingDone() {\n      var renderer = this._getRenderer();\n\n      if (renderer && renderer.whenRenderingDone) {\n        return renderer.whenRenderingDone();\n      }\n\n      return this.whenStable();\n    }\n    /**\n     * Trigger component destruction.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (!this._isDestroyed) {\n        this.componentRef.destroy();\n\n        if (this._onUnstableSubscription != null) {\n          this._onUnstableSubscription.unsubscribe();\n\n          this._onUnstableSubscription = null;\n        }\n\n        if (this._onStableSubscription != null) {\n          this._onStableSubscription.unsubscribe();\n\n          this._onStableSubscription = null;\n        }\n\n        if (this._onMicrotaskEmptySubscription != null) {\n          this._onMicrotaskEmptySubscription.unsubscribe();\n\n          this._onMicrotaskEmptySubscription = null;\n        }\n\n        if (this._onErrorSubscription != null) {\n          this._onErrorSubscription.unsubscribe();\n\n          this._onErrorSubscription = null;\n        }\n\n        this._isDestroyed = true;\n      }\n    }\n  }]);\n\n  return ComponentFixture;\n}();\n\nfunction scheduleMicroTask(fn) {\n  Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar _Zone = typeof Zone !== 'undefined' ? Zone : null;\n\nvar fakeAsyncTestModule = _Zone && _Zone[_Zone.__symbol__('fakeAsyncTest')];\n\nvar fakeAsyncTestModuleNotLoadedErrorMessage = \"zone-testing.js is needed for the fakeAsync() test helper but could not be found.\\n        Please make sure that your environment includes zone.js/dist/zone-testing.js\";\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @publicApi\n */\n\nfunction resetFakeAsyncZone() {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.resetFakeAsyncZone();\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns The function wrapped to be executed in the fakeAsync zone\n *\n * @publicApi\n */\n\n\nfunction fakeAsync(fn) {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.fakeAsync(fn);\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param millis, the number of millisecond to advance the virtual timer\n * @param tickOptions, the options of tick with a flag called\n * processNewMacroTasksSynchronously, whether to invoke the new macroTasks, by default is\n * false, means the new macroTasks will be invoked\n *\n * For example,\n *\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick();\n *   expect(nestedTimeoutInvoked).toBe(true);\n * }));\n *\n * in this case, we have a nested timeout (new macroTask), when we tick, both the\n * funcWithNestedTimeout and the nested timeout both will be invoked.\n *\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick(0, {processNewMacroTasksSynchronously: false});\n *   expect(nestedTimeoutInvoked).toBe(false);\n * }));\n *\n * if we pass the tickOptions with processNewMacroTasksSynchronously to be false, the nested timeout\n * will not be invoked.\n *\n *\n * @publicApi\n */\n\n\nfunction tick() {\n  var millis = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var tickOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    processNewMacroTasksSynchronously: true\n  };\n\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.tick(millis, tickOptions);\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * @param maxTurns\n * @returns The simulated time elapsed, in millis.\n *\n * @publicApi\n */\n\n\nfunction flush(maxTurns) {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flush(maxTurns);\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Discard all remaining periodic tasks.\n *\n * @publicApi\n */\n\n\nfunction discardPeriodicTasks() {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.discardPeriodicTasks();\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Flush any pending microtasks.\n *\n * @publicApi\n */\n\n\nfunction flushMicrotasks() {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flushMicrotasks();\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n */\n\n\nvar AsyncTestCompleter = /*#__PURE__*/function () {\n  function AsyncTestCompleter() {\n    var _this4 = this;\n\n    _classCallCheck(this, AsyncTestCompleter);\n\n    this._promise = new Promise(function (res, rej) {\n      _this4._resolve = res;\n      _this4._reject = rej;\n    });\n  }\n\n  _createClass(AsyncTestCompleter, [{\n    key: \"done\",\n    value: function done(value) {\n      this._resolve(value);\n    }\n  }, {\n    key: \"fail\",\n    value: function fail(error, stackTrace) {\n      this._reject(error);\n    }\n  }, {\n    key: \"promise\",\n    get: function get() {\n      return this._promise;\n    }\n  }]);\n\n  return AsyncTestCompleter;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n */\n\n\nfunction resolveComponentResources(resourceResolver) {\n  // Store all promises which are fetching the resources.\n  var componentResolved = []; // Cache so that we don't fetch the same resource more than once.\n\n  var urlMap = new Map();\n\n  function cachedResourceResolve(url) {\n    var promise = urlMap.get(url);\n\n    if (!promise) {\n      var resp = resourceResolver(url);\n      urlMap.set(url, promise = resp.then(unwrapResponse));\n    }\n\n    return promise;\n  }\n\n  componentResourceResolutionQueue.forEach(function (component, type) {\n    var promises = [];\n\n    if (component.templateUrl) {\n      promises.push(cachedResourceResolve(component.templateUrl).then(function (template) {\n        component.template = template;\n      }));\n    }\n\n    var styleUrls = component.styleUrls;\n    var styles = component.styles || (component.styles = []);\n    var styleOffset = component.styles.length;\n    styleUrls && styleUrls.forEach(function (styleUrl, index) {\n      styles.push(''); // pre-allocate array.\n\n      promises.push(cachedResourceResolve(styleUrl).then(function (style) {\n        styles[styleOffset + index] = style;\n        styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n\n        if (styleUrls.length == 0) {\n          component.styleUrls = undefined;\n        }\n      }));\n    });\n    var fullyResolved = Promise.all(promises).then(function () {\n      return componentDefResolved(type);\n    });\n    componentResolved.push(fullyResolved);\n  });\n  clearResolutionOfComponentResourcesQueue();\n  return Promise.all(componentResolved).then(function () {\n    return undefined;\n  });\n}\n\nvar componentResourceResolutionQueue = new Map(); // Track when existing ɵcmp for a Type is waiting on resources.\n\nvar componentDefPendingResolution = new Set();\n\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\n  if (componentNeedsResolution(metadata)) {\n    componentResourceResolutionQueue.set(type, metadata);\n    componentDefPendingResolution.add(type);\n  }\n}\n\nfunction isComponentDefPendingResolution(type) {\n  return componentDefPendingResolution.has(type);\n}\n\nfunction componentNeedsResolution(component) {\n  return !!(component.templateUrl && !component.hasOwnProperty('template') || component.styleUrls && component.styleUrls.length);\n}\n\nfunction clearResolutionOfComponentResourcesQueue() {\n  var old = componentResourceResolutionQueue;\n  componentResourceResolutionQueue = new Map();\n  return old;\n}\n\nfunction _restoreComponentResolutionQueue(queue) {\n  componentDefPendingResolution.clear();\n  queue.forEach(function (_, type) {\n    return componentDefPendingResolution.add(type);\n  });\n  componentResourceResolutionQueue = queue;\n}\n\nfunction isComponentResourceResolutionQueueEmpty() {\n  return componentResourceResolutionQueue.size === 0;\n}\n\nfunction unwrapResponse(response) {\n  return typeof response == 'string' ? response : response.text();\n}\n\nfunction componentDefResolved(type) {\n  componentDefPendingResolution.delete(type);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar _nextReferenceId = 0;\n\nvar MetadataOverrider = /*#__PURE__*/function () {\n  function MetadataOverrider() {\n    _classCallCheck(this, MetadataOverrider);\n\n    this._references = new Map();\n  }\n  /**\n   * Creates a new instance for the given metadata class\n   * based on an old instance and overrides.\n   */\n\n\n  _createClass(MetadataOverrider, [{\n    key: \"overrideMetadata\",\n    value: function overrideMetadata(metadataClass, oldMetadata, override) {\n      var props = {};\n\n      if (oldMetadata) {\n        _valueProps(oldMetadata).forEach(function (prop) {\n          return props[prop] = oldMetadata[prop];\n        });\n      }\n\n      if (override.set) {\n        if (override.remove || override.add) {\n          throw new Error(\"Cannot set and add/remove \".concat(ɵstringify(metadataClass), \" at the same time!\"));\n        }\n\n        setMetadata(props, override.set);\n      }\n\n      if (override.remove) {\n        removeMetadata(props, override.remove, this._references);\n      }\n\n      if (override.add) {\n        addMetadata(props, override.add);\n      }\n\n      return new metadataClass(props);\n    }\n  }]);\n\n  return MetadataOverrider;\n}();\n\nfunction removeMetadata(metadata, remove, references) {\n  var removeObjects = new Set();\n\n  var _loop = function _loop(prop) {\n    var removeValue = remove[prop];\n\n    if (Array.isArray(removeValue)) {\n      removeValue.forEach(function (value) {\n        removeObjects.add(_propHashKey(prop, value, references));\n      });\n    } else {\n      removeObjects.add(_propHashKey(prop, removeValue, references));\n    }\n  };\n\n  for (var prop in remove) {\n    _loop(prop);\n  }\n\n  var _loop2 = function _loop2(_prop) {\n    var propValue = metadata[_prop];\n\n    if (Array.isArray(propValue)) {\n      metadata[_prop] = propValue.filter(function (value) {\n        return !removeObjects.has(_propHashKey(_prop, value, references));\n      });\n    } else {\n      if (removeObjects.has(_propHashKey(_prop, propValue, references))) {\n        metadata[_prop] = undefined;\n      }\n    }\n  };\n\n  for (var _prop in metadata) {\n    _loop2(_prop);\n  }\n}\n\nfunction addMetadata(metadata, add) {\n  for (var prop in add) {\n    var addValue = add[prop];\n    var propValue = metadata[prop];\n\n    if (propValue != null && Array.isArray(propValue)) {\n      metadata[prop] = propValue.concat(addValue);\n    } else {\n      metadata[prop] = addValue;\n    }\n  }\n}\n\nfunction setMetadata(metadata, set) {\n  for (var prop in set) {\n    metadata[prop] = set[prop];\n  }\n}\n\nfunction _propHashKey(propName, propValue, references) {\n  var replacer = function replacer(key, value) {\n    if (typeof value === 'function') {\n      value = _serializeReference(value, references);\n    }\n\n    return value;\n  };\n\n  return \"\".concat(propName, \":\").concat(JSON.stringify(propValue, replacer));\n}\n\nfunction _serializeReference(ref, references) {\n  var id = references.get(ref);\n\n  if (!id) {\n    id = \"\".concat(ɵstringify(ref)).concat(_nextReferenceId++);\n    references.set(ref, id);\n  }\n\n  return id;\n}\n\nfunction _valueProps(obj) {\n  var props = []; // regular public props\n\n  Object.keys(obj).forEach(function (prop) {\n    if (!prop.startsWith('_')) {\n      props.push(prop);\n    }\n  }); // getters\n\n  var proto = obj;\n\n  while (proto = Object.getPrototypeOf(proto)) {\n    Object.keys(proto).forEach(function (protoProp) {\n      var desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n\n      if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n        props.push(protoProp);\n      }\n    });\n  }\n\n  return props;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar reflection = new ɵReflectionCapabilities();\n/**\n * Allows to override ivy metadata for tests (via the `TestBed`).\n */\n\nvar OverrideResolver = /*#__PURE__*/function () {\n  function OverrideResolver() {\n    _classCallCheck(this, OverrideResolver);\n\n    this.overrides = new Map();\n    this.resolved = new Map();\n  }\n\n  _createClass(OverrideResolver, [{\n    key: \"addOverride\",\n    value: function addOverride(type, override) {\n      var overrides = this.overrides.get(type) || [];\n      overrides.push(override);\n      this.overrides.set(type, overrides);\n      this.resolved.delete(type);\n    }\n  }, {\n    key: \"setOverrides\",\n    value: function setOverrides(overrides) {\n      var _this5 = this;\n\n      this.overrides.clear();\n      overrides.forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            type = _ref2[0],\n            override = _ref2[1];\n\n        _this5.addOverride(type, override);\n      });\n    }\n  }, {\n    key: \"getAnnotation\",\n    value: function getAnnotation(type) {\n      var annotations = reflection.annotations(type); // Try to find the nearest known Type annotation and make sure that this annotation is an\n      // instance of the type we are looking for, so we can use it for resolution. Note: there might\n      // be multiple known annotations found due to the fact that Components can extend Directives (so\n      // both Directive and Component annotations would be present), so we always check if the known\n      // annotation has the right type.\n\n      for (var i = annotations.length - 1; i >= 0; i--) {\n        var annotation = annotations[i];\n        var isKnownType = annotation instanceof Directive || annotation instanceof Component || annotation instanceof Pipe || annotation instanceof NgModule;\n\n        if (isKnownType) {\n          return annotation instanceof this.type ? annotation : null;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve(type) {\n      var _this6 = this;\n\n      var resolved = this.resolved.get(type) || null;\n\n      if (!resolved) {\n        resolved = this.getAnnotation(type);\n\n        if (resolved) {\n          var overrides = this.overrides.get(type);\n\n          if (overrides) {\n            var overrider = new MetadataOverrider();\n            overrides.forEach(function (override) {\n              resolved = overrider.overrideMetadata(_this6.type, resolved, override);\n            });\n          }\n        }\n\n        this.resolved.set(type, resolved);\n      }\n\n      return resolved;\n    }\n  }]);\n\n  return OverrideResolver;\n}();\n\nvar DirectiveResolver = /*#__PURE__*/function (_OverrideResolver) {\n  _inherits(DirectiveResolver, _OverrideResolver);\n\n  var _super = _createSuper(DirectiveResolver);\n\n  function DirectiveResolver() {\n    _classCallCheck(this, DirectiveResolver);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DirectiveResolver, [{\n    key: \"type\",\n    get: function get() {\n      return Directive;\n    }\n  }]);\n\n  return DirectiveResolver;\n}(OverrideResolver);\n\nvar ComponentResolver = /*#__PURE__*/function (_OverrideResolver2) {\n  _inherits(ComponentResolver, _OverrideResolver2);\n\n  var _super2 = _createSuper(ComponentResolver);\n\n  function ComponentResolver() {\n    _classCallCheck(this, ComponentResolver);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(ComponentResolver, [{\n    key: \"type\",\n    get: function get() {\n      return Component;\n    }\n  }]);\n\n  return ComponentResolver;\n}(OverrideResolver);\n\nvar PipeResolver = /*#__PURE__*/function (_OverrideResolver3) {\n  _inherits(PipeResolver, _OverrideResolver3);\n\n  var _super3 = _createSuper(PipeResolver);\n\n  function PipeResolver() {\n    _classCallCheck(this, PipeResolver);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(PipeResolver, [{\n    key: \"type\",\n    get: function get() {\n      return Pipe;\n    }\n  }]);\n\n  return PipeResolver;\n}(OverrideResolver);\n\nvar NgModuleResolver = /*#__PURE__*/function (_OverrideResolver4) {\n  _inherits(NgModuleResolver, _OverrideResolver4);\n\n  var _super4 = _createSuper(NgModuleResolver);\n\n  function NgModuleResolver() {\n    _classCallCheck(this, NgModuleResolver);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(NgModuleResolver, [{\n    key: \"type\",\n    get: function get() {\n      return NgModule;\n    }\n  }]);\n\n  return NgModuleResolver;\n}(OverrideResolver);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar TestingModuleOverride;\n\n(function (TestingModuleOverride) {\n  TestingModuleOverride[TestingModuleOverride[\"DECLARATION\"] = 0] = \"DECLARATION\";\n  TestingModuleOverride[TestingModuleOverride[\"OVERRIDE_TEMPLATE\"] = 1] = \"OVERRIDE_TEMPLATE\";\n})(TestingModuleOverride || (TestingModuleOverride = {}));\n\nfunction isTestingModuleOverride(value) {\n  return value === TestingModuleOverride.DECLARATION || value === TestingModuleOverride.OVERRIDE_TEMPLATE;\n}\n\nvar R3TestBedCompiler = /*#__PURE__*/function () {\n  function R3TestBedCompiler(platform, additionalModuleTypes) {\n    _classCallCheck(this, R3TestBedCompiler);\n\n    this.platform = platform;\n    this.additionalModuleTypes = additionalModuleTypes;\n    this.originalComponentResolutionQueue = null; // Testing module configuration\n\n    this.declarations = [];\n    this.imports = [];\n    this.providers = [];\n    this.schemas = []; // Queues of components/directives/pipes that should be recompiled.\n\n    this.pendingComponents = new Set();\n    this.pendingDirectives = new Set();\n    this.pendingPipes = new Set(); // Keep track of all components and directives, so we can patch Providers onto defs later.\n\n    this.seenComponents = new Set();\n    this.seenDirectives = new Set(); // Keep track of overridden modules, so that we can collect all affected ones in the module tree.\n\n    this.overriddenModules = new Set(); // Store resolved styles for Components that have template overrides present and `styleUrls`\n    // defined at the same time.\n\n    this.existingComponentStyles = new Map();\n    this.resolvers = initResolvers();\n    this.componentToModuleScope = new Map(); // Map that keeps initial version of component/directive/pipe defs in case\n    // we compile a Type again, thus overriding respective static fields. This is\n    // required to make sure we restore defs to their initial states between test runs\n    // TODO: we should support the case with multiple defs on a type\n\n    this.initialNgDefs = new Map(); // Array that keeps cleanup operations for initial versions of component/directive/pipe/module\n    // defs in case TestBed makes changes to the originals.\n\n    this.defCleanupOps = [];\n    this._injector = null;\n    this.compilerProviders = null;\n    this.providerOverrides = [];\n    this.rootProviderOverrides = []; // Overrides for injectables with `{providedIn: SomeModule}` need to be tracked and added to that\n    // module's provider list.\n\n    this.providerOverridesByModule = new Map();\n    this.providerOverridesByToken = new Map();\n    this.moduleProvidersOverridden = new Set();\n    this.testModuleRef = null;\n\n    var DynamicTestModule = /*#__PURE__*/_createClass(function DynamicTestModule() {\n      _classCallCheck(this, DynamicTestModule);\n    });\n\n    this.testModuleType = DynamicTestModule;\n  }\n\n  _createClass(R3TestBedCompiler, [{\n    key: \"setCompilerProviders\",\n    value: function setCompilerProviders(providers) {\n      this.compilerProviders = providers;\n      this._injector = null;\n    }\n  }, {\n    key: \"configureTestingModule\",\n    value: function configureTestingModule(moduleDef) {\n      // Enqueue any compilation tasks for the directly declared component.\n      if (moduleDef.declarations !== undefined) {\n        var _this$declarations;\n\n        this.queueTypeArray(moduleDef.declarations, TestingModuleOverride.DECLARATION);\n\n        (_this$declarations = this.declarations).push.apply(_this$declarations, _toConsumableArray(moduleDef.declarations));\n      } // Enqueue any compilation tasks for imported modules.\n\n\n      if (moduleDef.imports !== undefined) {\n        var _this$imports;\n\n        this.queueTypesFromModulesArray(moduleDef.imports);\n\n        (_this$imports = this.imports).push.apply(_this$imports, _toConsumableArray(moduleDef.imports));\n      }\n\n      if (moduleDef.providers !== undefined) {\n        var _this$providers;\n\n        (_this$providers = this.providers).push.apply(_this$providers, _toConsumableArray(moduleDef.providers));\n      }\n\n      if (moduleDef.schemas !== undefined) {\n        var _this$schemas;\n\n        (_this$schemas = this.schemas).push.apply(_this$schemas, _toConsumableArray(moduleDef.schemas));\n      }\n    }\n  }, {\n    key: \"overrideModule\",\n    value: function overrideModule(ngModule, override) {\n      this.overriddenModules.add(ngModule); // Compile the module right away.\n\n      this.resolvers.module.addOverride(ngModule, override);\n      var metadata = this.resolvers.module.resolve(ngModule);\n\n      if (metadata === null) {\n        throw invalidTypeError(ngModule.name, 'NgModule');\n      }\n\n      this.recompileNgModule(ngModule, metadata); // At this point, the module has a valid module def (ɵmod), but the override may have introduced\n      // new declarations or imported modules. Ingest any possible new types and add them to the\n      // current queue.\n\n      this.queueTypesFromModulesArray([ngModule]);\n    }\n  }, {\n    key: \"overrideComponent\",\n    value: function overrideComponent(component, override) {\n      this.resolvers.component.addOverride(component, override);\n      this.pendingComponents.add(component);\n    }\n  }, {\n    key: \"overrideDirective\",\n    value: function overrideDirective(directive, override) {\n      this.resolvers.directive.addOverride(directive, override);\n      this.pendingDirectives.add(directive);\n    }\n  }, {\n    key: \"overridePipe\",\n    value: function overridePipe(pipe, override) {\n      this.resolvers.pipe.addOverride(pipe, override);\n      this.pendingPipes.add(pipe);\n    }\n  }, {\n    key: \"overrideProvider\",\n    value: function overrideProvider(token, provider) {\n      var providerDef;\n\n      if (provider.useFactory !== undefined) {\n        providerDef = {\n          provide: token,\n          useFactory: provider.useFactory,\n          deps: provider.deps || [],\n          multi: provider.multi\n        };\n      } else if (provider.useValue !== undefined) {\n        providerDef = {\n          provide: token,\n          useValue: provider.useValue,\n          multi: provider.multi\n        };\n      } else {\n        providerDef = {\n          provide: token\n        };\n      }\n\n      var injectableDef = typeof token !== 'string' ? ɵgetInjectableDef(token) : null;\n      var isRoot = injectableDef !== null && injectableDef.providedIn === 'root';\n      var overridesBucket = isRoot ? this.rootProviderOverrides : this.providerOverrides;\n      overridesBucket.push(providerDef); // Keep overrides grouped by token as well for fast lookups using token\n\n      this.providerOverridesByToken.set(token, providerDef);\n\n      if (injectableDef !== null && injectableDef.providedIn !== null && typeof injectableDef.providedIn !== 'string') {\n        var existingOverrides = this.providerOverridesByModule.get(injectableDef.providedIn);\n\n        if (existingOverrides !== undefined) {\n          existingOverrides.push(providerDef);\n        } else {\n          this.providerOverridesByModule.set(injectableDef.providedIn, [providerDef]);\n        }\n      }\n    }\n  }, {\n    key: \"overrideTemplateUsingTestingModule\",\n    value: function overrideTemplateUsingTestingModule(type, template) {\n      var _this7 = this;\n\n      var def = type[ɵNG_COMP_DEF];\n\n      var hasStyleUrls = function hasStyleUrls() {\n        var metadata = _this7.resolvers.component.resolve(type);\n\n        return !!metadata.styleUrls && metadata.styleUrls.length > 0;\n      };\n\n      var overrideStyleUrls = !!def && !isComponentDefPendingResolution(type) && hasStyleUrls(); // In Ivy, compiling a component does not require knowing the module providing the\n      // component's scope, so overrideTemplateUsingTestingModule can be implemented purely via\n      // overrideComponent. Important: overriding template requires full Component re-compilation,\n      // which may fail in case styleUrls are also present (thus Component is considered as required\n      // resolution). In order to avoid this, we preemptively set styleUrls to an empty array,\n      // preserve current styles available on Component def and restore styles back once compilation\n      // is complete.\n\n      var override = overrideStyleUrls ? {\n        template: template,\n        styles: [],\n        styleUrls: []\n      } : {\n        template: template\n      };\n      this.overrideComponent(type, {\n        set: override\n      });\n\n      if (overrideStyleUrls && def.styles && def.styles.length > 0) {\n        this.existingComponentStyles.set(type, def.styles);\n      } // Set the component's scope to be the testing module.\n\n\n      this.componentToModuleScope.set(type, TestingModuleOverride.OVERRIDE_TEMPLATE);\n    }\n  }, {\n    key: \"compileComponents\",\n    value: function compileComponents() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this8 = this;\n\n        var needsAsyncResources, resourceLoader, resolver;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.clearComponentResolutionQueue(); // Run compilers for all queued types.\n\n                needsAsyncResources = this.compileTypesSync(); // compileComponents() should not be async unless it needs to be.\n\n                if (!needsAsyncResources) {\n                  _context.next = 6;\n                  break;\n                }\n\n                resolver = function resolver(url) {\n                  if (!resourceLoader) {\n                    resourceLoader = _this8.injector.get(ResourceLoader);\n                  }\n\n                  return Promise.resolve(resourceLoader.get(url));\n                };\n\n                _context.next = 6;\n                return resolveComponentResources(resolver);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      // One last compile\n      this.compileTypesSync(); // Create the testing module itself.\n\n      this.compileTestModule();\n      this.applyTransitiveScopes();\n      this.applyProviderOverrides(); // Patch previously stored `styles` Component values (taken from ɵcmp), in case these\n      // Components have `styleUrls` fields defined and template override was requested.\n\n      this.patchComponentsWithExistingStyles(); // Clear the componentToModuleScope map, so that future compilations don't reset the scope of\n      // every component.\n\n      this.componentToModuleScope.clear();\n      var parentInjector = this.platform.injector;\n      this.testModuleRef = new ɵRender3NgModuleRef(this.testModuleType, parentInjector); // ApplicationInitStatus.runInitializers() is marked @internal to core.\n      // Cast it to any before accessing it.\n\n      this.testModuleRef.injector.get(ApplicationInitStatus).runInitializers(); // Set locale ID after running app initializers, since locale information might be updated while\n      // running initializers. This is also consistent with the execution order while bootstrapping an\n      // app (see `packages/core/src/application_ref.ts` file).\n\n      var localeId = this.testModuleRef.injector.get(LOCALE_ID, ɵDEFAULT_LOCALE_ID);\n      ɵsetLocaleId(localeId);\n      return this.testModuleRef;\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_compileNgModuleSync\",\n    value: function _compileNgModuleSync(moduleType) {\n      this.queueTypesFromModulesArray([moduleType]);\n      this.compileTypesSync();\n      this.applyProviderOverrides();\n      this.applyProviderOverridesToModule(moduleType);\n      this.applyTransitiveScopes();\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_compileNgModuleAsync\",\n    value: function _compileNgModuleAsync(moduleType) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.queueTypesFromModulesArray([moduleType]);\n                _context2.next = 3;\n                return this.compileComponents();\n\n              case 3:\n                this.applyProviderOverrides();\n                this.applyProviderOverridesToModule(moduleType);\n                this.applyTransitiveScopes();\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_getModuleResolver\",\n    value: function _getModuleResolver() {\n      return this.resolvers.module;\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_getComponentFactories\",\n    value: function _getComponentFactories(moduleType) {\n      var _this9 = this;\n\n      return maybeUnwrapFn(moduleType.ɵmod.declarations).reduce(function (factories, declaration) {\n        var componentDef = declaration.ɵcmp;\n        componentDef && factories.push(new ɵRender3ComponentFactory(componentDef, _this9.testModuleRef));\n        return factories;\n      }, []);\n    }\n  }, {\n    key: \"compileTypesSync\",\n    value: function compileTypesSync() {\n      var _this10 = this;\n\n      // Compile all queued components, directives, pipes.\n      var needsAsyncResources = false;\n      this.pendingComponents.forEach(function (declaration) {\n        needsAsyncResources = needsAsyncResources || isComponentDefPendingResolution(declaration);\n\n        var metadata = _this10.resolvers.component.resolve(declaration);\n\n        if (metadata === null) {\n          throw invalidTypeError(declaration.name, 'Component');\n        }\n\n        _this10.maybeStoreNgDef(ɵNG_COMP_DEF, declaration);\n\n        ɵcompileComponent(declaration, metadata);\n      });\n      this.pendingComponents.clear();\n      this.pendingDirectives.forEach(function (declaration) {\n        var metadata = _this10.resolvers.directive.resolve(declaration);\n\n        if (metadata === null) {\n          throw invalidTypeError(declaration.name, 'Directive');\n        }\n\n        _this10.maybeStoreNgDef(ɵNG_DIR_DEF, declaration);\n\n        ɵcompileDirective(declaration, metadata);\n      });\n      this.pendingDirectives.clear();\n      this.pendingPipes.forEach(function (declaration) {\n        var metadata = _this10.resolvers.pipe.resolve(declaration);\n\n        if (metadata === null) {\n          throw invalidTypeError(declaration.name, 'Pipe');\n        }\n\n        _this10.maybeStoreNgDef(ɵNG_PIPE_DEF, declaration);\n\n        ɵcompilePipe(declaration, metadata);\n      });\n      this.pendingPipes.clear();\n      return needsAsyncResources;\n    }\n  }, {\n    key: \"applyTransitiveScopes\",\n    value: function applyTransitiveScopes() {\n      var _this11 = this;\n\n      if (this.overriddenModules.size > 0) {\n        // Module overrides (via `TestBed.overrideModule`) might affect scopes that were previously\n        // calculated and stored in `transitiveCompileScopes`. If module overrides are present,\n        // collect all affected modules and reset scopes to force their re-calculatation.\n        var testingModuleDef = this.testModuleType[ɵNG_MOD_DEF];\n        var affectedModules = this.collectModulesAffectedByOverrides(testingModuleDef.imports);\n\n        if (affectedModules.size > 0) {\n          affectedModules.forEach(function (moduleType) {\n            _this11.storeFieldOfDefOnType(moduleType, ɵNG_MOD_DEF, 'transitiveCompileScopes');\n\n            moduleType[ɵNG_MOD_DEF].transitiveCompileScopes = null;\n          });\n        }\n      }\n\n      var moduleToScope = new Map();\n\n      var getScopeOfModule = function getScopeOfModule(moduleType) {\n        if (!moduleToScope.has(moduleType)) {\n          var isTestingModule = isTestingModuleOverride(moduleType);\n          var realType = isTestingModule ? _this11.testModuleType : moduleType;\n          moduleToScope.set(moduleType, ɵtransitiveScopesFor(realType));\n        }\n\n        return moduleToScope.get(moduleType);\n      };\n\n      this.componentToModuleScope.forEach(function (moduleType, componentType) {\n        var moduleScope = getScopeOfModule(moduleType);\n\n        _this11.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'directiveDefs');\n\n        _this11.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'pipeDefs'); // `tView` that is stored on component def contains information about directives and pipes\n        // that are in the scope of this component. Patching component scope will cause `tView` to be\n        // changed. Store original `tView` before patching scope, so the `tView` (including scope\n        // information) is restored back to its previous/original state before running next test.\n\n\n        _this11.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'tView');\n\n        ɵpatchComponentDefWithScope(componentType.ɵcmp, moduleScope);\n      });\n      this.componentToModuleScope.clear();\n    }\n  }, {\n    key: \"applyProviderOverrides\",\n    value: function applyProviderOverrides() {\n      var _this12 = this;\n\n      var maybeApplyOverrides = function maybeApplyOverrides(field) {\n        return function (type) {\n          var resolver = field === ɵNG_COMP_DEF ? _this12.resolvers.component : _this12.resolvers.directive;\n          var metadata = resolver.resolve(type);\n\n          if (_this12.hasProviderOverrides(metadata.providers)) {\n            _this12.patchDefWithProviderOverrides(type, field);\n          }\n        };\n      };\n\n      this.seenComponents.forEach(maybeApplyOverrides(ɵNG_COMP_DEF));\n      this.seenDirectives.forEach(maybeApplyOverrides(ɵNG_DIR_DEF));\n      this.seenComponents.clear();\n      this.seenDirectives.clear();\n    }\n  }, {\n    key: \"applyProviderOverridesToModule\",\n    value: function applyProviderOverridesToModule(moduleType) {\n      if (this.moduleProvidersOverridden.has(moduleType)) {\n        return;\n      }\n\n      this.moduleProvidersOverridden.add(moduleType);\n      var injectorDef = moduleType[ɵNG_INJ_DEF];\n\n      if (this.providerOverridesByToken.size > 0) {\n        var providers = [].concat(_toConsumableArray(injectorDef.providers), _toConsumableArray(this.providerOverridesByModule.get(moduleType) || []));\n\n        if (this.hasProviderOverrides(providers)) {\n          this.maybeStoreNgDef(ɵNG_INJ_DEF, moduleType);\n          this.storeFieldOfDefOnType(moduleType, ɵNG_INJ_DEF, 'providers');\n          injectorDef.providers = this.getOverriddenProviders(providers);\n        } // Apply provider overrides to imported modules recursively\n\n\n        var moduleDef = moduleType[ɵNG_MOD_DEF];\n        var imports = maybeUnwrapFn(moduleDef.imports);\n\n        var _iterator = _createForOfIteratorHelper(imports),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var importedModule = _step.value;\n            this.applyProviderOverridesToModule(importedModule);\n          } // Also override the providers on any ModuleWithProviders imports since those don't appear in\n          // the moduleDef.\n\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        var _iterator2 = _createForOfIteratorHelper(flatten(injectorDef.imports)),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _importedModule = _step2.value;\n\n            if (isModuleWithProviders(_importedModule)) {\n              this.defCleanupOps.push({\n                object: _importedModule,\n                fieldName: 'providers',\n                originalValue: _importedModule.providers\n              });\n              _importedModule.providers = this.getOverriddenProviders(_importedModule.providers);\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  }, {\n    key: \"patchComponentsWithExistingStyles\",\n    value: function patchComponentsWithExistingStyles() {\n      this.existingComponentStyles.forEach(function (styles, type) {\n        return type[ɵNG_COMP_DEF].styles = styles;\n      });\n      this.existingComponentStyles.clear();\n    }\n  }, {\n    key: \"queueTypeArray\",\n    value: function queueTypeArray(arr, moduleType) {\n      var _iterator3 = _createForOfIteratorHelper(arr),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var value = _step3.value;\n\n          if (Array.isArray(value)) {\n            this.queueTypeArray(value, moduleType);\n          } else {\n            this.queueType(value, moduleType);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"recompileNgModule\",\n    value: function recompileNgModule(ngModule, metadata) {\n      // Cache the initial ngModuleDef as it will be overwritten.\n      this.maybeStoreNgDef(ɵNG_MOD_DEF, ngModule);\n      this.maybeStoreNgDef(ɵNG_INJ_DEF, ngModule);\n      ɵcompileNgModuleDefs(ngModule, metadata);\n    }\n  }, {\n    key: \"queueType\",\n    value: function queueType(type, moduleType) {\n      var component = this.resolvers.component.resolve(type);\n\n      if (component) {\n        // Check whether a give Type has respective NG def (ɵcmp) and compile if def is\n        // missing. That might happen in case a class without any Angular decorators extends another\n        // class where Component/Directive/Pipe decorator is defined.\n        if (isComponentDefPendingResolution(type) || !type.hasOwnProperty(ɵNG_COMP_DEF)) {\n          this.pendingComponents.add(type);\n        }\n\n        this.seenComponents.add(type); // Keep track of the module which declares this component, so later the component's scope\n        // can be set correctly. If the component has already been recorded here, then one of several\n        // cases is true:\n        // * the module containing the component was imported multiple times (common).\n        // * the component is declared in multiple modules (which is an error).\n        // * the component was in 'declarations' of the testing module, and also in an imported module\n        //   in which case the module scope will be TestingModuleOverride.DECLARATION.\n        // * overrideTemplateUsingTestingModule was called for the component in which case the module\n        //   scope will be TestingModuleOverride.OVERRIDE_TEMPLATE.\n        //\n        // If the component was previously in the testing module's 'declarations' (meaning the\n        // current value is TestingModuleOverride.DECLARATION), then `moduleType` is the component's\n        // real module, which was imported. This pattern is understood to mean that the component\n        // should use its original scope, but that the testing module should also contain the\n        // component in its scope.\n\n        if (!this.componentToModuleScope.has(type) || this.componentToModuleScope.get(type) === TestingModuleOverride.DECLARATION) {\n          this.componentToModuleScope.set(type, moduleType);\n        }\n\n        return;\n      }\n\n      var directive = this.resolvers.directive.resolve(type);\n\n      if (directive) {\n        if (!type.hasOwnProperty(ɵNG_DIR_DEF)) {\n          this.pendingDirectives.add(type);\n        }\n\n        this.seenDirectives.add(type);\n        return;\n      }\n\n      var pipe = this.resolvers.pipe.resolve(type);\n\n      if (pipe && !type.hasOwnProperty(ɵNG_PIPE_DEF)) {\n        this.pendingPipes.add(type);\n        return;\n      }\n    }\n  }, {\n    key: \"queueTypesFromModulesArray\",\n    value: function queueTypesFromModulesArray(arr) {\n      var _this13 = this;\n\n      // Because we may encounter the same NgModule while processing the imports and exports of an\n      // NgModule tree, we cache them in this set so we can skip ones that have already been seen\n      // encountered. In some test setups, this caching resulted in 10X runtime improvement.\n      var processedNgModuleDefs = new Set();\n\n      var queueTypesFromModulesArrayRecur = function queueTypesFromModulesArrayRecur(arr) {\n        var _iterator4 = _createForOfIteratorHelper(arr),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var value = _step4.value;\n\n            if (Array.isArray(value)) {\n              queueTypesFromModulesArrayRecur(value);\n            } else if (hasNgModuleDef(value)) {\n              var def = value.ɵmod;\n\n              if (processedNgModuleDefs.has(def)) {\n                continue;\n              }\n\n              processedNgModuleDefs.add(def); // Look through declarations, imports, and exports, and queue\n              // everything found there.\n\n              _this13.queueTypeArray(maybeUnwrapFn(def.declarations), value);\n\n              queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.imports));\n              queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.exports));\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      };\n\n      queueTypesFromModulesArrayRecur(arr);\n    } // When module overrides (via `TestBed.overrideModule`) are present, it might affect all modules\n    // that import (even transitively) an overridden one. For all affected modules we need to\n    // recalculate their scopes for a given test run and restore original scopes at the end. The goal\n    // of this function is to collect all affected modules in a set for further processing. Example:\n    // if we have the following module hierarchy: A -> B -> C (where `->` means `imports`) and module\n    // `C` is overridden, we consider `A` and `B` as affected, since their scopes might become\n    // invalidated with the override.\n\n  }, {\n    key: \"collectModulesAffectedByOverrides\",\n    value: function collectModulesAffectedByOverrides(arr) {\n      var _this14 = this;\n\n      var seenModules = new Set();\n      var affectedModules = new Set();\n\n      var calcAffectedModulesRecur = function calcAffectedModulesRecur(arr, path) {\n        var _iterator5 = _createForOfIteratorHelper(arr),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var value = _step5.value;\n\n            if (Array.isArray(value)) {\n              // If the value is an array, just flatten it (by invoking this function recursively),\n              // keeping \"path\" the same.\n              calcAffectedModulesRecur(value, path);\n            } else if (hasNgModuleDef(value)) {\n              if (seenModules.has(value)) {\n                // If we've seen this module before and it's included into \"affected modules\" list, mark\n                // the whole path that leads to that module as affected, but do not descend into its\n                // imports, since we already examined them before.\n                if (affectedModules.has(value)) {\n                  path.forEach(function (item) {\n                    return affectedModules.add(item);\n                  });\n                }\n\n                continue;\n              }\n\n              seenModules.add(value);\n\n              if (_this14.overriddenModules.has(value)) {\n                path.forEach(function (item) {\n                  return affectedModules.add(item);\n                });\n              } // Examine module imports recursively to look for overridden modules.\n\n\n              var moduleDef = value[ɵNG_MOD_DEF];\n              calcAffectedModulesRecur(maybeUnwrapFn(moduleDef.imports), path.concat(value));\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      };\n\n      calcAffectedModulesRecur(arr, []);\n      return affectedModules;\n    }\n  }, {\n    key: \"maybeStoreNgDef\",\n    value: function maybeStoreNgDef(prop, type) {\n      if (!this.initialNgDefs.has(type)) {\n        var currentDef = Object.getOwnPropertyDescriptor(type, prop);\n        this.initialNgDefs.set(type, [prop, currentDef]);\n      }\n    }\n  }, {\n    key: \"storeFieldOfDefOnType\",\n    value: function storeFieldOfDefOnType(type, defField, fieldName) {\n      var def = type[defField];\n      var originalValue = def[fieldName];\n      this.defCleanupOps.push({\n        object: def,\n        fieldName: fieldName,\n        originalValue: originalValue\n      });\n    }\n    /**\n     * Clears current components resolution queue, but stores the state of the queue, so we can\n     * restore it later. Clearing the queue is required before we try to compile components (via\n     * `TestBed.compileComponents`), so that component defs are in sync with the resolution queue.\n     */\n\n  }, {\n    key: \"clearComponentResolutionQueue\",\n    value: function clearComponentResolutionQueue() {\n      var _this15 = this;\n\n      if (this.originalComponentResolutionQueue === null) {\n        this.originalComponentResolutionQueue = new Map();\n      }\n\n      clearResolutionOfComponentResourcesQueue().forEach(function (value, key) {\n        return _this15.originalComponentResolutionQueue.set(key, value);\n      });\n    }\n    /*\n     * Restores component resolution queue to the previously saved state. This operation is performed\n     * as a part of restoring the state after completion of the current set of tests (that might\n     * potentially mutate the state).\n     */\n\n  }, {\n    key: \"restoreComponentResolutionQueue\",\n    value: function restoreComponentResolutionQueue() {\n      if (this.originalComponentResolutionQueue !== null) {\n        _restoreComponentResolutionQueue(this.originalComponentResolutionQueue);\n\n        this.originalComponentResolutionQueue = null;\n      }\n    }\n  }, {\n    key: \"restoreOriginalState\",\n    value: function restoreOriginalState() {\n      // Process cleanup ops in reverse order so the field's original value is restored correctly (in\n      // case there were multiple overrides for the same field).\n      forEachRight(this.defCleanupOps, function (op) {\n        op.object[op.fieldName] = op.originalValue;\n      }); // Restore initial component/directive/pipe defs\n\n      this.initialNgDefs.forEach(function (value, type) {\n        var _value = _slicedToArray(value, 2),\n            prop = _value[0],\n            descriptor = _value[1];\n\n        if (!descriptor) {\n          // Delete operations are generally undesirable since they have performance implications\n          // on objects they were applied to. In this particular case, situations where this code\n          // is invoked should be quite rare to cause any noticeable impact, since it's applied\n          // only to some test cases (for example when class with no annotations extends some\n          // @Component) when we need to clear 'ɵcmp' field on a given class to restore\n          // its original state (before applying overrides and running tests).\n          delete type[prop];\n        } else {\n          Object.defineProperty(type, prop, descriptor);\n        }\n      });\n      this.initialNgDefs.clear();\n      this.moduleProvidersOverridden.clear();\n      this.restoreComponentResolutionQueue(); // Restore the locale ID to the default value, this shouldn't be necessary but we never know\n\n      ɵsetLocaleId(ɵDEFAULT_LOCALE_ID);\n    }\n  }, {\n    key: \"compileTestModule\",\n    value: function compileTestModule() {\n      var _this16 = this;\n\n      var RootScopeModule = /*#__PURE__*/_createClass(function RootScopeModule() {\n        _classCallCheck(this, RootScopeModule);\n      });\n\n      ɵcompileNgModuleDefs(RootScopeModule, {\n        providers: _toConsumableArray(this.rootProviderOverrides)\n      });\n      var ngZone = new NgZone({\n        enableLongStackTrace: true\n      });\n      var providers = [{\n        provide: NgZone,\n        useValue: ngZone\n      }, {\n        provide: Compiler,\n        useFactory: function useFactory() {\n          return new R3TestCompiler(_this16);\n        }\n      }].concat(_toConsumableArray(this.providers), _toConsumableArray(this.providerOverrides));\n      var imports = [RootScopeModule, this.additionalModuleTypes, this.imports || []]; // clang-format off\n\n      ɵcompileNgModuleDefs(this.testModuleType, {\n        declarations: this.declarations,\n        imports: imports,\n        schemas: this.schemas,\n        providers: providers\n      },\n      /* allowDuplicateDeclarationsInRoot */\n      true); // clang-format on\n\n      this.applyProviderOverridesToModule(this.testModuleType);\n    }\n  }, {\n    key: \"injector\",\n    get: function get() {\n      if (this._injector !== null) {\n        return this._injector;\n      }\n\n      var providers = [];\n      var compilerOptions = this.platform.injector.get(COMPILER_OPTIONS);\n      compilerOptions.forEach(function (opts) {\n        if (opts.providers) {\n          providers.push(opts.providers);\n        }\n      });\n\n      if (this.compilerProviders !== null) {\n        providers.push.apply(providers, _toConsumableArray(this.compilerProviders));\n      } // TODO(ocombe): make this work with an Injector directly instead of creating a module for it\n\n\n      var CompilerModule = /*#__PURE__*/_createClass(function CompilerModule() {\n        _classCallCheck(this, CompilerModule);\n      });\n\n      ɵcompileNgModuleDefs(CompilerModule, {\n        providers: providers\n      });\n      var CompilerModuleFactory = new ɵNgModuleFactory(CompilerModule);\n      this._injector = CompilerModuleFactory.create(this.platform.injector).injector;\n      return this._injector;\n    } // get overrides for a specific provider (if any)\n\n  }, {\n    key: \"getSingleProviderOverrides\",\n    value: function getSingleProviderOverrides(provider) {\n      var token = getProviderToken(provider);\n      return this.providerOverridesByToken.get(token) || null;\n    }\n  }, {\n    key: \"getProviderOverrides\",\n    value: function getProviderOverrides(providers) {\n      var _this17 = this;\n\n      if (!providers || !providers.length || this.providerOverridesByToken.size === 0) return []; // There are two flattening operations here. The inner flatten() operates on the metadata's\n      // providers and applies a mapping function which retrieves overrides for each incoming\n      // provider. The outer flatten() then flattens the produced overrides array. If this is not\n      // done, the array can contain other empty arrays (e.g. `[[], []]`) which leak into the\n      // providers array and contaminate any error messages that might be generated.\n\n      return flatten(flatten(providers, function (provider) {\n        return _this17.getSingleProviderOverrides(provider) || [];\n      }));\n    }\n  }, {\n    key: \"getOverriddenProviders\",\n    value: function getOverriddenProviders(providers) {\n      var _this18 = this;\n\n      if (!providers || !providers.length || this.providerOverridesByToken.size === 0) return [];\n      var flattenedProviders = flatten(providers);\n      var overrides = this.getProviderOverrides(flattenedProviders);\n      var overriddenProviders = [].concat(_toConsumableArray(flattenedProviders), _toConsumableArray(overrides));\n      var final = [];\n      var seenOverriddenProviders = new Set(); // We iterate through the list of providers in reverse order to make sure provider overrides\n      // take precedence over the values defined in provider list. We also filter out all providers\n      // that have overrides, keeping overridden values only. This is needed, since presence of a\n      // provider with `ngOnDestroy` hook will cause this hook to be registered and invoked later.\n\n      forEachRight(overriddenProviders, function (provider) {\n        var token = getProviderToken(provider);\n\n        if (_this18.providerOverridesByToken.has(token)) {\n          if (!seenOverriddenProviders.has(token)) {\n            seenOverriddenProviders.add(token); // Treat all overridden providers as `{multi: false}` (even if it's a multi-provider) to\n            // make sure that provided override takes highest precedence and is not combined with\n            // other instances of the same multi provider.\n\n            final.unshift(Object.assign(Object.assign({}, provider), {\n              multi: false\n            }));\n          }\n        } else {\n          final.unshift(provider);\n        }\n      });\n      return final;\n    }\n  }, {\n    key: \"hasProviderOverrides\",\n    value: function hasProviderOverrides(providers) {\n      return this.getProviderOverrides(providers).length > 0;\n    }\n  }, {\n    key: \"patchDefWithProviderOverrides\",\n    value: function patchDefWithProviderOverrides(declaration, field) {\n      var _this19 = this;\n\n      var def = declaration[field];\n\n      if (def && def.providersResolver) {\n        this.maybeStoreNgDef(field, declaration);\n        var resolver = def.providersResolver;\n\n        var processProvidersFn = function processProvidersFn(providers) {\n          return _this19.getOverriddenProviders(providers);\n        };\n\n        this.storeFieldOfDefOnType(declaration, field, 'providersResolver');\n\n        def.providersResolver = function (ngDef) {\n          return resolver(ngDef, processProvidersFn);\n        };\n      }\n    }\n  }]);\n\n  return R3TestBedCompiler;\n}();\n\nfunction initResolvers() {\n  return {\n    module: new NgModuleResolver(),\n    component: new ComponentResolver(),\n    directive: new DirectiveResolver(),\n    pipe: new PipeResolver()\n  };\n}\n\nfunction hasNgModuleDef(value) {\n  return value.hasOwnProperty('ɵmod');\n}\n\nfunction maybeUnwrapFn(maybeFn) {\n  return maybeFn instanceof Function ? maybeFn() : maybeFn;\n}\n\nfunction flatten(values, mapFn) {\n  var out = [];\n  values.forEach(function (value) {\n    if (Array.isArray(value)) {\n      out.push.apply(out, _toConsumableArray(flatten(value, mapFn)));\n    } else {\n      out.push(mapFn ? mapFn(value) : value);\n    }\n  });\n  return out;\n}\n\nfunction getProviderField(provider, field) {\n  return provider && typeof provider === 'object' && provider[field];\n}\n\nfunction getProviderToken(provider) {\n  return getProviderField(provider, 'provide') || provider;\n}\n\nfunction isModuleWithProviders(value) {\n  return value.hasOwnProperty('ngModule');\n}\n\nfunction forEachRight(values, fn) {\n  for (var idx = values.length - 1; idx >= 0; idx--) {\n    fn(values[idx], idx);\n  }\n}\n\nfunction invalidTypeError(name, expectedType) {\n  return new Error(\"\".concat(name, \" class doesn't have @\").concat(expectedType, \" decorator or is missing metadata.\"));\n}\n\nvar R3TestCompiler = /*#__PURE__*/function () {\n  function R3TestCompiler(testBed) {\n    _classCallCheck(this, R3TestCompiler);\n\n    this.testBed = testBed;\n  }\n\n  _createClass(R3TestCompiler, [{\n    key: \"compileModuleSync\",\n    value: function compileModuleSync(moduleType) {\n      this.testBed._compileNgModuleSync(moduleType);\n\n      return new ɵNgModuleFactory(moduleType);\n    }\n  }, {\n    key: \"compileModuleAsync\",\n    value: function compileModuleAsync(moduleType) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.testBed._compileNgModuleAsync(moduleType);\n\n              case 2:\n                return _context3.abrupt(\"return\", new ɵNgModuleFactory(moduleType));\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"compileModuleAndAllComponentsSync\",\n    value: function compileModuleAndAllComponentsSync(moduleType) {\n      var ngModuleFactory = this.compileModuleSync(moduleType);\n\n      var componentFactories = this.testBed._getComponentFactories(moduleType);\n\n      return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    }\n  }, {\n    key: \"compileModuleAndAllComponentsAsync\",\n    value: function compileModuleAndAllComponentsAsync(moduleType) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var ngModuleFactory, componentFactories;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.compileModuleAsync(moduleType);\n\n              case 2:\n                ngModuleFactory = _context4.sent;\n                componentFactories = this.testBed._getComponentFactories(moduleType);\n                return _context4.abrupt(\"return\", new ModuleWithComponentFactories(ngModuleFactory, componentFactories));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {}\n  }, {\n    key: \"clearCacheFor\",\n    value: function clearCacheFor(type) {}\n  }, {\n    key: \"getModuleId\",\n    value: function getModuleId(moduleType) {\n      var meta = this.testBed._getModuleResolver().resolve(moduleType);\n\n      return meta && meta.id || undefined;\n    }\n  }]);\n\n  return R3TestCompiler;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @publicApi\n */\n\n\nvar TestComponentRenderer = /*#__PURE__*/function () {\n  function TestComponentRenderer() {\n    _classCallCheck(this, TestComponentRenderer);\n  }\n\n  _createClass(TestComponentRenderer, [{\n    key: \"insertRootElement\",\n    value: function insertRootElement(rootElementId) {}\n  }]);\n\n  return TestComponentRenderer;\n}();\n/**\n * @publicApi\n */\n\n\nvar ComponentFixtureAutoDetect = new InjectionToken('ComponentFixtureAutoDetect');\n/**\n * @publicApi\n */\n\nvar ComponentFixtureNoNgZone = new InjectionToken('ComponentFixtureNoNgZone');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _nextRootElementId = 0;\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n */\n\nvar TestBedRender3 = /*#__PURE__*/function () {\n  function TestBedRender3() {\n    _classCallCheck(this, TestBedRender3);\n\n    // Properties\n    this.platform = null;\n    this.ngModule = null;\n    this._compiler = null;\n    this._testModuleRef = null;\n    this._activeFixtures = [];\n    this._globalCompilationChecked = false;\n  }\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @publicApi\n   */\n\n\n  _createClass(TestBedRender3, [{\n    key: \"initTestEnvironment\",\n    value:\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @publicApi\n     */\n    function initTestEnvironment(ngModule, platform, aotSummaries) {\n      if (this.platform || this.ngModule) {\n        throw new Error('Cannot set base providers because it has already been called');\n      }\n\n      this.platform = platform;\n      this.ngModule = ngModule;\n      this._compiler = new R3TestBedCompiler(this.platform, this.ngModule);\n    }\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @publicApi\n     */\n\n  }, {\n    key: \"resetTestEnvironment\",\n    value: function resetTestEnvironment() {\n      this.resetTestingModule();\n      this._compiler = null;\n      this.platform = null;\n      this.ngModule = null;\n    }\n  }, {\n    key: \"resetTestingModule\",\n    value: function resetTestingModule() {\n      this.checkGlobalCompilationFinished();\n      ɵresetCompiledComponents();\n\n      if (this._compiler !== null) {\n        this.compiler.restoreOriginalState();\n      }\n\n      this._compiler = new R3TestBedCompiler(this.platform, this.ngModule);\n      this._testModuleRef = null;\n      this.destroyActiveFixtures();\n    }\n  }, {\n    key: \"configureCompiler\",\n    value: function configureCompiler(config) {\n      if (config.useJit != null) {\n        throw new Error('the Render3 compiler JiT mode is not configurable !');\n      }\n\n      if (config.providers !== undefined) {\n        this.compiler.setCompilerProviders(config.providers);\n      }\n    }\n  }, {\n    key: \"configureTestingModule\",\n    value: function configureTestingModule(moduleDef) {\n      this.assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module');\n      this.compiler.configureTestingModule(moduleDef);\n    }\n  }, {\n    key: \"compileComponents\",\n    value: function compileComponents() {\n      return this.compiler.compileComponents();\n    }\n  }, {\n    key: \"inject\",\n    value: function inject(token, notFoundValue, flags) {\n      if (token === TestBedRender3) {\n        return this;\n      }\n\n      var UNDEFINED = {};\n      var result = this.testModuleRef.injector.get(token, UNDEFINED, flags);\n      return result === UNDEFINED ? this.compiler.injector.get(token, notFoundValue, flags) : result;\n    }\n    /** @deprecated from v9.0.0 use TestBed.inject */\n\n  }, {\n    key: \"get\",\n    value: function get(token) {\n      var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.THROW_IF_NOT_FOUND;\n      var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : InjectFlags.Default;\n      return this.inject(token, notFoundValue, flags);\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(tokens, fn, context) {\n      var _this20 = this;\n\n      var params = tokens.map(function (t) {\n        return _this20.inject(t);\n      });\n      return fn.apply(context, params);\n    }\n  }, {\n    key: \"overrideModule\",\n    value: function overrideModule(ngModule, override) {\n      this.assertNotInstantiated('overrideModule', 'override module metadata');\n      this.compiler.overrideModule(ngModule, override);\n    }\n  }, {\n    key: \"overrideComponent\",\n    value: function overrideComponent(component, override) {\n      this.assertNotInstantiated('overrideComponent', 'override component metadata');\n      this.compiler.overrideComponent(component, override);\n    }\n  }, {\n    key: \"overrideTemplateUsingTestingModule\",\n    value: function overrideTemplateUsingTestingModule(component, template) {\n      this.assertNotInstantiated('R3TestBed.overrideTemplateUsingTestingModule', 'Cannot override template when the test module has already been instantiated');\n      this.compiler.overrideTemplateUsingTestingModule(component, template);\n    }\n  }, {\n    key: \"overrideDirective\",\n    value: function overrideDirective(directive, override) {\n      this.assertNotInstantiated('overrideDirective', 'override directive metadata');\n      this.compiler.overrideDirective(directive, override);\n    }\n  }, {\n    key: \"overridePipe\",\n    value: function overridePipe(pipe, override) {\n      this.assertNotInstantiated('overridePipe', 'override pipe metadata');\n      this.compiler.overridePipe(pipe, override);\n    }\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     */\n\n  }, {\n    key: \"overrideProvider\",\n    value: function overrideProvider(token, provider) {\n      this.assertNotInstantiated('overrideProvider', 'override provider');\n      this.compiler.overrideProvider(token, provider);\n    }\n  }, {\n    key: \"createComponent\",\n    value: function createComponent(type) {\n      var _this21 = this;\n\n      var testComponentRenderer = this.inject(TestComponentRenderer);\n      var rootElId = \"root\".concat(_nextRootElementId++);\n      testComponentRenderer.insertRootElement(rootElId);\n      var componentDef = type.ɵcmp;\n\n      if (!componentDef) {\n        throw new Error(\"It looks like '\".concat(ɵstringify(type), \"' has not been IVY compiled - it has no '\\u0275cmp' field\"));\n      } // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n\n\n      var noNgZone = this.inject(ComponentFixtureNoNgZone, false); // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n\n      var autoDetect = this.inject(ComponentFixtureAutoDetect, false);\n      var ngZone = noNgZone ? null : this.inject(NgZone, null);\n      var componentFactory = new ɵRender3ComponentFactory(componentDef);\n\n      var initComponent = function initComponent() {\n        var componentRef = componentFactory.create(Injector.NULL, [], \"#\".concat(rootElId), _this21.testModuleRef);\n        return new ComponentFixture(componentRef, ngZone, autoDetect);\n      };\n\n      var fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n\n      this._activeFixtures.push(fixture);\n\n      return fixture;\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n\n  }, {\n    key: \"compiler\",\n    get: function get() {\n      if (this._compiler === null) {\n        throw new Error(\"Need to call TestBed.initTestEnvironment() first\");\n      }\n\n      return this._compiler;\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n\n  }, {\n    key: \"testModuleRef\",\n    get: function get() {\n      if (this._testModuleRef === null) {\n        this._testModuleRef = this.compiler.finalize();\n      }\n\n      return this._testModuleRef;\n    }\n  }, {\n    key: \"assertNotInstantiated\",\n    value: function assertNotInstantiated(methodName, methodDescription) {\n      if (this._testModuleRef !== null) {\n        throw new Error(\"Cannot \".concat(methodDescription, \" when the test module has already been instantiated. \") + \"Make sure you are not using `inject` before `\".concat(methodName, \"`.\"));\n      }\n    }\n    /**\n     * Check whether the module scoping queue should be flushed, and flush it if needed.\n     *\n     * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any\n     * in-progress module compilation. This creates a potential hazard - the very first time the\n     * TestBed is initialized (or if it's reset without being initialized), there may be pending\n     * compilations of modules declared in global scope. These compilations should be finished.\n     *\n     * To ensure that globally declared modules have their components scoped properly, this function\n     * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior\n     * to any other operations, the scoping queue is flushed.\n     */\n\n  }, {\n    key: \"checkGlobalCompilationFinished\",\n    value: function checkGlobalCompilationFinished() {\n      // Checking _testNgModuleRef is null should not be necessary, but is left in as an additional\n      // guard that compilations queued in tests (after instantiation) are never flushed accidentally.\n      if (!this._globalCompilationChecked && this._testModuleRef === null) {\n        ɵflushModuleScopingQueueAsMuchAsPossible();\n      }\n\n      this._globalCompilationChecked = true;\n    }\n  }, {\n    key: \"destroyActiveFixtures\",\n    value: function destroyActiveFixtures() {\n      this._activeFixtures.forEach(function (fixture) {\n        try {\n          fixture.destroy();\n        } catch (e) {\n          console.error('Error during cleanup of component', {\n            component: fixture.componentInstance,\n            stacktrace: e\n          });\n        }\n      });\n\n      this._activeFixtures = [];\n    }\n  }], [{\n    key: \"initTestEnvironment\",\n    value: function initTestEnvironment(ngModule, platform, aotSummaries) {\n      var testBed = _getTestBedRender3();\n\n      testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n      return testBed;\n    }\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @publicApi\n     */\n\n  }, {\n    key: \"resetTestEnvironment\",\n    value: function resetTestEnvironment() {\n      _getTestBedRender3().resetTestEnvironment();\n    }\n  }, {\n    key: \"configureCompiler\",\n    value: function configureCompiler(config) {\n      _getTestBedRender3().configureCompiler(config);\n\n      return TestBedRender3;\n    }\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n\n  }, {\n    key: \"configureTestingModule\",\n    value: function configureTestingModule(moduleDef) {\n      _getTestBedRender3().configureTestingModule(moduleDef);\n\n      return TestBedRender3;\n    }\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n\n  }, {\n    key: \"compileComponents\",\n    value: function compileComponents() {\n      return _getTestBedRender3().compileComponents();\n    }\n  }, {\n    key: \"overrideModule\",\n    value: function overrideModule(ngModule, override) {\n      _getTestBedRender3().overrideModule(ngModule, override);\n\n      return TestBedRender3;\n    }\n  }, {\n    key: \"overrideComponent\",\n    value: function overrideComponent(component, override) {\n      _getTestBedRender3().overrideComponent(component, override);\n\n      return TestBedRender3;\n    }\n  }, {\n    key: \"overrideDirective\",\n    value: function overrideDirective(directive, override) {\n      _getTestBedRender3().overrideDirective(directive, override);\n\n      return TestBedRender3;\n    }\n  }, {\n    key: \"overridePipe\",\n    value: function overridePipe(pipe, override) {\n      _getTestBedRender3().overridePipe(pipe, override);\n\n      return TestBedRender3;\n    }\n  }, {\n    key: \"overrideTemplate\",\n    value: function overrideTemplate(component, template) {\n      _getTestBedRender3().overrideComponent(component, {\n        set: {\n          template: template,\n          templateUrl: null\n        }\n      });\n\n      return TestBedRender3;\n    }\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n\n  }, {\n    key: \"overrideTemplateUsingTestingModule\",\n    value: function overrideTemplateUsingTestingModule(component, template) {\n      _getTestBedRender3().overrideTemplateUsingTestingModule(component, template);\n\n      return TestBedRender3;\n    }\n  }, {\n    key: \"overrideProvider\",\n    value: function overrideProvider(token, provider) {\n      _getTestBedRender3().overrideProvider(token, provider);\n\n      return TestBedRender3;\n    }\n  }, {\n    key: \"inject\",\n    value: function inject(token, notFoundValue, flags) {\n      return _getTestBedRender3().inject(token, notFoundValue, flags);\n    }\n    /** @deprecated from v9.0.0 use TestBed.inject */\n\n  }, {\n    key: \"get\",\n    value: function get(token) {\n      var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.THROW_IF_NOT_FOUND;\n      var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : InjectFlags.Default;\n      return _getTestBedRender3().inject(token, notFoundValue, flags);\n    }\n  }, {\n    key: \"createComponent\",\n    value: function createComponent(component) {\n      return _getTestBedRender3().createComponent(component);\n    }\n  }, {\n    key: \"resetTestingModule\",\n    value: function resetTestingModule() {\n      _getTestBedRender3().resetTestingModule();\n\n      return TestBedRender3;\n    }\n  }]);\n\n  return TestBedRender3;\n}();\n\nvar testBed;\n\nfunction _getTestBedRender3() {\n  return testBed = testBed || new TestBedRender3();\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction unimplemented() {\n  throw Error('unimplemented');\n}\n/**\n * Special interface to the compiler only used by testing\n *\n * @publicApi\n */\n\n\nvar TestingCompiler = /*#__PURE__*/function (_Compiler) {\n  _inherits(TestingCompiler, _Compiler);\n\n  var _super5 = _createSuper(TestingCompiler);\n\n  function TestingCompiler() {\n    _classCallCheck(this, TestingCompiler);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(TestingCompiler, [{\n    key: \"injector\",\n    get: function get() {\n      throw unimplemented();\n    }\n  }, {\n    key: \"overrideModule\",\n    value: function overrideModule(module, overrides) {\n      throw unimplemented();\n    }\n  }, {\n    key: \"overrideDirective\",\n    value: function overrideDirective(directive, overrides) {\n      throw unimplemented();\n    }\n  }, {\n    key: \"overrideComponent\",\n    value: function overrideComponent(component, overrides) {\n      throw unimplemented();\n    }\n  }, {\n    key: \"overridePipe\",\n    value: function overridePipe(directive, overrides) {\n      throw unimplemented();\n    }\n    /**\n     * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n     * so that it can use the code generated by AOT.\n     */\n\n  }, {\n    key: \"loadAotSummaries\",\n    value: function loadAotSummaries(summaries) {\n      throw unimplemented();\n    }\n    /**\n     * Gets the component factory for the given component.\n     * This assumes that the component has been compiled before calling this call using\n     * `compileModuleAndAllComponents*`.\n     */\n\n  }, {\n    key: \"getComponentFactory\",\n    value: function getComponentFactory(component) {\n      throw unimplemented();\n    }\n    /**\n     * Returns the component type that is stored in the given error.\n     * This can be used for errors created by compileModule...\n     */\n\n  }, {\n    key: \"getComponentFromError\",\n    value: function getComponentFromError(error) {\n      throw unimplemented();\n    }\n  }]);\n\n  return TestingCompiler;\n}(Compiler);\n\nTestingCompiler.ɵfac = function TestingCompiler_Factory(t) {\n  return ɵTestingCompiler_BaseFactory(t || TestingCompiler);\n};\n\nTestingCompiler.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TestingCompiler,\n  factory: TestingCompiler.ɵfac\n});\nvar ɵTestingCompiler_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(TestingCompiler);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TestingCompiler, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n */\n\n\nvar TestingCompilerFactory = /*#__PURE__*/_createClass(function TestingCompilerFactory() {\n  _classCallCheck(this, TestingCompilerFactory);\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar _nextRootElementId$1 = 0;\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n */\n\nvar TestBedViewEngine = /*#__PURE__*/function () {\n  function TestBedViewEngine() {\n    _classCallCheck(this, TestBedViewEngine);\n\n    this._instantiated = false;\n    this._compiler = null;\n    this._moduleRef = null;\n    this._moduleFactory = null;\n    this._compilerOptions = [];\n    this._moduleOverrides = [];\n    this._componentOverrides = [];\n    this._directiveOverrides = [];\n    this._pipeOverrides = [];\n    this._providers = [];\n    this._declarations = [];\n    this._imports = [];\n    this._schemas = [];\n    this._activeFixtures = [];\n\n    this._testEnvAotSummaries = function () {\n      return [];\n    };\n\n    this._aotSummaries = [];\n    this._templateOverrides = [];\n    this._isRoot = true;\n    this._rootProviderOverrides = [];\n    this.platform = null;\n    this.ngModule = null;\n  }\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   */\n\n\n  _createClass(TestBedViewEngine, [{\n    key: \"initTestEnvironment\",\n    value:\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     */\n    function initTestEnvironment(ngModule, platform, aotSummaries) {\n      if (this.platform || this.ngModule) {\n        throw new Error('Cannot set base providers because it has already been called');\n      }\n\n      this.platform = platform;\n      this.ngModule = ngModule;\n\n      if (aotSummaries) {\n        this._testEnvAotSummaries = aotSummaries;\n      }\n    }\n    /**\n     * Reset the providers for the test injector.\n     */\n\n  }, {\n    key: \"resetTestEnvironment\",\n    value: function resetTestEnvironment() {\n      this.resetTestingModule();\n      this.platform = null;\n      this.ngModule = null;\n\n      this._testEnvAotSummaries = function () {\n        return [];\n      };\n    }\n  }, {\n    key: \"resetTestingModule\",\n    value: function resetTestingModule() {\n      ɵclearOverrides();\n      this._aotSummaries = [];\n      this._templateOverrides = [];\n      this._compiler = null;\n      this._moduleOverrides = [];\n      this._componentOverrides = [];\n      this._directiveOverrides = [];\n      this._pipeOverrides = [];\n      this._isRoot = true;\n      this._rootProviderOverrides = [];\n      this._moduleRef = null;\n      this._moduleFactory = null;\n      this._compilerOptions = [];\n      this._providers = [];\n      this._declarations = [];\n      this._imports = [];\n      this._schemas = [];\n      this._instantiated = false;\n\n      this._activeFixtures.forEach(function (fixture) {\n        try {\n          fixture.destroy();\n        } catch (e) {\n          console.error('Error during cleanup of component', {\n            component: fixture.componentInstance,\n            stacktrace: e\n          });\n        }\n      });\n\n      this._activeFixtures = [];\n    }\n  }, {\n    key: \"configureCompiler\",\n    value: function configureCompiler(config) {\n      this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n\n      this._compilerOptions.push(config);\n    }\n  }, {\n    key: \"configureTestingModule\",\n    value: function configureTestingModule(moduleDef) {\n      this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n\n      if (moduleDef.providers) {\n        var _this$_providers;\n\n        (_this$_providers = this._providers).push.apply(_this$_providers, _toConsumableArray(moduleDef.providers));\n      }\n\n      if (moduleDef.declarations) {\n        var _this$_declarations;\n\n        (_this$_declarations = this._declarations).push.apply(_this$_declarations, _toConsumableArray(moduleDef.declarations));\n      }\n\n      if (moduleDef.imports) {\n        var _this$_imports;\n\n        (_this$_imports = this._imports).push.apply(_this$_imports, _toConsumableArray(moduleDef.imports));\n      }\n\n      if (moduleDef.schemas) {\n        var _this$_schemas;\n\n        (_this$_schemas = this._schemas).push.apply(_this$_schemas, _toConsumableArray(moduleDef.schemas));\n      }\n\n      if (moduleDef.aotSummaries) {\n        this._aotSummaries.push(moduleDef.aotSummaries);\n      }\n    }\n  }, {\n    key: \"compileComponents\",\n    value: function compileComponents() {\n      var _this22 = this;\n\n      if (this._moduleFactory || this._instantiated) {\n        return Promise.resolve(null);\n      }\n\n      var moduleType = this._createCompilerAndModule();\n\n      return this._compiler.compileModuleAndAllComponentsAsync(moduleType).then(function (moduleAndComponentFactories) {\n        _this22._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n      });\n    }\n  }, {\n    key: \"_initIfNeeded\",\n    value: function _initIfNeeded() {\n      if (this._instantiated) {\n        return;\n      }\n\n      if (!this._moduleFactory) {\n        try {\n          var moduleType = this._createCompilerAndModule();\n\n          this._moduleFactory = this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n        } catch (e) {\n          var errorCompType = this._compiler.getComponentFromError(e);\n\n          if (errorCompType) {\n            throw new Error(\"This test module uses the component \".concat(ɵstringify(errorCompType), \" which is using a \\\"templateUrl\\\" or \\\"styleUrls\\\", but they were never compiled. \") + \"Please call \\\"TestBed.compileComponents\\\" before your test.\");\n          } else {\n            throw e;\n          }\n        }\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(this._templateOverrides),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _step6$value = _step6.value,\n              component = _step6$value.component,\n              templateOf = _step6$value.templateOf;\n\n          var compFactory = this._compiler.getComponentFactory(templateOf);\n\n          ɵoverrideComponentView(component, compFactory);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var ngZone = new NgZone({\n        enableLongStackTrace: true,\n        shouldCoalesceEventChangeDetection: false\n      });\n      var providers = [{\n        provide: NgZone,\n        useValue: ngZone\n      }];\n      var ngZoneInjector = Injector.create({\n        providers: providers,\n        parent: this.platform.injector,\n        name: this._moduleFactory.moduleType.name\n      });\n      this._moduleRef = this._moduleFactory.create(ngZoneInjector); // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n      // before accessing it.\n\n      this._moduleRef.injector.get(ApplicationInitStatus).runInitializers();\n\n      this._instantiated = true;\n    }\n  }, {\n    key: \"_createCompilerAndModule\",\n    value: function _createCompilerAndModule() {\n      var _this23 = this;\n\n      var providers = this._providers.concat([{\n        provide: TestBed,\n        useValue: this\n      }]);\n\n      var declarations = [].concat(_toConsumableArray(this._declarations), _toConsumableArray(this._templateOverrides.map(function (entry) {\n        return entry.templateOf;\n      })));\n      var rootScopeImports = [];\n      var rootProviderOverrides = this._rootProviderOverrides;\n\n      if (this._isRoot) {\n        var RootScopeModule = /*#__PURE__*/_createClass(function RootScopeModule() {\n          _classCallCheck(this, RootScopeModule);\n        });\n\n        RootScopeModule.decorators = [{\n          type: NgModule,\n          args: [{\n            providers: _toConsumableArray(rootProviderOverrides),\n            jit: true\n          }]\n        }];\n        rootScopeImports.push(RootScopeModule);\n      }\n\n      providers.push({\n        provide: ɵINJECTOR_SCOPE,\n        useValue: this._isRoot ? 'root' : null\n      });\n      var imports = [rootScopeImports, this.ngModule, this._imports];\n      var schemas = this._schemas;\n\n      var DynamicTestModule = /*#__PURE__*/_createClass(function DynamicTestModule() {\n        _classCallCheck(this, DynamicTestModule);\n      });\n\n      DynamicTestModule.decorators = [{\n        type: NgModule,\n        args: [{\n          providers: providers,\n          declarations: declarations,\n          imports: imports,\n          schemas: schemas,\n          jit: true\n        }]\n      }];\n      var compilerFactory = this.platform.injector.get(TestingCompilerFactory);\n      this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n\n      for (var _i = 0, _arr = [this._testEnvAotSummaries].concat(_toConsumableArray(this._aotSummaries)); _i < _arr.length; _i++) {\n        var summary = _arr[_i];\n\n        this._compiler.loadAotSummaries(summary);\n      }\n\n      this._moduleOverrides.forEach(function (entry) {\n        return _this23._compiler.overrideModule(entry[0], entry[1]);\n      });\n\n      this._componentOverrides.forEach(function (entry) {\n        return _this23._compiler.overrideComponent(entry[0], entry[1]);\n      });\n\n      this._directiveOverrides.forEach(function (entry) {\n        return _this23._compiler.overrideDirective(entry[0], entry[1]);\n      });\n\n      this._pipeOverrides.forEach(function (entry) {\n        return _this23._compiler.overridePipe(entry[0], entry[1]);\n      });\n\n      return DynamicTestModule;\n    }\n  }, {\n    key: \"_assertNotInstantiated\",\n    value: function _assertNotInstantiated(methodName, methodDescription) {\n      if (this._instantiated) {\n        throw new Error(\"Cannot \".concat(methodDescription, \" when the test module has already been instantiated. \") + \"Make sure you are not using `inject` before `\".concat(methodName, \"`.\"));\n      }\n    }\n  }, {\n    key: \"inject\",\n    value: function inject(token, notFoundValue, flags) {\n      this._initIfNeeded();\n\n      if (token === TestBed) {\n        return this;\n      } // Tests can inject things from the ng module and from the compiler,\n      // but the ng module can't inject things from the compiler and vice versa.\n\n\n      var UNDEFINED = {};\n\n      var result = this._moduleRef.injector.get(token, UNDEFINED, flags);\n\n      return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue, flags) : result;\n    }\n    /** @deprecated from v9.0.0 use TestBed.inject */\n\n  }, {\n    key: \"get\",\n    value: function get(token) {\n      var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.THROW_IF_NOT_FOUND;\n      var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : InjectFlags.Default;\n      return this.inject(token, notFoundValue, flags);\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(tokens, fn, context) {\n      var _this24 = this;\n\n      this._initIfNeeded();\n\n      var params = tokens.map(function (t) {\n        return _this24.inject(t);\n      });\n      return fn.apply(context, params);\n    }\n  }, {\n    key: \"overrideModule\",\n    value: function overrideModule(ngModule, override) {\n      this._assertNotInstantiated('overrideModule', 'override module metadata');\n\n      this._moduleOverrides.push([ngModule, override]);\n    }\n  }, {\n    key: \"overrideComponent\",\n    value: function overrideComponent(component, override) {\n      this._assertNotInstantiated('overrideComponent', 'override component metadata');\n\n      this._componentOverrides.push([component, override]);\n    }\n  }, {\n    key: \"overrideDirective\",\n    value: function overrideDirective(directive, override) {\n      this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n\n      this._directiveOverrides.push([directive, override]);\n    }\n  }, {\n    key: \"overridePipe\",\n    value: function overridePipe(pipe, override) {\n      this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n\n      this._pipeOverrides.push([pipe, override]);\n    }\n  }, {\n    key: \"overrideProvider\",\n    value: function overrideProvider(token, provider) {\n      this._assertNotInstantiated('overrideProvider', 'override provider');\n\n      this.overrideProviderImpl(token, provider);\n    }\n  }, {\n    key: \"overrideProviderImpl\",\n    value: function overrideProviderImpl(token, provider) {\n      var deprecated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var def = null;\n\n      if (typeof token !== 'string' && (def = ɵgetInjectableDef(token)) && def.providedIn === 'root') {\n        if (provider.useFactory) {\n          this._rootProviderOverrides.push({\n            provide: token,\n            useFactory: provider.useFactory,\n            deps: provider.deps || []\n          });\n        } else {\n          this._rootProviderOverrides.push({\n            provide: token,\n            useValue: provider.useValue\n          });\n        }\n      }\n\n      var flags = 0;\n      var value;\n\n      if (provider.useFactory) {\n        flags |= 1024\n        /* TypeFactoryProvider */\n        ;\n        value = provider.useFactory;\n      } else {\n        flags |= 256\n        /* TypeValueProvider */\n        ;\n        value = provider.useValue;\n      }\n\n      var deps = (provider.deps || []).map(function (dep) {\n        var depFlags = 0\n        /* None */\n        ;\n        var depToken;\n\n        if (Array.isArray(dep)) {\n          dep.forEach(function (entry) {\n            if (entry instanceof Optional) {\n              depFlags |= 2\n              /* Optional */\n              ;\n            } else if (entry instanceof SkipSelf) {\n              depFlags |= 1\n              /* SkipSelf */\n              ;\n            } else {\n              depToken = entry;\n            }\n          });\n        } else {\n          depToken = dep;\n        }\n\n        return [depFlags, depToken];\n      });\n      ɵoverrideProvider({\n        token: token,\n        flags: flags,\n        deps: deps,\n        value: value,\n        deprecatedBehavior: deprecated\n      });\n    }\n  }, {\n    key: \"overrideTemplateUsingTestingModule\",\n    value: function overrideTemplateUsingTestingModule(component, template) {\n      this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n\n      var OverrideComponent = /*#__PURE__*/_createClass(function OverrideComponent() {\n        _classCallCheck(this, OverrideComponent);\n      });\n\n      OverrideComponent.decorators = [{\n        type: Component,\n        args: [{\n          selector: 'empty',\n          template: template,\n          jit: true\n        }]\n      }];\n\n      this._templateOverrides.push({\n        component: component,\n        templateOf: OverrideComponent\n      });\n    }\n  }, {\n    key: \"createComponent\",\n    value: function createComponent(component) {\n      var _this25 = this;\n\n      this._initIfNeeded();\n\n      var componentFactory = this._compiler.getComponentFactory(component);\n\n      if (!componentFactory) {\n        throw new Error(\"Cannot create the component \".concat(ɵstringify(component), \" as it was not imported into the testing module!\"));\n      } // TODO: Don't cast as `InjectionToken<boolean>`, declared type is boolean[]\n\n\n      var noNgZone = this.inject(ComponentFixtureNoNgZone, false); // TODO: Don't cast as `InjectionToken<boolean>`, declared type is boolean[]\n\n      var autoDetect = this.inject(ComponentFixtureAutoDetect, false);\n      var ngZone = noNgZone ? null : this.inject(NgZone, null);\n      var testComponentRenderer = this.inject(TestComponentRenderer);\n      var rootElId = \"root\".concat(_nextRootElementId$1++);\n      testComponentRenderer.insertRootElement(rootElId);\n\n      var initComponent = function initComponent() {\n        var componentRef = componentFactory.create(Injector.NULL, [], \"#\".concat(rootElId), _this25._moduleRef);\n        return new ComponentFixture(componentRef, ngZone, autoDetect);\n      };\n\n      var fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n\n      this._activeFixtures.push(fixture);\n\n      return fixture;\n    }\n  }], [{\n    key: \"initTestEnvironment\",\n    value: function initTestEnvironment(ngModule, platform, aotSummaries) {\n      var testBed = _getTestBedViewEngine();\n\n      testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n      return testBed;\n    }\n    /**\n     * Reset the providers for the test injector.\n     */\n\n  }, {\n    key: \"resetTestEnvironment\",\n    value: function resetTestEnvironment() {\n      _getTestBedViewEngine().resetTestEnvironment();\n    }\n  }, {\n    key: \"resetTestingModule\",\n    value: function resetTestingModule() {\n      _getTestBedViewEngine().resetTestingModule();\n\n      return TestBedViewEngine;\n    }\n    /**\n     * Allows overriding default compiler providers and settings\n     * which are defined in test_injector.js\n     */\n\n  }, {\n    key: \"configureCompiler\",\n    value: function configureCompiler(config) {\n      _getTestBedViewEngine().configureCompiler(config);\n\n      return TestBedViewEngine;\n    }\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n\n  }, {\n    key: \"configureTestingModule\",\n    value: function configureTestingModule(moduleDef) {\n      _getTestBedViewEngine().configureTestingModule(moduleDef);\n\n      return TestBedViewEngine;\n    }\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n\n  }, {\n    key: \"compileComponents\",\n    value: function compileComponents() {\n      return getTestBed().compileComponents();\n    }\n  }, {\n    key: \"overrideModule\",\n    value: function overrideModule(ngModule, override) {\n      _getTestBedViewEngine().overrideModule(ngModule, override);\n\n      return TestBedViewEngine;\n    }\n  }, {\n    key: \"overrideComponent\",\n    value: function overrideComponent(component, override) {\n      _getTestBedViewEngine().overrideComponent(component, override);\n\n      return TestBedViewEngine;\n    }\n  }, {\n    key: \"overrideDirective\",\n    value: function overrideDirective(directive, override) {\n      _getTestBedViewEngine().overrideDirective(directive, override);\n\n      return TestBedViewEngine;\n    }\n  }, {\n    key: \"overridePipe\",\n    value: function overridePipe(pipe, override) {\n      _getTestBedViewEngine().overridePipe(pipe, override);\n\n      return TestBedViewEngine;\n    }\n  }, {\n    key: \"overrideTemplate\",\n    value: function overrideTemplate(component, template) {\n      _getTestBedViewEngine().overrideComponent(component, {\n        set: {\n          template: template,\n          templateUrl: null\n        }\n      });\n\n      return TestBedViewEngine;\n    }\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n\n  }, {\n    key: \"overrideTemplateUsingTestingModule\",\n    value: function overrideTemplateUsingTestingModule(component, template) {\n      _getTestBedViewEngine().overrideTemplateUsingTestingModule(component, template);\n\n      return TestBedViewEngine;\n    }\n  }, {\n    key: \"overrideProvider\",\n    value: function overrideProvider(token, provider) {\n      _getTestBedViewEngine().overrideProvider(token, provider);\n\n      return TestBedViewEngine;\n    }\n  }, {\n    key: \"inject\",\n    value: function inject(token, notFoundValue, flags) {\n      return _getTestBedViewEngine().inject(token, notFoundValue, flags);\n    }\n    /** @deprecated from v9.0.0 use TestBed.inject */\n\n  }, {\n    key: \"get\",\n    value: function get(token) {\n      var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.THROW_IF_NOT_FOUND;\n      var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : InjectFlags.Default;\n      return _getTestBedViewEngine().inject(token, notFoundValue, flags);\n    }\n  }, {\n    key: \"createComponent\",\n    value: function createComponent(component) {\n      return _getTestBedViewEngine().createComponent(component);\n    }\n  }]);\n\n  return TestBedViewEngine;\n}();\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n *\n * @publicApi\n */\n\n\nvar TestBed = ɵivyEnabled ? TestBedRender3 : TestBedViewEngine;\n/**\n * Returns a singleton of the applicable `TestBed`.\n *\n * It will be either an instance of `TestBedViewEngine` or `TestBedRender3`.\n *\n * @publicApi\n */\n\nvar getTestBed = ɵivyEnabled ? _getTestBedRender3 : _getTestBedViewEngine;\nvar testBed$1;\n\nfunction _getTestBedViewEngine() {\n  return testBed$1 = testBed$1 || new TestBedViewEngine();\n}\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n * @publicApi\n */\n\n\nfunction _inject(tokens, fn) {\n  var testBed = getTestBed();\n\n  if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n      var _this26 = this;\n\n      // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n      // the injected tokens.\n      return testBed.compileComponents().then(function () {\n        var completer = testBed.inject(AsyncTestCompleter);\n        testBed.execute(tokens, fn, _this26);\n        return completer.promise;\n      });\n    };\n  } else {\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n      return testBed.execute(tokens, fn, this);\n    };\n  }\n}\n/**\n * @publicApi\n */\n\n\nvar InjectSetupWrapper = /*#__PURE__*/function () {\n  function InjectSetupWrapper(_moduleDef) {\n    _classCallCheck(this, InjectSetupWrapper);\n\n    this._moduleDef = _moduleDef;\n  }\n\n  _createClass(InjectSetupWrapper, [{\n    key: \"_addModule\",\n    value: function _addModule() {\n      var moduleDef = this._moduleDef();\n\n      if (moduleDef) {\n        getTestBed().configureTestingModule(moduleDef);\n      }\n    }\n  }, {\n    key: \"inject\",\n    value: function inject(tokens, fn) {\n      var self = this; // Not using an arrow function to preserve context passed from call site\n\n      return function () {\n        self._addModule();\n\n        return _inject(tokens, fn).call(this);\n      };\n    }\n  }]);\n\n  return InjectSetupWrapper;\n}();\n\nfunction withModule(moduleDef, fn) {\n  if (fn) {\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n      var testBed = getTestBed();\n\n      if (moduleDef) {\n        testBed.configureTestingModule(moduleDef);\n      }\n\n      return fn.apply(this);\n    };\n  }\n\n  return new InjectSetupWrapper(function () {\n    return moduleDef;\n  });\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar _global = typeof window === 'undefined' ? global : window; // Reset the test providers and the fake async zone before each test.\n\n\nif (_global.beforeEach) {\n  _global.beforeEach(function () {\n    TestBed.resetTestingModule();\n    resetFakeAsyncZone();\n  });\n}\n/**\n * This API should be removed. But doing so seems to break `google3` and so it requires a bit of\n * investigation.\n *\n * A work around is to mark it as `@codeGenApi` for now and investigate later.\n *\n * @codeGenApi\n */\n// TODO(iminar): Remove this code in a safe way.\n\n\nvar __core_private_testing_placeholder__ = '';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ComponentFixture, ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, InjectSetupWrapper, TestBed, TestComponentRenderer, __core_private_testing_placeholder__, async, discardPeriodicTasks, fakeAsync, flush, flushMicrotasks, getTestBed, _inject as inject, resetFakeAsyncZone, tick, waitForAsync, withModule, MetadataOverrider as ɵMetadataOverrider, TestingCompiler as ɵTestingCompiler, TestingCompilerFactory as ɵTestingCompilerFactory, TestBedViewEngine as ɵangular_packages_core_testing_testing_a, TestBedRender3 as ɵangular_packages_core_testing_testing_b, _getTestBedRender3 as ɵangular_packages_core_testing_testing_c }; //# sourceMappingURL=testing.js.map",
  "map": {
    "version": 3,
    "sources": [
      "c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@angular/core/__ivy_ngcc__/fesm2015/testing.js"
    ],
    "names": [
      "getDebugNode",
      "RendererFactory2",
      "ɵstringify",
      "ɵReflectionCapabilities",
      "Directive",
      "Component",
      "Pipe",
      "NgModule",
      "ɵgetInjectableDef",
      "ɵNG_COMP_DEF",
      "ɵRender3NgModuleRef",
      "ApplicationInitStatus",
      "LOCALE_ID",
      "ɵDEFAULT_LOCALE_ID",
      "ɵsetLocaleId",
      "ɵRender3ComponentFactory",
      "ɵcompileComponent",
      "ɵNG_DIR_DEF",
      "ɵcompileDirective",
      "ɵNG_PIPE_DEF",
      "ɵcompilePipe",
      "ɵNG_MOD_DEF",
      "ɵtransitiveScopesFor",
      "ɵpatchComponentDefWithScope",
      "ɵNG_INJ_DEF",
      "ɵcompileNgModuleDefs",
      "NgZone",
      "Compiler",
      "COMPILER_OPTIONS",
      "ɵNgModuleFactory",
      "ModuleWithComponentFactories",
      "InjectionToken",
      "Injector",
      "InjectFlags",
      "ɵresetCompiledComponents",
      "ɵflushModuleScopingQueueAsMuchAsPossible",
      "Injectable",
      "ɵclearOverrides",
      "ɵoverrideComponentView",
      "ɵINJECTOR_SCOPE",
      "Optional",
      "SkipSelf",
      "ɵoverrideProvider",
      "ɵivyEnabled",
      "__awaiter",
      "ResourceLoader",
      "ɵngcc0",
      "waitForAsync",
      "fn",
      "_Zone",
      "Zone",
      "Promise",
      "reject",
      "asyncTest",
      "__symbol__",
      "async",
      "ComponentFixture",
      "componentRef",
      "ngZone",
      "_autoDetect",
      "_isStable",
      "_isDestroyed",
      "_resolve",
      "_promise",
      "_onUnstableSubscription",
      "_onStableSubscription",
      "_onMicrotaskEmptySubscription",
      "_onErrorSubscription",
      "changeDetectorRef",
      "elementRef",
      "location",
      "debugElement",
      "nativeElement",
      "componentInstance",
      "instance",
      "runOutsideAngular",
      "onUnstable",
      "subscribe",
      "next",
      "onMicrotaskEmpty",
      "detectChanges",
      "onStable",
      "scheduleMicroTask",
      "hasPendingMacrotasks",
      "onError",
      "error",
      "checkNoChanges",
      "run",
      "_tick",
      "autoDetect",
      "Error",
      "isStable",
      "resolve",
      "res",
      "_renderer",
      "undefined",
      "injector",
      "get",
      "renderer",
      "_getRenderer",
      "whenRenderingDone",
      "whenStable",
      "destroy",
      "unsubscribe",
      "current",
      "fakeAsyncTestModule",
      "fakeAsyncTestModuleNotLoadedErrorMessage",
      "resetFakeAsyncZone",
      "fakeAsync",
      "tick",
      "millis",
      "tickOptions",
      "processNewMacroTasksSynchronously",
      "flush",
      "maxTurns",
      "discardPeriodicTasks",
      "flushMicrotasks",
      "AsyncTestCompleter",
      "rej",
      "_reject",
      "value",
      "stackTrace",
      "resolveComponentResources",
      "resourceResolver",
      "componentResolved",
      "urlMap",
      "Map",
      "cachedResourceResolve",
      "url",
      "promise",
      "resp",
      "set",
      "then",
      "unwrapResponse",
      "componentResourceResolutionQueue",
      "forEach",
      "component",
      "type",
      "promises",
      "templateUrl",
      "push",
      "template",
      "styleUrls",
      "styles",
      "styleOffset",
      "length",
      "styleUrl",
      "index",
      "style",
      "splice",
      "indexOf",
      "fullyResolved",
      "all",
      "componentDefResolved",
      "clearResolutionOfComponentResourcesQueue",
      "componentDefPendingResolution",
      "Set",
      "maybeQueueResolutionOfComponentResources",
      "metadata",
      "componentNeedsResolution",
      "add",
      "isComponentDefPendingResolution",
      "has",
      "hasOwnProperty",
      "old",
      "restoreComponentResolutionQueue",
      "queue",
      "clear",
      "_",
      "isComponentResourceResolutionQueueEmpty",
      "size",
      "response",
      "text",
      "delete",
      "_nextReferenceId",
      "MetadataOverrider",
      "_references",
      "metadataClass",
      "oldMetadata",
      "override",
      "props",
      "_valueProps",
      "prop",
      "remove",
      "setMetadata",
      "removeMetadata",
      "addMetadata",
      "references",
      "removeObjects",
      "removeValue",
      "Array",
      "isArray",
      "_propHashKey",
      "propValue",
      "filter",
      "addValue",
      "concat",
      "propName",
      "replacer",
      "key",
      "_serializeReference",
      "JSON",
      "stringify",
      "ref",
      "id",
      "obj",
      "Object",
      "keys",
      "startsWith",
      "proto",
      "getPrototypeOf",
      "protoProp",
      "desc",
      "getOwnPropertyDescriptor",
      "reflection",
      "OverrideResolver",
      "overrides",
      "resolved",
      "addOverride",
      "annotations",
      "i",
      "annotation",
      "isKnownType",
      "getAnnotation",
      "overrider",
      "overrideMetadata",
      "DirectiveResolver",
      "ComponentResolver",
      "PipeResolver",
      "NgModuleResolver",
      "TestingModuleOverride",
      "isTestingModuleOverride",
      "DECLARATION",
      "OVERRIDE_TEMPLATE",
      "R3TestBedCompiler",
      "platform",
      "additionalModuleTypes",
      "originalComponentResolutionQueue",
      "declarations",
      "imports",
      "providers",
      "schemas",
      "pendingComponents",
      "pendingDirectives",
      "pendingPipes",
      "seenComponents",
      "seenDirectives",
      "overriddenModules",
      "existingComponentStyles",
      "resolvers",
      "initResolvers",
      "componentToModuleScope",
      "initialNgDefs",
      "defCleanupOps",
      "_injector",
      "compilerProviders",
      "providerOverrides",
      "rootProviderOverrides",
      "providerOverridesByModule",
      "providerOverridesByToken",
      "moduleProvidersOverridden",
      "testModuleRef",
      "DynamicTestModule",
      "testModuleType",
      "moduleDef",
      "queueTypeArray",
      "queueTypesFromModulesArray",
      "ngModule",
      "module",
      "invalidTypeError",
      "name",
      "recompileNgModule",
      "directive",
      "pipe",
      "token",
      "provider",
      "providerDef",
      "useFactory",
      "provide",
      "deps",
      "multi",
      "useValue",
      "injectableDef",
      "isRoot",
      "providedIn",
      "overridesBucket",
      "existingOverrides",
      "def",
      "hasStyleUrls",
      "overrideStyleUrls",
      "overrideComponent",
      "clearComponentResolutionQueue",
      "needsAsyncResources",
      "compileTypesSync",
      "resolver",
      "resourceLoader",
      "compileTestModule",
      "applyTransitiveScopes",
      "applyProviderOverrides",
      "patchComponentsWithExistingStyles",
      "parentInjector",
      "runInitializers",
      "localeId",
      "moduleType",
      "applyProviderOverridesToModule",
      "compileComponents",
      "maybeUnwrapFn",
      "ɵmod",
      "reduce",
      "factories",
      "declaration",
      "componentDef",
      "ɵcmp",
      "maybeStoreNgDef",
      "testingModuleDef",
      "affectedModules",
      "collectModulesAffectedByOverrides",
      "storeFieldOfDefOnType",
      "transitiveCompileScopes",
      "moduleToScope",
      "getScopeOfModule",
      "isTestingModule",
      "realType",
      "componentType",
      "moduleScope",
      "maybeApplyOverrides",
      "field",
      "hasProviderOverrides",
      "patchDefWithProviderOverrides",
      "injectorDef",
      "getOverriddenProviders",
      "importedModule",
      "flatten",
      "isModuleWithProviders",
      "object",
      "fieldName",
      "originalValue",
      "arr",
      "queueType",
      "processedNgModuleDefs",
      "queueTypesFromModulesArrayRecur",
      "hasNgModuleDef",
      "exports",
      "seenModules",
      "calcAffectedModulesRecur",
      "path",
      "item",
      "currentDef",
      "defField",
      "forEachRight",
      "op",
      "descriptor",
      "defineProperty",
      "RootScopeModule",
      "enableLongStackTrace",
      "R3TestCompiler",
      "compilerOptions",
      "opts",
      "CompilerModule",
      "CompilerModuleFactory",
      "create",
      "getProviderToken",
      "getSingleProviderOverrides",
      "flattenedProviders",
      "getProviderOverrides",
      "overriddenProviders",
      "final",
      "seenOverriddenProviders",
      "unshift",
      "assign",
      "providersResolver",
      "processProvidersFn",
      "ngDef",
      "maybeFn",
      "Function",
      "values",
      "mapFn",
      "out",
      "getProviderField",
      "idx",
      "expectedType",
      "testBed",
      "_compileNgModuleSync",
      "_compileNgModuleAsync",
      "ngModuleFactory",
      "compileModuleSync",
      "componentFactories",
      "_getComponentFactories",
      "compileModuleAsync",
      "meta",
      "_getModuleResolver",
      "TestComponentRenderer",
      "rootElementId",
      "ComponentFixtureAutoDetect",
      "ComponentFixtureNoNgZone",
      "_nextRootElementId",
      "TestBedRender3",
      "_compiler",
      "_testModuleRef",
      "_activeFixtures",
      "_globalCompilationChecked",
      "aotSummaries",
      "resetTestingModule",
      "checkGlobalCompilationFinished",
      "compiler",
      "restoreOriginalState",
      "destroyActiveFixtures",
      "config",
      "useJit",
      "setCompilerProviders",
      "assertNotInstantiated",
      "configureTestingModule",
      "notFoundValue",
      "flags",
      "UNDEFINED",
      "result",
      "THROW_IF_NOT_FOUND",
      "Default",
      "inject",
      "tokens",
      "context",
      "params",
      "map",
      "t",
      "apply",
      "overrideModule",
      "overrideTemplateUsingTestingModule",
      "overrideDirective",
      "overridePipe",
      "overrideProvider",
      "testComponentRenderer",
      "rootElId",
      "insertRootElement",
      "noNgZone",
      "componentFactory",
      "initComponent",
      "NULL",
      "fixture",
      "finalize",
      "methodName",
      "methodDescription",
      "e",
      "console",
      "stacktrace",
      "_getTestBedRender3",
      "initTestEnvironment",
      "resetTestEnvironment",
      "configureCompiler",
      "createComponent",
      "unimplemented",
      "TestingCompiler",
      "summaries",
      "ɵfac",
      "TestingCompiler_Factory",
      "ɵTestingCompiler_BaseFactory",
      "ɵprov",
      "ɵɵdefineInjectable",
      "factory",
      "ɵɵgetInheritedFactory",
      "ngDevMode",
      "ɵsetClassMetadata",
      "TestingCompilerFactory",
      "_nextRootElementId$1",
      "TestBedViewEngine",
      "_instantiated",
      "_moduleRef",
      "_moduleFactory",
      "_compilerOptions",
      "_moduleOverrides",
      "_componentOverrides",
      "_directiveOverrides",
      "_pipeOverrides",
      "_providers",
      "_declarations",
      "_imports",
      "_schemas",
      "_testEnvAotSummaries",
      "_aotSummaries",
      "_templateOverrides",
      "_isRoot",
      "_rootProviderOverrides",
      "_assertNotInstantiated",
      "_createCompilerAndModule",
      "compileModuleAndAllComponentsAsync",
      "moduleAndComponentFactories",
      "compileModuleAndAllComponentsSync",
      "errorCompType",
      "getComponentFromError",
      "templateOf",
      "compFactory",
      "getComponentFactory",
      "shouldCoalesceEventChangeDetection",
      "ngZoneInjector",
      "parent",
      "TestBed",
      "entry",
      "rootScopeImports",
      "decorators",
      "args",
      "jit",
      "compilerFactory",
      "createTestingCompiler",
      "summary",
      "loadAotSummaries",
      "_initIfNeeded",
      "overrideProviderImpl",
      "deprecated",
      "dep",
      "depFlags",
      "depToken",
      "deprecatedBehavior",
      "OverrideComponent",
      "selector",
      "_getTestBedViewEngine",
      "getTestBed",
      "testBed$1",
      "completer",
      "execute",
      "InjectSetupWrapper",
      "_moduleDef",
      "self",
      "_addModule",
      "call",
      "withModule",
      "_global",
      "window",
      "global",
      "beforeEach",
      "__core_private_testing_placeholder__",
      "ɵMetadataOverrider",
      "ɵTestingCompiler",
      "ɵTestingCompilerFactory",
      "ɵangular_packages_core_testing_testing_a",
      "ɵangular_packages_core_testing_testing_b",
      "ɵangular_packages_core_testing_testing_c"
    ],
    "mappings": "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AyB;AACrB,WAAOA,mBAAmB,CAACG,SAApB,CAA8B5D,EAA9B,CAAP;AACH;;AACD,QAAM,IAAI0C,KAAJ,CAAUgB,wCAAV,CAAN;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,IAAT,GAEG;AAAA,MAFWC,MAEX,uEAFoB,CAEpB;AAAA,MAFuBC,WAEvB,uEAFqC;AACpCC,IAAAA,iCAAiC,EAAE;AADC,GAErC;;AACC,MAAIP,mBAAJ,EAAyB;AACrB,WAAOA,mBAAmB,CAACI,IAApB,CAAyBC,MAAzB,EAAiCC,WAAjC,CAAP;AACH;;AACD,QAAM,IAAIrB,KAAJ,CAAUgB,wCAAV,CAAN;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,KAAT,CAAeC,QAAf,EAAyB;AACrB,MAAIT,mBAAJ,EAAyB;AACrB,WAAOA,mBAAmB,CAACQ,KAApB,CAA0BC,QAA1B,CAAP;AACH;;AACD,QAAM,IAAIxB,KAAJ,CAAUgB,wCAAV,CAAN;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASS,oBAAT,GAAgC;AAC5B,MAAIV,mBAAJ,EAAyB;AACrB,WAAOA,mBAAmB,CAACU,oBAApB,EAAP;AACH;;AACD,QAAM,IAAIzB,KAAJ,CAAUgB,wCAAV,CAAN;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASU,eAAT,GAA2B;AACvB,MAAIX,mBAAJ,EAAyB;AACrB,WAAOA,mBAAmB,CAACW,eAApB,EAAP;AACH;;AACD,QAAM,IAAI1B,KAAJ,CAAUgB,wCAAV,CAAN;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;;IACMW,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",
    "sourcesContent": [
      "/**\n * @license Angular v11.2.14\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { getDebugNode, RendererFactory2, ɵstringify, ɵReflectionCapabilities, Directive, Component, Pipe, NgModule, ɵgetInjectableDef, ɵNG_COMP_DEF, ɵRender3NgModuleRef, ApplicationInitStatus, LOCALE_ID, ɵDEFAULT_LOCALE_ID, ɵsetLocaleId, ɵRender3ComponentFactory, ɵcompileComponent, ɵNG_DIR_DEF, ɵcompileDirective, ɵNG_PIPE_DEF, ɵcompilePipe, ɵNG_MOD_DEF, ɵtransitiveScopesFor, ɵpatchComponentDefWithScope, ɵNG_INJ_DEF, ɵcompileNgModuleDefs, NgZone, Compiler, COMPILER_OPTIONS, ɵNgModuleFactory, ModuleWithComponentFactories, InjectionToken, Injector, InjectFlags, ɵresetCompiledComponents, ɵflushModuleScopingQueueAsMuchAsPossible, Injectable, ɵclearOverrides, ɵoverrideComponentView, ɵINJECTOR_SCOPE, Optional, SkipSelf, ɵoverrideProvider, ɵivyEnabled } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { ResourceLoader } from '@angular/compiler';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', waitForAsync(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * @publicApi\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction waitForAsync(fn) {\n    const _Zone = typeof Zone !== 'undefined' ? Zone : null;\n    if (!_Zone) {\n        return function () {\n            return Promise.reject('Zone is needed for the waitForAsync() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/zone.js');\n        };\n    }\n    const asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n    if (typeof asyncTest === 'function') {\n        return asyncTest(fn);\n    }\n    return function () {\n        return Promise.reject('zone-testing.js is needed for the async() test helper but could not be found. ' +\n            'Please make sure that your environment includes zone.js/dist/zone-testing.js');\n    };\n}\n/**\n * @deprecated use `waitForAsync()`, (expected removal in v12)\n * @see {@link waitForAsync}\n * @publicApi\n * */\nfunction async(fn) {\n    return waitForAsync(fn);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Fixture for debugging and testing a component.\n *\n * @publicApi\n */\nclass ComponentFixture {\n    constructor(componentRef, ngZone, _autoDetect) {\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        this._autoDetect = _autoDetect;\n        this._isStable = true;\n        this._isDestroyed = false;\n        this._resolve = null;\n        this._promise = null;\n        this._onUnstableSubscription = null;\n        this._onStableSubscription = null;\n        this._onMicrotaskEmptySubscription = null;\n        this._onErrorSubscription = null;\n        this.changeDetectorRef = componentRef.changeDetectorRef;\n        this.elementRef = componentRef.location;\n        this.debugElement = getDebugNode(this.elementRef.nativeElement);\n        this.componentInstance = componentRef.instance;\n        this.nativeElement = this.elementRef.nativeElement;\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        if (ngZone) {\n            // Create subscriptions outside the NgZone so that the callbacks run oustide\n            // of NgZone.\n            ngZone.runOutsideAngular(() => {\n                this._onUnstableSubscription = ngZone.onUnstable.subscribe({\n                    next: () => {\n                        this._isStable = false;\n                    }\n                });\n                this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n                    next: () => {\n                        if (this._autoDetect) {\n                            // Do a change detection run with checkNoChanges set to true to check\n                            // there are no changes on the second run.\n                            this.detectChanges(true);\n                        }\n                    }\n                });\n                this._onStableSubscription = ngZone.onStable.subscribe({\n                    next: () => {\n                        this._isStable = true;\n                        // Check whether there is a pending whenStable() completer to resolve.\n                        if (this._promise !== null) {\n                            // If so check whether there are no pending macrotasks before resolving.\n                            // Do this check in the next tick so that ngZone gets a chance to update the state of\n                            // pending macrotasks.\n                            scheduleMicroTask(() => {\n                                if (!ngZone.hasPendingMacrotasks) {\n                                    if (this._promise !== null) {\n                                        this._resolve(true);\n                                        this._resolve = null;\n                                        this._promise = null;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                this._onErrorSubscription = ngZone.onError.subscribe({\n                    next: (error) => {\n                        throw error;\n                    }\n                });\n            });\n        }\n    }\n    _tick(checkNoChanges) {\n        this.changeDetectorRef.detectChanges();\n        if (checkNoChanges) {\n            this.checkNoChanges();\n        }\n    }\n    /**\n     * Trigger a change detection cycle for the component.\n     */\n    detectChanges(checkNoChanges = true) {\n        if (this.ngZone != null) {\n            // Run the change detection inside the NgZone so that any async tasks as part of the change\n            // detection are captured by the zone and can be waited for in isStable.\n            this.ngZone.run(() => {\n                this._tick(checkNoChanges);\n            });\n        }\n        else {\n            // Running without zone. Just do the change detection.\n            this._tick(checkNoChanges);\n        }\n    }\n    /**\n     * Do a change detection run to make sure there were no changes.\n     */\n    checkNoChanges() {\n        this.changeDetectorRef.checkNoChanges();\n    }\n    /**\n     * Set whether the fixture should autodetect changes.\n     *\n     * Also runs detectChanges once so that any existing change is detected.\n     */\n    autoDetectChanges(autoDetect = true) {\n        if (this.ngZone == null) {\n            throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n        }\n        this._autoDetect = autoDetect;\n        this.detectChanges();\n    }\n    /**\n     * Return whether the fixture is currently stable or has async tasks that have not been completed\n     * yet.\n     */\n    isStable() {\n        return this._isStable && !this.ngZone.hasPendingMacrotasks;\n    }\n    /**\n     * Get a promise that resolves when the fixture is stable.\n     *\n     * This can be used to resume testing after events have triggered asynchronous activity or\n     * asynchronous change detection.\n     */\n    whenStable() {\n        if (this.isStable()) {\n            return Promise.resolve(false);\n        }\n        else if (this._promise !== null) {\n            return this._promise;\n        }\n        else {\n            this._promise = new Promise(res => {\n                this._resolve = res;\n            });\n            return this._promise;\n        }\n    }\n    _getRenderer() {\n        if (this._renderer === undefined) {\n            this._renderer = this.componentRef.injector.get(RendererFactory2, null);\n        }\n        return this._renderer;\n    }\n    /**\n     * Get a promise that resolves when the ui state is stable following animations.\n     */\n    whenRenderingDone() {\n        const renderer = this._getRenderer();\n        if (renderer && renderer.whenRenderingDone) {\n            return renderer.whenRenderingDone();\n        }\n        return this.whenStable();\n    }\n    /**\n     * Trigger component destruction.\n     */\n    destroy() {\n        if (!this._isDestroyed) {\n            this.componentRef.destroy();\n            if (this._onUnstableSubscription != null) {\n                this._onUnstableSubscription.unsubscribe();\n                this._onUnstableSubscription = null;\n            }\n            if (this._onStableSubscription != null) {\n                this._onStableSubscription.unsubscribe();\n                this._onStableSubscription = null;\n            }\n            if (this._onMicrotaskEmptySubscription != null) {\n                this._onMicrotaskEmptySubscription.unsubscribe();\n                this._onMicrotaskEmptySubscription = null;\n            }\n            if (this._onErrorSubscription != null) {\n                this._onErrorSubscription.unsubscribe();\n                this._onErrorSubscription = null;\n            }\n            this._isDestroyed = true;\n        }\n    }\n}\nfunction scheduleMicroTask(fn) {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _Zone = typeof Zone !== 'undefined' ? Zone : null;\nconst fakeAsyncTestModule = _Zone && _Zone[_Zone.__symbol__('fakeAsyncTest')];\nconst fakeAsyncTestModuleNotLoadedErrorMessage = `zone-testing.js is needed for the fakeAsync() test helper but could not be found.\n        Please make sure that your environment includes zone.js/dist/zone-testing.js`;\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @publicApi\n */\nfunction resetFakeAsyncZone() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.resetFakeAsyncZone();\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns The function wrapped to be executed in the fakeAsync zone\n *\n * @publicApi\n */\nfunction fakeAsync(fn) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.fakeAsync(fn);\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param millis, the number of millisecond to advance the virtual timer\n * @param tickOptions, the options of tick with a flag called\n * processNewMacroTasksSynchronously, whether to invoke the new macroTasks, by default is\n * false, means the new macroTasks will be invoked\n *\n * For example,\n *\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick();\n *   expect(nestedTimeoutInvoked).toBe(true);\n * }));\n *\n * in this case, we have a nested timeout (new macroTask), when we tick, both the\n * funcWithNestedTimeout and the nested timeout both will be invoked.\n *\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick(0, {processNewMacroTasksSynchronously: false});\n *   expect(nestedTimeoutInvoked).toBe(false);\n * }));\n *\n * if we pass the tickOptions with processNewMacroTasksSynchronously to be false, the nested timeout\n * will not be invoked.\n *\n *\n * @publicApi\n */\nfunction tick(millis = 0, tickOptions = {\n    processNewMacroTasksSynchronously: true\n}) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.tick(millis, tickOptions);\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * @param maxTurns\n * @returns The simulated time elapsed, in millis.\n *\n * @publicApi\n */\nfunction flush(maxTurns) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.flush(maxTurns);\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Discard all remaining periodic tasks.\n *\n * @publicApi\n */\nfunction discardPeriodicTasks() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.discardPeriodicTasks();\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Flush any pending microtasks.\n *\n * @publicApi\n */\nfunction flushMicrotasks() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.flushMicrotasks();\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n */\nclass AsyncTestCompleter {\n    constructor() {\n        this._promise = new Promise((res, rej) => {\n            this._resolve = res;\n            this._reject = rej;\n        });\n    }\n    done(value) {\n        this._resolve(value);\n    }\n    fail(error, stackTrace) {\n        this._reject(error);\n    }\n    get promise() {\n        return this._promise;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n */\nfunction resolveComponentResources(resourceResolver) {\n    // Store all promises which are fetching the resources.\n    const componentResolved = [];\n    // Cache so that we don't fetch the same resource more than once.\n    const urlMap = new Map();\n    function cachedResourceResolve(url) {\n        let promise = urlMap.get(url);\n        if (!promise) {\n            const resp = resourceResolver(url);\n            urlMap.set(url, promise = resp.then(unwrapResponse));\n        }\n        return promise;\n    }\n    componentResourceResolutionQueue.forEach((component, type) => {\n        const promises = [];\n        if (component.templateUrl) {\n            promises.push(cachedResourceResolve(component.templateUrl).then((template) => {\n                component.template = template;\n            }));\n        }\n        const styleUrls = component.styleUrls;\n        const styles = component.styles || (component.styles = []);\n        const styleOffset = component.styles.length;\n        styleUrls && styleUrls.forEach((styleUrl, index) => {\n            styles.push(''); // pre-allocate array.\n            promises.push(cachedResourceResolve(styleUrl).then((style) => {\n                styles[styleOffset + index] = style;\n                styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                if (styleUrls.length == 0) {\n                    component.styleUrls = undefined;\n                }\n            }));\n        });\n        const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));\n        componentResolved.push(fullyResolved);\n    });\n    clearResolutionOfComponentResourcesQueue();\n    return Promise.all(componentResolved).then(() => undefined);\n}\nlet componentResourceResolutionQueue = new Map();\n// Track when existing ɵcmp for a Type is waiting on resources.\nconst componentDefPendingResolution = new Set();\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\n    if (componentNeedsResolution(metadata)) {\n        componentResourceResolutionQueue.set(type, metadata);\n        componentDefPendingResolution.add(type);\n    }\n}\nfunction isComponentDefPendingResolution(type) {\n    return componentDefPendingResolution.has(type);\n}\nfunction componentNeedsResolution(component) {\n    return !!((component.templateUrl && !component.hasOwnProperty('template')) ||\n        component.styleUrls && component.styleUrls.length);\n}\nfunction clearResolutionOfComponentResourcesQueue() {\n    const old = componentResourceResolutionQueue;\n    componentResourceResolutionQueue = new Map();\n    return old;\n}\nfunction restoreComponentResolutionQueue(queue) {\n    componentDefPendingResolution.clear();\n    queue.forEach((_, type) => componentDefPendingResolution.add(type));\n    componentResourceResolutionQueue = queue;\n}\nfunction isComponentResourceResolutionQueueEmpty() {\n    return componentResourceResolutionQueue.size === 0;\n}\nfunction unwrapResponse(response) {\n    return typeof response == 'string' ? response : response.text();\n}\nfunction componentDefResolved(type) {\n    componentDefPendingResolution.delete(type);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet _nextReferenceId = 0;\nclass MetadataOverrider {\n    constructor() {\n        this._references = new Map();\n    }\n    /**\n     * Creates a new instance for the given metadata class\n     * based on an old instance and overrides.\n     */\n    overrideMetadata(metadataClass, oldMetadata, override) {\n        const props = {};\n        if (oldMetadata) {\n            _valueProps(oldMetadata).forEach((prop) => props[prop] = oldMetadata[prop]);\n        }\n        if (override.set) {\n            if (override.remove || override.add) {\n                throw new Error(`Cannot set and add/remove ${ɵstringify(metadataClass)} at the same time!`);\n            }\n            setMetadata(props, override.set);\n        }\n        if (override.remove) {\n            removeMetadata(props, override.remove, this._references);\n        }\n        if (override.add) {\n            addMetadata(props, override.add);\n        }\n        return new metadataClass(props);\n    }\n}\nfunction removeMetadata(metadata, remove, references) {\n    const removeObjects = new Set();\n    for (const prop in remove) {\n        const removeValue = remove[prop];\n        if (Array.isArray(removeValue)) {\n            removeValue.forEach((value) => {\n                removeObjects.add(_propHashKey(prop, value, references));\n            });\n        }\n        else {\n            removeObjects.add(_propHashKey(prop, removeValue, references));\n        }\n    }\n    for (const prop in metadata) {\n        const propValue = metadata[prop];\n        if (Array.isArray(propValue)) {\n            metadata[prop] = propValue.filter((value) => !removeObjects.has(_propHashKey(prop, value, references)));\n        }\n        else {\n            if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n                metadata[prop] = undefined;\n            }\n        }\n    }\n}\nfunction addMetadata(metadata, add) {\n    for (const prop in add) {\n        const addValue = add[prop];\n        const propValue = metadata[prop];\n        if (propValue != null && Array.isArray(propValue)) {\n            metadata[prop] = propValue.concat(addValue);\n        }\n        else {\n            metadata[prop] = addValue;\n        }\n    }\n}\nfunction setMetadata(metadata, set) {\n    for (const prop in set) {\n        metadata[prop] = set[prop];\n    }\n}\nfunction _propHashKey(propName, propValue, references) {\n    const replacer = (key, value) => {\n        if (typeof value === 'function') {\n            value = _serializeReference(value, references);\n        }\n        return value;\n    };\n    return `${propName}:${JSON.stringify(propValue, replacer)}`;\n}\nfunction _serializeReference(ref, references) {\n    let id = references.get(ref);\n    if (!id) {\n        id = `${ɵstringify(ref)}${_nextReferenceId++}`;\n        references.set(ref, id);\n    }\n    return id;\n}\nfunction _valueProps(obj) {\n    const props = [];\n    // regular public props\n    Object.keys(obj).forEach((prop) => {\n        if (!prop.startsWith('_')) {\n            props.push(prop);\n        }\n    });\n    // getters\n    let proto = obj;\n    while (proto = Object.getPrototypeOf(proto)) {\n        Object.keys(proto).forEach((protoProp) => {\n            const desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n            if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n                props.push(protoProp);\n            }\n        });\n    }\n    return props;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst reflection = new ɵReflectionCapabilities();\n/**\n * Allows to override ivy metadata for tests (via the `TestBed`).\n */\nclass OverrideResolver {\n    constructor() {\n        this.overrides = new Map();\n        this.resolved = new Map();\n    }\n    addOverride(type, override) {\n        const overrides = this.overrides.get(type) || [];\n        overrides.push(override);\n        this.overrides.set(type, overrides);\n        this.resolved.delete(type);\n    }\n    setOverrides(overrides) {\n        this.overrides.clear();\n        overrides.forEach(([type, override]) => {\n            this.addOverride(type, override);\n        });\n    }\n    getAnnotation(type) {\n        const annotations = reflection.annotations(type);\n        // Try to find the nearest known Type annotation and make sure that this annotation is an\n        // instance of the type we are looking for, so we can use it for resolution. Note: there might\n        // be multiple known annotations found due to the fact that Components can extend Directives (so\n        // both Directive and Component annotations would be present), so we always check if the known\n        // annotation has the right type.\n        for (let i = annotations.length - 1; i >= 0; i--) {\n            const annotation = annotations[i];\n            const isKnownType = annotation instanceof Directive || annotation instanceof Component ||\n                annotation instanceof Pipe || annotation instanceof NgModule;\n            if (isKnownType) {\n                return annotation instanceof this.type ? annotation : null;\n            }\n        }\n        return null;\n    }\n    resolve(type) {\n        let resolved = this.resolved.get(type) || null;\n        if (!resolved) {\n            resolved = this.getAnnotation(type);\n            if (resolved) {\n                const overrides = this.overrides.get(type);\n                if (overrides) {\n                    const overrider = new MetadataOverrider();\n                    overrides.forEach(override => {\n                        resolved = overrider.overrideMetadata(this.type, resolved, override);\n                    });\n                }\n            }\n            this.resolved.set(type, resolved);\n        }\n        return resolved;\n    }\n}\nclass DirectiveResolver extends OverrideResolver {\n    get type() {\n        return Directive;\n    }\n}\nclass ComponentResolver extends OverrideResolver {\n    get type() {\n        return Component;\n    }\n}\nclass PipeResolver extends OverrideResolver {\n    get type() {\n        return Pipe;\n    }\n}\nclass NgModuleResolver extends OverrideResolver {\n    get type() {\n        return NgModule;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TestingModuleOverride;\n(function (TestingModuleOverride) {\n    TestingModuleOverride[TestingModuleOverride[\"DECLARATION\"] = 0] = \"DECLARATION\";\n    TestingModuleOverride[TestingModuleOverride[\"OVERRIDE_TEMPLATE\"] = 1] = \"OVERRIDE_TEMPLATE\";\n})(TestingModuleOverride || (TestingModuleOverride = {}));\nfunction isTestingModuleOverride(value) {\n    return value === TestingModuleOverride.DECLARATION ||\n        value === TestingModuleOverride.OVERRIDE_TEMPLATE;\n}\nclass R3TestBedCompiler {\n    constructor(platform, additionalModuleTypes) {\n        this.platform = platform;\n        this.additionalModuleTypes = additionalModuleTypes;\n        this.originalComponentResolutionQueue = null;\n        // Testing module configuration\n        this.declarations = [];\n        this.imports = [];\n        this.providers = [];\n        this.schemas = [];\n        // Queues of components/directives/pipes that should be recompiled.\n        this.pendingComponents = new Set();\n        this.pendingDirectives = new Set();\n        this.pendingPipes = new Set();\n        // Keep track of all components and directives, so we can patch Providers onto defs later.\n        this.seenComponents = new Set();\n        this.seenDirectives = new Set();\n        // Keep track of overridden modules, so that we can collect all affected ones in the module tree.\n        this.overriddenModules = new Set();\n        // Store resolved styles for Components that have template overrides present and `styleUrls`\n        // defined at the same time.\n        this.existingComponentStyles = new Map();\n        this.resolvers = initResolvers();\n        this.componentToModuleScope = new Map();\n        // Map that keeps initial version of component/directive/pipe defs in case\n        // we compile a Type again, thus overriding respective static fields. This is\n        // required to make sure we restore defs to their initial states between test runs\n        // TODO: we should support the case with multiple defs on a type\n        this.initialNgDefs = new Map();\n        // Array that keeps cleanup operations for initial versions of component/directive/pipe/module\n        // defs in case TestBed makes changes to the originals.\n        this.defCleanupOps = [];\n        this._injector = null;\n        this.compilerProviders = null;\n        this.providerOverrides = [];\n        this.rootProviderOverrides = [];\n        // Overrides for injectables with `{providedIn: SomeModule}` need to be tracked and added to that\n        // module's provider list.\n        this.providerOverridesByModule = new Map();\n        this.providerOverridesByToken = new Map();\n        this.moduleProvidersOverridden = new Set();\n        this.testModuleRef = null;\n        class DynamicTestModule {\n        }\n        this.testModuleType = DynamicTestModule;\n    }\n    setCompilerProviders(providers) {\n        this.compilerProviders = providers;\n        this._injector = null;\n    }\n    configureTestingModule(moduleDef) {\n        // Enqueue any compilation tasks for the directly declared component.\n        if (moduleDef.declarations !== undefined) {\n            this.queueTypeArray(moduleDef.declarations, TestingModuleOverride.DECLARATION);\n            this.declarations.push(...moduleDef.declarations);\n        }\n        // Enqueue any compilation tasks for imported modules.\n        if (moduleDef.imports !== undefined) {\n            this.queueTypesFromModulesArray(moduleDef.imports);\n            this.imports.push(...moduleDef.imports);\n        }\n        if (moduleDef.providers !== undefined) {\n            this.providers.push(...moduleDef.providers);\n        }\n        if (moduleDef.schemas !== undefined) {\n            this.schemas.push(...moduleDef.schemas);\n        }\n    }\n    overrideModule(ngModule, override) {\n        this.overriddenModules.add(ngModule);\n        // Compile the module right away.\n        this.resolvers.module.addOverride(ngModule, override);\n        const metadata = this.resolvers.module.resolve(ngModule);\n        if (metadata === null) {\n            throw invalidTypeError(ngModule.name, 'NgModule');\n        }\n        this.recompileNgModule(ngModule, metadata);\n        // At this point, the module has a valid module def (ɵmod), but the override may have introduced\n        // new declarations or imported modules. Ingest any possible new types and add them to the\n        // current queue.\n        this.queueTypesFromModulesArray([ngModule]);\n    }\n    overrideComponent(component, override) {\n        this.resolvers.component.addOverride(component, override);\n        this.pendingComponents.add(component);\n    }\n    overrideDirective(directive, override) {\n        this.resolvers.directive.addOverride(directive, override);\n        this.pendingDirectives.add(directive);\n    }\n    overridePipe(pipe, override) {\n        this.resolvers.pipe.addOverride(pipe, override);\n        this.pendingPipes.add(pipe);\n    }\n    overrideProvider(token, provider) {\n        let providerDef;\n        if (provider.useFactory !== undefined) {\n            providerDef = {\n                provide: token,\n                useFactory: provider.useFactory,\n                deps: provider.deps || [],\n                multi: provider.multi\n            };\n        }\n        else if (provider.useValue !== undefined) {\n            providerDef = { provide: token, useValue: provider.useValue, multi: provider.multi };\n        }\n        else {\n            providerDef = { provide: token };\n        }\n        const injectableDef = typeof token !== 'string' ? ɵgetInjectableDef(token) : null;\n        const isRoot = injectableDef !== null && injectableDef.providedIn === 'root';\n        const overridesBucket = isRoot ? this.rootProviderOverrides : this.providerOverrides;\n        overridesBucket.push(providerDef);\n        // Keep overrides grouped by token as well for fast lookups using token\n        this.providerOverridesByToken.set(token, providerDef);\n        if (injectableDef !== null && injectableDef.providedIn !== null &&\n            typeof injectableDef.providedIn !== 'string') {\n            const existingOverrides = this.providerOverridesByModule.get(injectableDef.providedIn);\n            if (existingOverrides !== undefined) {\n                existingOverrides.push(providerDef);\n            }\n            else {\n                this.providerOverridesByModule.set(injectableDef.providedIn, [providerDef]);\n            }\n        }\n    }\n    overrideTemplateUsingTestingModule(type, template) {\n        const def = type[ɵNG_COMP_DEF];\n        const hasStyleUrls = () => {\n            const metadata = this.resolvers.component.resolve(type);\n            return !!metadata.styleUrls && metadata.styleUrls.length > 0;\n        };\n        const overrideStyleUrls = !!def && !isComponentDefPendingResolution(type) && hasStyleUrls();\n        // In Ivy, compiling a component does not require knowing the module providing the\n        // component's scope, so overrideTemplateUsingTestingModule can be implemented purely via\n        // overrideComponent. Important: overriding template requires full Component re-compilation,\n        // which may fail in case styleUrls are also present (thus Component is considered as required\n        // resolution). In order to avoid this, we preemptively set styleUrls to an empty array,\n        // preserve current styles available on Component def and restore styles back once compilation\n        // is complete.\n        const override = overrideStyleUrls ? { template, styles: [], styleUrls: [] } : { template };\n        this.overrideComponent(type, { set: override });\n        if (overrideStyleUrls && def.styles && def.styles.length > 0) {\n            this.existingComponentStyles.set(type, def.styles);\n        }\n        // Set the component's scope to be the testing module.\n        this.componentToModuleScope.set(type, TestingModuleOverride.OVERRIDE_TEMPLATE);\n    }\n    compileComponents() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.clearComponentResolutionQueue();\n            // Run compilers for all queued types.\n            let needsAsyncResources = this.compileTypesSync();\n            // compileComponents() should not be async unless it needs to be.\n            if (needsAsyncResources) {\n                let resourceLoader;\n                let resolver = (url) => {\n                    if (!resourceLoader) {\n                        resourceLoader = this.injector.get(ResourceLoader);\n                    }\n                    return Promise.resolve(resourceLoader.get(url));\n                };\n                yield resolveComponentResources(resolver);\n            }\n        });\n    }\n    finalize() {\n        // One last compile\n        this.compileTypesSync();\n        // Create the testing module itself.\n        this.compileTestModule();\n        this.applyTransitiveScopes();\n        this.applyProviderOverrides();\n        // Patch previously stored `styles` Component values (taken from ɵcmp), in case these\n        // Components have `styleUrls` fields defined and template override was requested.\n        this.patchComponentsWithExistingStyles();\n        // Clear the componentToModuleScope map, so that future compilations don't reset the scope of\n        // every component.\n        this.componentToModuleScope.clear();\n        const parentInjector = this.platform.injector;\n        this.testModuleRef = new ɵRender3NgModuleRef(this.testModuleType, parentInjector);\n        // ApplicationInitStatus.runInitializers() is marked @internal to core.\n        // Cast it to any before accessing it.\n        this.testModuleRef.injector.get(ApplicationInitStatus).runInitializers();\n        // Set locale ID after running app initializers, since locale information might be updated while\n        // running initializers. This is also consistent with the execution order while bootstrapping an\n        // app (see `packages/core/src/application_ref.ts` file).\n        const localeId = this.testModuleRef.injector.get(LOCALE_ID, ɵDEFAULT_LOCALE_ID);\n        ɵsetLocaleId(localeId);\n        return this.testModuleRef;\n    }\n    /**\n     * @internal\n     */\n    _compileNgModuleSync(moduleType) {\n        this.queueTypesFromModulesArray([moduleType]);\n        this.compileTypesSync();\n        this.applyProviderOverrides();\n        this.applyProviderOverridesToModule(moduleType);\n        this.applyTransitiveScopes();\n    }\n    /**\n     * @internal\n     */\n    _compileNgModuleAsync(moduleType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.queueTypesFromModulesArray([moduleType]);\n            yield this.compileComponents();\n            this.applyProviderOverrides();\n            this.applyProviderOverridesToModule(moduleType);\n            this.applyTransitiveScopes();\n        });\n    }\n    /**\n     * @internal\n     */\n    _getModuleResolver() {\n        return this.resolvers.module;\n    }\n    /**\n     * @internal\n     */\n    _getComponentFactories(moduleType) {\n        return maybeUnwrapFn(moduleType.ɵmod.declarations).reduce((factories, declaration) => {\n            const componentDef = declaration.ɵcmp;\n            componentDef && factories.push(new ɵRender3ComponentFactory(componentDef, this.testModuleRef));\n            return factories;\n        }, []);\n    }\n    compileTypesSync() {\n        // Compile all queued components, directives, pipes.\n        let needsAsyncResources = false;\n        this.pendingComponents.forEach(declaration => {\n            needsAsyncResources = needsAsyncResources || isComponentDefPendingResolution(declaration);\n            const metadata = this.resolvers.component.resolve(declaration);\n            if (metadata === null) {\n                throw invalidTypeError(declaration.name, 'Component');\n            }\n            this.maybeStoreNgDef(ɵNG_COMP_DEF, declaration);\n            ɵcompileComponent(declaration, metadata);\n        });\n        this.pendingComponents.clear();\n        this.pendingDirectives.forEach(declaration => {\n            const metadata = this.resolvers.directive.resolve(declaration);\n            if (metadata === null) {\n                throw invalidTypeError(declaration.name, 'Directive');\n            }\n            this.maybeStoreNgDef(ɵNG_DIR_DEF, declaration);\n            ɵcompileDirective(declaration, metadata);\n        });\n        this.pendingDirectives.clear();\n        this.pendingPipes.forEach(declaration => {\n            const metadata = this.resolvers.pipe.resolve(declaration);\n            if (metadata === null) {\n                throw invalidTypeError(declaration.name, 'Pipe');\n            }\n            this.maybeStoreNgDef(ɵNG_PIPE_DEF, declaration);\n            ɵcompilePipe(declaration, metadata);\n        });\n        this.pendingPipes.clear();\n        return needsAsyncResources;\n    }\n    applyTransitiveScopes() {\n        if (this.overriddenModules.size > 0) {\n            // Module overrides (via `TestBed.overrideModule`) might affect scopes that were previously\n            // calculated and stored in `transitiveCompileScopes`. If module overrides are present,\n            // collect all affected modules and reset scopes to force their re-calculatation.\n            const testingModuleDef = this.testModuleType[ɵNG_MOD_DEF];\n            const affectedModules = this.collectModulesAffectedByOverrides(testingModuleDef.imports);\n            if (affectedModules.size > 0) {\n                affectedModules.forEach(moduleType => {\n                    this.storeFieldOfDefOnType(moduleType, ɵNG_MOD_DEF, 'transitiveCompileScopes');\n                    moduleType[ɵNG_MOD_DEF].transitiveCompileScopes = null;\n                });\n            }\n        }\n        const moduleToScope = new Map();\n        const getScopeOfModule = (moduleType) => {\n            if (!moduleToScope.has(moduleType)) {\n                const isTestingModule = isTestingModuleOverride(moduleType);\n                const realType = isTestingModule ? this.testModuleType : moduleType;\n                moduleToScope.set(moduleType, ɵtransitiveScopesFor(realType));\n            }\n            return moduleToScope.get(moduleType);\n        };\n        this.componentToModuleScope.forEach((moduleType, componentType) => {\n            const moduleScope = getScopeOfModule(moduleType);\n            this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'directiveDefs');\n            this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'pipeDefs');\n            // `tView` that is stored on component def contains information about directives and pipes\n            // that are in the scope of this component. Patching component scope will cause `tView` to be\n            // changed. Store original `tView` before patching scope, so the `tView` (including scope\n            // information) is restored back to its previous/original state before running next test.\n            this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'tView');\n            ɵpatchComponentDefWithScope(componentType.ɵcmp, moduleScope);\n        });\n        this.componentToModuleScope.clear();\n    }\n    applyProviderOverrides() {\n        const maybeApplyOverrides = (field) => (type) => {\n            const resolver = field === ɵNG_COMP_DEF ? this.resolvers.component : this.resolvers.directive;\n            const metadata = resolver.resolve(type);\n            if (this.hasProviderOverrides(metadata.providers)) {\n                this.patchDefWithProviderOverrides(type, field);\n            }\n        };\n        this.seenComponents.forEach(maybeApplyOverrides(ɵNG_COMP_DEF));\n        this.seenDirectives.forEach(maybeApplyOverrides(ɵNG_DIR_DEF));\n        this.seenComponents.clear();\n        this.seenDirectives.clear();\n    }\n    applyProviderOverridesToModule(moduleType) {\n        if (this.moduleProvidersOverridden.has(moduleType)) {\n            return;\n        }\n        this.moduleProvidersOverridden.add(moduleType);\n        const injectorDef = moduleType[ɵNG_INJ_DEF];\n        if (this.providerOverridesByToken.size > 0) {\n            const providers = [\n                ...injectorDef.providers,\n                ...(this.providerOverridesByModule.get(moduleType) || [])\n            ];\n            if (this.hasProviderOverrides(providers)) {\n                this.maybeStoreNgDef(ɵNG_INJ_DEF, moduleType);\n                this.storeFieldOfDefOnType(moduleType, ɵNG_INJ_DEF, 'providers');\n                injectorDef.providers = this.getOverriddenProviders(providers);\n            }\n            // Apply provider overrides to imported modules recursively\n            const moduleDef = moduleType[ɵNG_MOD_DEF];\n            const imports = maybeUnwrapFn(moduleDef.imports);\n            for (const importedModule of imports) {\n                this.applyProviderOverridesToModule(importedModule);\n            }\n            // Also override the providers on any ModuleWithProviders imports since those don't appear in\n            // the moduleDef.\n            for (const importedModule of flatten(injectorDef.imports)) {\n                if (isModuleWithProviders(importedModule)) {\n                    this.defCleanupOps.push({\n                        object: importedModule,\n                        fieldName: 'providers',\n                        originalValue: importedModule.providers\n                    });\n                    importedModule.providers = this.getOverriddenProviders(importedModule.providers);\n                }\n            }\n        }\n    }\n    patchComponentsWithExistingStyles() {\n        this.existingComponentStyles.forEach((styles, type) => type[ɵNG_COMP_DEF].styles = styles);\n        this.existingComponentStyles.clear();\n    }\n    queueTypeArray(arr, moduleType) {\n        for (const value of arr) {\n            if (Array.isArray(value)) {\n                this.queueTypeArray(value, moduleType);\n            }\n            else {\n                this.queueType(value, moduleType);\n            }\n        }\n    }\n    recompileNgModule(ngModule, metadata) {\n        // Cache the initial ngModuleDef as it will be overwritten.\n        this.maybeStoreNgDef(ɵNG_MOD_DEF, ngModule);\n        this.maybeStoreNgDef(ɵNG_INJ_DEF, ngModule);\n        ɵcompileNgModuleDefs(ngModule, metadata);\n    }\n    queueType(type, moduleType) {\n        const component = this.resolvers.component.resolve(type);\n        if (component) {\n            // Check whether a give Type has respective NG def (ɵcmp) and compile if def is\n            // missing. That might happen in case a class without any Angular decorators extends another\n            // class where Component/Directive/Pipe decorator is defined.\n            if (isComponentDefPendingResolution(type) || !type.hasOwnProperty(ɵNG_COMP_DEF)) {\n                this.pendingComponents.add(type);\n            }\n            this.seenComponents.add(type);\n            // Keep track of the module which declares this component, so later the component's scope\n            // can be set correctly. If the component has already been recorded here, then one of several\n            // cases is true:\n            // * the module containing the component was imported multiple times (common).\n            // * the component is declared in multiple modules (which is an error).\n            // * the component was in 'declarations' of the testing module, and also in an imported module\n            //   in which case the module scope will be TestingModuleOverride.DECLARATION.\n            // * overrideTemplateUsingTestingModule was called for the component in which case the module\n            //   scope will be TestingModuleOverride.OVERRIDE_TEMPLATE.\n            //\n            // If the component was previously in the testing module's 'declarations' (meaning the\n            // current value is TestingModuleOverride.DECLARATION), then `moduleType` is the component's\n            // real module, which was imported. This pattern is understood to mean that the component\n            // should use its original scope, but that the testing module should also contain the\n            // component in its scope.\n            if (!this.componentToModuleScope.has(type) ||\n                this.componentToModuleScope.get(type) === TestingModuleOverride.DECLARATION) {\n                this.componentToModuleScope.set(type, moduleType);\n            }\n            return;\n        }\n        const directive = this.resolvers.directive.resolve(type);\n        if (directive) {\n            if (!type.hasOwnProperty(ɵNG_DIR_DEF)) {\n                this.pendingDirectives.add(type);\n            }\n            this.seenDirectives.add(type);\n            return;\n        }\n        const pipe = this.resolvers.pipe.resolve(type);\n        if (pipe && !type.hasOwnProperty(ɵNG_PIPE_DEF)) {\n            this.pendingPipes.add(type);\n            return;\n        }\n    }\n    queueTypesFromModulesArray(arr) {\n        // Because we may encounter the same NgModule while processing the imports and exports of an\n        // NgModule tree, we cache them in this set so we can skip ones that have already been seen\n        // encountered. In some test setups, this caching resulted in 10X runtime improvement.\n        const processedNgModuleDefs = new Set();\n        const queueTypesFromModulesArrayRecur = (arr) => {\n            for (const value of arr) {\n                if (Array.isArray(value)) {\n                    queueTypesFromModulesArrayRecur(value);\n                }\n                else if (hasNgModuleDef(value)) {\n                    const def = value.ɵmod;\n                    if (processedNgModuleDefs.has(def)) {\n                        continue;\n                    }\n                    processedNgModuleDefs.add(def);\n                    // Look through declarations, imports, and exports, and queue\n                    // everything found there.\n                    this.queueTypeArray(maybeUnwrapFn(def.declarations), value);\n                    queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.imports));\n                    queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.exports));\n                }\n            }\n        };\n        queueTypesFromModulesArrayRecur(arr);\n    }\n    // When module overrides (via `TestBed.overrideModule`) are present, it might affect all modules\n    // that import (even transitively) an overridden one. For all affected modules we need to\n    // recalculate their scopes for a given test run and restore original scopes at the end. The goal\n    // of this function is to collect all affected modules in a set for further processing. Example:\n    // if we have the following module hierarchy: A -> B -> C (where `->` means `imports`) and module\n    // `C` is overridden, we consider `A` and `B` as affected, since their scopes might become\n    // invalidated with the override.\n    collectModulesAffectedByOverrides(arr) {\n        const seenModules = new Set();\n        const affectedModules = new Set();\n        const calcAffectedModulesRecur = (arr, path) => {\n            for (const value of arr) {\n                if (Array.isArray(value)) {\n                    // If the value is an array, just flatten it (by invoking this function recursively),\n                    // keeping \"path\" the same.\n                    calcAffectedModulesRecur(value, path);\n                }\n                else if (hasNgModuleDef(value)) {\n                    if (seenModules.has(value)) {\n                        // If we've seen this module before and it's included into \"affected modules\" list, mark\n                        // the whole path that leads to that module as affected, but do not descend into its\n                        // imports, since we already examined them before.\n                        if (affectedModules.has(value)) {\n                            path.forEach(item => affectedModules.add(item));\n                        }\n                        continue;\n                    }\n                    seenModules.add(value);\n                    if (this.overriddenModules.has(value)) {\n                        path.forEach(item => affectedModules.add(item));\n                    }\n                    // Examine module imports recursively to look for overridden modules.\n                    const moduleDef = value[ɵNG_MOD_DEF];\n                    calcAffectedModulesRecur(maybeUnwrapFn(moduleDef.imports), path.concat(value));\n                }\n            }\n        };\n        calcAffectedModulesRecur(arr, []);\n        return affectedModules;\n    }\n    maybeStoreNgDef(prop, type) {\n        if (!this.initialNgDefs.has(type)) {\n            const currentDef = Object.getOwnPropertyDescriptor(type, prop);\n            this.initialNgDefs.set(type, [prop, currentDef]);\n        }\n    }\n    storeFieldOfDefOnType(type, defField, fieldName) {\n        const def = type[defField];\n        const originalValue = def[fieldName];\n        this.defCleanupOps.push({ object: def, fieldName, originalValue });\n    }\n    /**\n     * Clears current components resolution queue, but stores the state of the queue, so we can\n     * restore it later. Clearing the queue is required before we try to compile components (via\n     * `TestBed.compileComponents`), so that component defs are in sync with the resolution queue.\n     */\n    clearComponentResolutionQueue() {\n        if (this.originalComponentResolutionQueue === null) {\n            this.originalComponentResolutionQueue = new Map();\n        }\n        clearResolutionOfComponentResourcesQueue().forEach((value, key) => this.originalComponentResolutionQueue.set(key, value));\n    }\n    /*\n     * Restores component resolution queue to the previously saved state. This operation is performed\n     * as a part of restoring the state after completion of the current set of tests (that might\n     * potentially mutate the state).\n     */\n    restoreComponentResolutionQueue() {\n        if (this.originalComponentResolutionQueue !== null) {\n            restoreComponentResolutionQueue(this.originalComponentResolutionQueue);\n            this.originalComponentResolutionQueue = null;\n        }\n    }\n    restoreOriginalState() {\n        // Process cleanup ops in reverse order so the field's original value is restored correctly (in\n        // case there were multiple overrides for the same field).\n        forEachRight(this.defCleanupOps, (op) => {\n            op.object[op.fieldName] = op.originalValue;\n        });\n        // Restore initial component/directive/pipe defs\n        this.initialNgDefs.forEach((value, type) => {\n            const [prop, descriptor] = value;\n            if (!descriptor) {\n                // Delete operations are generally undesirable since they have performance implications\n                // on objects they were applied to. In this particular case, situations where this code\n                // is invoked should be quite rare to cause any noticeable impact, since it's applied\n                // only to some test cases (for example when class with no annotations extends some\n                // @Component) when we need to clear 'ɵcmp' field on a given class to restore\n                // its original state (before applying overrides and running tests).\n                delete type[prop];\n            }\n            else {\n                Object.defineProperty(type, prop, descriptor);\n            }\n        });\n        this.initialNgDefs.clear();\n        this.moduleProvidersOverridden.clear();\n        this.restoreComponentResolutionQueue();\n        // Restore the locale ID to the default value, this shouldn't be necessary but we never know\n        ɵsetLocaleId(ɵDEFAULT_LOCALE_ID);\n    }\n    compileTestModule() {\n        class RootScopeModule {\n        }\n        ɵcompileNgModuleDefs(RootScopeModule, {\n            providers: [...this.rootProviderOverrides],\n        });\n        const ngZone = new NgZone({ enableLongStackTrace: true });\n        const providers = [\n            { provide: NgZone, useValue: ngZone },\n            { provide: Compiler, useFactory: () => new R3TestCompiler(this) },\n            ...this.providers,\n            ...this.providerOverrides,\n        ];\n        const imports = [RootScopeModule, this.additionalModuleTypes, this.imports || []];\n        // clang-format off\n        ɵcompileNgModuleDefs(this.testModuleType, {\n            declarations: this.declarations,\n            imports,\n            schemas: this.schemas,\n            providers,\n        }, /* allowDuplicateDeclarationsInRoot */ true);\n        // clang-format on\n        this.applyProviderOverridesToModule(this.testModuleType);\n    }\n    get injector() {\n        if (this._injector !== null) {\n            return this._injector;\n        }\n        const providers = [];\n        const compilerOptions = this.platform.injector.get(COMPILER_OPTIONS);\n        compilerOptions.forEach(opts => {\n            if (opts.providers) {\n                providers.push(opts.providers);\n            }\n        });\n        if (this.compilerProviders !== null) {\n            providers.push(...this.compilerProviders);\n        }\n        // TODO(ocombe): make this work with an Injector directly instead of creating a module for it\n        class CompilerModule {\n        }\n        ɵcompileNgModuleDefs(CompilerModule, { providers });\n        const CompilerModuleFactory = new ɵNgModuleFactory(CompilerModule);\n        this._injector = CompilerModuleFactory.create(this.platform.injector).injector;\n        return this._injector;\n    }\n    // get overrides for a specific provider (if any)\n    getSingleProviderOverrides(provider) {\n        const token = getProviderToken(provider);\n        return this.providerOverridesByToken.get(token) || null;\n    }\n    getProviderOverrides(providers) {\n        if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\n            return [];\n        // There are two flattening operations here. The inner flatten() operates on the metadata's\n        // providers and applies a mapping function which retrieves overrides for each incoming\n        // provider. The outer flatten() then flattens the produced overrides array. If this is not\n        // done, the array can contain other empty arrays (e.g. `[[], []]`) which leak into the\n        // providers array and contaminate any error messages that might be generated.\n        return flatten(flatten(providers, (provider) => this.getSingleProviderOverrides(provider) || []));\n    }\n    getOverriddenProviders(providers) {\n        if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\n            return [];\n        const flattenedProviders = flatten(providers);\n        const overrides = this.getProviderOverrides(flattenedProviders);\n        const overriddenProviders = [...flattenedProviders, ...overrides];\n        const final = [];\n        const seenOverriddenProviders = new Set();\n        // We iterate through the list of providers in reverse order to make sure provider overrides\n        // take precedence over the values defined in provider list. We also filter out all providers\n        // that have overrides, keeping overridden values only. This is needed, since presence of a\n        // provider with `ngOnDestroy` hook will cause this hook to be registered and invoked later.\n        forEachRight(overriddenProviders, (provider) => {\n            const token = getProviderToken(provider);\n            if (this.providerOverridesByToken.has(token)) {\n                if (!seenOverriddenProviders.has(token)) {\n                    seenOverriddenProviders.add(token);\n                    // Treat all overridden providers as `{multi: false}` (even if it's a multi-provider) to\n                    // make sure that provided override takes highest precedence and is not combined with\n                    // other instances of the same multi provider.\n                    final.unshift(Object.assign(Object.assign({}, provider), { multi: false }));\n                }\n            }\n            else {\n                final.unshift(provider);\n            }\n        });\n        return final;\n    }\n    hasProviderOverrides(providers) {\n        return this.getProviderOverrides(providers).length > 0;\n    }\n    patchDefWithProviderOverrides(declaration, field) {\n        const def = declaration[field];\n        if (def && def.providersResolver) {\n            this.maybeStoreNgDef(field, declaration);\n            const resolver = def.providersResolver;\n            const processProvidersFn = (providers) => this.getOverriddenProviders(providers);\n            this.storeFieldOfDefOnType(declaration, field, 'providersResolver');\n            def.providersResolver = (ngDef) => resolver(ngDef, processProvidersFn);\n        }\n    }\n}\nfunction initResolvers() {\n    return {\n        module: new NgModuleResolver(),\n        component: new ComponentResolver(),\n        directive: new DirectiveResolver(),\n        pipe: new PipeResolver()\n    };\n}\nfunction hasNgModuleDef(value) {\n    return value.hasOwnProperty('ɵmod');\n}\nfunction maybeUnwrapFn(maybeFn) {\n    return maybeFn instanceof Function ? maybeFn() : maybeFn;\n}\nfunction flatten(values, mapFn) {\n    const out = [];\n    values.forEach(value => {\n        if (Array.isArray(value)) {\n            out.push(...flatten(value, mapFn));\n        }\n        else {\n            out.push(mapFn ? mapFn(value) : value);\n        }\n    });\n    return out;\n}\nfunction getProviderField(provider, field) {\n    return provider && typeof provider === 'object' && provider[field];\n}\nfunction getProviderToken(provider) {\n    return getProviderField(provider, 'provide') || provider;\n}\nfunction isModuleWithProviders(value) {\n    return value.hasOwnProperty('ngModule');\n}\nfunction forEachRight(values, fn) {\n    for (let idx = values.length - 1; idx >= 0; idx--) {\n        fn(values[idx], idx);\n    }\n}\nfunction invalidTypeError(name, expectedType) {\n    return new Error(`${name} class doesn't have @${expectedType} decorator or is missing metadata.`);\n}\nclass R3TestCompiler {\n    constructor(testBed) {\n        this.testBed = testBed;\n    }\n    compileModuleSync(moduleType) {\n        this.testBed._compileNgModuleSync(moduleType);\n        return new ɵNgModuleFactory(moduleType);\n    }\n    compileModuleAsync(moduleType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.testBed._compileNgModuleAsync(moduleType);\n            return new ɵNgModuleFactory(moduleType);\n        });\n    }\n    compileModuleAndAllComponentsSync(moduleType) {\n        const ngModuleFactory = this.compileModuleSync(moduleType);\n        const componentFactories = this.testBed._getComponentFactories(moduleType);\n        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    }\n    compileModuleAndAllComponentsAsync(moduleType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const ngModuleFactory = yield this.compileModuleAsync(moduleType);\n            const componentFactories = this.testBed._getComponentFactories(moduleType);\n            return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n        });\n    }\n    clearCache() { }\n    clearCacheFor(type) { }\n    getModuleId(moduleType) {\n        const meta = this.testBed._getModuleResolver().resolve(moduleType);\n        return meta && meta.id || undefined;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @publicApi\n */\nclass TestComponentRenderer {\n    insertRootElement(rootElementId) { }\n}\n/**\n * @publicApi\n */\nconst ComponentFixtureAutoDetect = new InjectionToken('ComponentFixtureAutoDetect');\n/**\n * @publicApi\n */\nconst ComponentFixtureNoNgZone = new InjectionToken('ComponentFixtureNoNgZone');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet _nextRootElementId = 0;\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n */\nclass TestBedRender3 {\n    constructor() {\n        // Properties\n        this.platform = null;\n        this.ngModule = null;\n        this._compiler = null;\n        this._testModuleRef = null;\n        this._activeFixtures = [];\n        this._globalCompilationChecked = false;\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @publicApi\n     */\n    static initTestEnvironment(ngModule, platform, aotSummaries) {\n        const testBed = _getTestBedRender3();\n        testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n        return testBed;\n    }\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @publicApi\n     */\n    static resetTestEnvironment() {\n        _getTestBedRender3().resetTestEnvironment();\n    }\n    static configureCompiler(config) {\n        _getTestBedRender3().configureCompiler(config);\n        return TestBedRender3;\n    }\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n    static configureTestingModule(moduleDef) {\n        _getTestBedRender3().configureTestingModule(moduleDef);\n        return TestBedRender3;\n    }\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n    static compileComponents() {\n        return _getTestBedRender3().compileComponents();\n    }\n    static overrideModule(ngModule, override) {\n        _getTestBedRender3().overrideModule(ngModule, override);\n        return TestBedRender3;\n    }\n    static overrideComponent(component, override) {\n        _getTestBedRender3().overrideComponent(component, override);\n        return TestBedRender3;\n    }\n    static overrideDirective(directive, override) {\n        _getTestBedRender3().overrideDirective(directive, override);\n        return TestBedRender3;\n    }\n    static overridePipe(pipe, override) {\n        _getTestBedRender3().overridePipe(pipe, override);\n        return TestBedRender3;\n    }\n    static overrideTemplate(component, template) {\n        _getTestBedRender3().overrideComponent(component, { set: { template, templateUrl: null } });\n        return TestBedRender3;\n    }\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    static overrideTemplateUsingTestingModule(component, template) {\n        _getTestBedRender3().overrideTemplateUsingTestingModule(component, template);\n        return TestBedRender3;\n    }\n    static overrideProvider(token, provider) {\n        _getTestBedRender3().overrideProvider(token, provider);\n        return TestBedRender3;\n    }\n    static inject(token, notFoundValue, flags) {\n        return _getTestBedRender3().inject(token, notFoundValue, flags);\n    }\n    /** @deprecated from v9.0.0 use TestBed.inject */\n    static get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n        return _getTestBedRender3().inject(token, notFoundValue, flags);\n    }\n    static createComponent(component) {\n        return _getTestBedRender3().createComponent(component);\n    }\n    static resetTestingModule() {\n        _getTestBedRender3().resetTestingModule();\n        return TestBedRender3;\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @publicApi\n     */\n    initTestEnvironment(ngModule, platform, aotSummaries) {\n        if (this.platform || this.ngModule) {\n            throw new Error('Cannot set base providers because it has already been called');\n        }\n        this.platform = platform;\n        this.ngModule = ngModule;\n        this._compiler = new R3TestBedCompiler(this.platform, this.ngModule);\n    }\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @publicApi\n     */\n    resetTestEnvironment() {\n        this.resetTestingModule();\n        this._compiler = null;\n        this.platform = null;\n        this.ngModule = null;\n    }\n    resetTestingModule() {\n        this.checkGlobalCompilationFinished();\n        ɵresetCompiledComponents();\n        if (this._compiler !== null) {\n            this.compiler.restoreOriginalState();\n        }\n        this._compiler = new R3TestBedCompiler(this.platform, this.ngModule);\n        this._testModuleRef = null;\n        this.destroyActiveFixtures();\n    }\n    configureCompiler(config) {\n        if (config.useJit != null) {\n            throw new Error('the Render3 compiler JiT mode is not configurable !');\n        }\n        if (config.providers !== undefined) {\n            this.compiler.setCompilerProviders(config.providers);\n        }\n    }\n    configureTestingModule(moduleDef) {\n        this.assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module');\n        this.compiler.configureTestingModule(moduleDef);\n    }\n    compileComponents() {\n        return this.compiler.compileComponents();\n    }\n    inject(token, notFoundValue, flags) {\n        if (token === TestBedRender3) {\n            return this;\n        }\n        const UNDEFINED = {};\n        const result = this.testModuleRef.injector.get(token, UNDEFINED, flags);\n        return result === UNDEFINED ? this.compiler.injector.get(token, notFoundValue, flags) :\n            result;\n    }\n    /** @deprecated from v9.0.0 use TestBed.inject */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n        return this.inject(token, notFoundValue, flags);\n    }\n    execute(tokens, fn, context) {\n        const params = tokens.map(t => this.inject(t));\n        return fn.apply(context, params);\n    }\n    overrideModule(ngModule, override) {\n        this.assertNotInstantiated('overrideModule', 'override module metadata');\n        this.compiler.overrideModule(ngModule, override);\n    }\n    overrideComponent(component, override) {\n        this.assertNotInstantiated('overrideComponent', 'override component metadata');\n        this.compiler.overrideComponent(component, override);\n    }\n    overrideTemplateUsingTestingModule(component, template) {\n        this.assertNotInstantiated('R3TestBed.overrideTemplateUsingTestingModule', 'Cannot override template when the test module has already been instantiated');\n        this.compiler.overrideTemplateUsingTestingModule(component, template);\n    }\n    overrideDirective(directive, override) {\n        this.assertNotInstantiated('overrideDirective', 'override directive metadata');\n        this.compiler.overrideDirective(directive, override);\n    }\n    overridePipe(pipe, override) {\n        this.assertNotInstantiated('overridePipe', 'override pipe metadata');\n        this.compiler.overridePipe(pipe, override);\n    }\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     */\n    overrideProvider(token, provider) {\n        this.assertNotInstantiated('overrideProvider', 'override provider');\n        this.compiler.overrideProvider(token, provider);\n    }\n    createComponent(type) {\n        const testComponentRenderer = this.inject(TestComponentRenderer);\n        const rootElId = `root${_nextRootElementId++}`;\n        testComponentRenderer.insertRootElement(rootElId);\n        const componentDef = type.ɵcmp;\n        if (!componentDef) {\n            throw new Error(`It looks like '${ɵstringify(type)}' has not been IVY compiled - it has no 'ɵcmp' field`);\n        }\n        // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n        const noNgZone = this.inject(ComponentFixtureNoNgZone, false);\n        // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n        const autoDetect = this.inject(ComponentFixtureAutoDetect, false);\n        const ngZone = noNgZone ? null : this.inject(NgZone, null);\n        const componentFactory = new ɵRender3ComponentFactory(componentDef);\n        const initComponent = () => {\n            const componentRef = componentFactory.create(Injector.NULL, [], `#${rootElId}`, this.testModuleRef);\n            return new ComponentFixture(componentRef, ngZone, autoDetect);\n        };\n        const fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n        this._activeFixtures.push(fixture);\n        return fixture;\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n    get compiler() {\n        if (this._compiler === null) {\n            throw new Error(`Need to call TestBed.initTestEnvironment() first`);\n        }\n        return this._compiler;\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n    get testModuleRef() {\n        if (this._testModuleRef === null) {\n            this._testModuleRef = this.compiler.finalize();\n        }\n        return this._testModuleRef;\n    }\n    assertNotInstantiated(methodName, methodDescription) {\n        if (this._testModuleRef !== null) {\n            throw new Error(`Cannot ${methodDescription} when the test module has already been instantiated. ` +\n                `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n        }\n    }\n    /**\n     * Check whether the module scoping queue should be flushed, and flush it if needed.\n     *\n     * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any\n     * in-progress module compilation. This creates a potential hazard - the very first time the\n     * TestBed is initialized (or if it's reset without being initialized), there may be pending\n     * compilations of modules declared in global scope. These compilations should be finished.\n     *\n     * To ensure that globally declared modules have their components scoped properly, this function\n     * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior\n     * to any other operations, the scoping queue is flushed.\n     */\n    checkGlobalCompilationFinished() {\n        // Checking _testNgModuleRef is null should not be necessary, but is left in as an additional\n        // guard that compilations queued in tests (after instantiation) are never flushed accidentally.\n        if (!this._globalCompilationChecked && this._testModuleRef === null) {\n            ɵflushModuleScopingQueueAsMuchAsPossible();\n        }\n        this._globalCompilationChecked = true;\n    }\n    destroyActiveFixtures() {\n        this._activeFixtures.forEach((fixture) => {\n            try {\n                fixture.destroy();\n            }\n            catch (e) {\n                console.error('Error during cleanup of component', {\n                    component: fixture.componentInstance,\n                    stacktrace: e,\n                });\n            }\n        });\n        this._activeFixtures = [];\n    }\n}\nlet testBed;\nfunction _getTestBedRender3() {\n    return testBed = testBed || new TestBedRender3();\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction unimplemented() {\n    throw Error('unimplemented');\n}\n/**\n * Special interface to the compiler only used by testing\n *\n * @publicApi\n */\nclass TestingCompiler extends Compiler {\n    get injector() {\n        throw unimplemented();\n    }\n    overrideModule(module, overrides) {\n        throw unimplemented();\n    }\n    overrideDirective(directive, overrides) {\n        throw unimplemented();\n    }\n    overrideComponent(component, overrides) {\n        throw unimplemented();\n    }\n    overridePipe(directive, overrides) {\n        throw unimplemented();\n    }\n    /**\n     * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n     * so that it can use the code generated by AOT.\n     */\n    loadAotSummaries(summaries) {\n        throw unimplemented();\n    }\n    /**\n     * Gets the component factory for the given component.\n     * This assumes that the component has been compiled before calling this call using\n     * `compileModuleAndAllComponents*`.\n     */\n    getComponentFactory(component) {\n        throw unimplemented();\n    }\n    /**\n     * Returns the component type that is stored in the given error.\n     * This can be used for errors created by compileModule...\n     */\n    getComponentFromError(error) {\n        throw unimplemented();\n    }\n}\nTestingCompiler.ɵfac = function TestingCompiler_Factory(t) { return ɵTestingCompiler_BaseFactory(t || TestingCompiler); };\nTestingCompiler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TestingCompiler, factory: TestingCompiler.ɵfac });\nconst ɵTestingCompiler_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(TestingCompiler);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TestingCompiler, [{\n        type: Injectable\n    }], null, null); })();\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n */\nclass TestingCompilerFactory {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet _nextRootElementId$1 = 0;\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n */\nclass TestBedViewEngine {\n    constructor() {\n        this._instantiated = false;\n        this._compiler = null;\n        this._moduleRef = null;\n        this._moduleFactory = null;\n        this._compilerOptions = [];\n        this._moduleOverrides = [];\n        this._componentOverrides = [];\n        this._directiveOverrides = [];\n        this._pipeOverrides = [];\n        this._providers = [];\n        this._declarations = [];\n        this._imports = [];\n        this._schemas = [];\n        this._activeFixtures = [];\n        this._testEnvAotSummaries = () => [];\n        this._aotSummaries = [];\n        this._templateOverrides = [];\n        this._isRoot = true;\n        this._rootProviderOverrides = [];\n        this.platform = null;\n        this.ngModule = null;\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     */\n    static initTestEnvironment(ngModule, platform, aotSummaries) {\n        const testBed = _getTestBedViewEngine();\n        testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n        return testBed;\n    }\n    /**\n     * Reset the providers for the test injector.\n     */\n    static resetTestEnvironment() {\n        _getTestBedViewEngine().resetTestEnvironment();\n    }\n    static resetTestingModule() {\n        _getTestBedViewEngine().resetTestingModule();\n        return TestBedViewEngine;\n    }\n    /**\n     * Allows overriding default compiler providers and settings\n     * which are defined in test_injector.js\n     */\n    static configureCompiler(config) {\n        _getTestBedViewEngine().configureCompiler(config);\n        return TestBedViewEngine;\n    }\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n    static configureTestingModule(moduleDef) {\n        _getTestBedViewEngine().configureTestingModule(moduleDef);\n        return TestBedViewEngine;\n    }\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n    static compileComponents() {\n        return getTestBed().compileComponents();\n    }\n    static overrideModule(ngModule, override) {\n        _getTestBedViewEngine().overrideModule(ngModule, override);\n        return TestBedViewEngine;\n    }\n    static overrideComponent(component, override) {\n        _getTestBedViewEngine().overrideComponent(component, override);\n        return TestBedViewEngine;\n    }\n    static overrideDirective(directive, override) {\n        _getTestBedViewEngine().overrideDirective(directive, override);\n        return TestBedViewEngine;\n    }\n    static overridePipe(pipe, override) {\n        _getTestBedViewEngine().overridePipe(pipe, override);\n        return TestBedViewEngine;\n    }\n    static overrideTemplate(component, template) {\n        _getTestBedViewEngine().overrideComponent(component, { set: { template, templateUrl: null } });\n        return TestBedViewEngine;\n    }\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    static overrideTemplateUsingTestingModule(component, template) {\n        _getTestBedViewEngine().overrideTemplateUsingTestingModule(component, template);\n        return TestBedViewEngine;\n    }\n    static overrideProvider(token, provider) {\n        _getTestBedViewEngine().overrideProvider(token, provider);\n        return TestBedViewEngine;\n    }\n    static inject(token, notFoundValue, flags) {\n        return _getTestBedViewEngine().inject(token, notFoundValue, flags);\n    }\n    /** @deprecated from v9.0.0 use TestBed.inject */\n    static get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n        return _getTestBedViewEngine().inject(token, notFoundValue, flags);\n    }\n    static createComponent(component) {\n        return _getTestBedViewEngine().createComponent(component);\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     */\n    initTestEnvironment(ngModule, platform, aotSummaries) {\n        if (this.platform || this.ngModule) {\n            throw new Error('Cannot set base providers because it has already been called');\n        }\n        this.platform = platform;\n        this.ngModule = ngModule;\n        if (aotSummaries) {\n            this._testEnvAotSummaries = aotSummaries;\n        }\n    }\n    /**\n     * Reset the providers for the test injector.\n     */\n    resetTestEnvironment() {\n        this.resetTestingModule();\n        this.platform = null;\n        this.ngModule = null;\n        this._testEnvAotSummaries = () => [];\n    }\n    resetTestingModule() {\n        ɵclearOverrides();\n        this._aotSummaries = [];\n        this._templateOverrides = [];\n        this._compiler = null;\n        this._moduleOverrides = [];\n        this._componentOverrides = [];\n        this._directiveOverrides = [];\n        this._pipeOverrides = [];\n        this._isRoot = true;\n        this._rootProviderOverrides = [];\n        this._moduleRef = null;\n        this._moduleFactory = null;\n        this._compilerOptions = [];\n        this._providers = [];\n        this._declarations = [];\n        this._imports = [];\n        this._schemas = [];\n        this._instantiated = false;\n        this._activeFixtures.forEach((fixture) => {\n            try {\n                fixture.destroy();\n            }\n            catch (e) {\n                console.error('Error during cleanup of component', {\n                    component: fixture.componentInstance,\n                    stacktrace: e,\n                });\n            }\n        });\n        this._activeFixtures = [];\n    }\n    configureCompiler(config) {\n        this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n        this._compilerOptions.push(config);\n    }\n    configureTestingModule(moduleDef) {\n        this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n        if (moduleDef.providers) {\n            this._providers.push(...moduleDef.providers);\n        }\n        if (moduleDef.declarations) {\n            this._declarations.push(...moduleDef.declarations);\n        }\n        if (moduleDef.imports) {\n            this._imports.push(...moduleDef.imports);\n        }\n        if (moduleDef.schemas) {\n            this._schemas.push(...moduleDef.schemas);\n        }\n        if (moduleDef.aotSummaries) {\n            this._aotSummaries.push(moduleDef.aotSummaries);\n        }\n    }\n    compileComponents() {\n        if (this._moduleFactory || this._instantiated) {\n            return Promise.resolve(null);\n        }\n        const moduleType = this._createCompilerAndModule();\n        return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n            .then((moduleAndComponentFactories) => {\n            this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n        });\n    }\n    _initIfNeeded() {\n        if (this._instantiated) {\n            return;\n        }\n        if (!this._moduleFactory) {\n            try {\n                const moduleType = this._createCompilerAndModule();\n                this._moduleFactory =\n                    this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n            }\n            catch (e) {\n                const errorCompType = this._compiler.getComponentFromError(e);\n                if (errorCompType) {\n                    throw new Error(`This test module uses the component ${ɵstringify(errorCompType)} which is using a \"templateUrl\" or \"styleUrls\", but they were never compiled. ` +\n                        `Please call \"TestBed.compileComponents\" before your test.`);\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        for (const { component, templateOf } of this._templateOverrides) {\n            const compFactory = this._compiler.getComponentFactory(templateOf);\n            ɵoverrideComponentView(component, compFactory);\n        }\n        const ngZone = new NgZone({ enableLongStackTrace: true, shouldCoalesceEventChangeDetection: false });\n        const providers = [{ provide: NgZone, useValue: ngZone }];\n        const ngZoneInjector = Injector.create({\n            providers: providers,\n            parent: this.platform.injector,\n            name: this._moduleFactory.moduleType.name\n        });\n        this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n        // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n        // before accessing it.\n        this._moduleRef.injector.get(ApplicationInitStatus).runInitializers();\n        this._instantiated = true;\n    }\n    _createCompilerAndModule() {\n        const providers = this._providers.concat([{ provide: TestBed, useValue: this }]);\n        const declarations = [...this._declarations, ...this._templateOverrides.map(entry => entry.templateOf)];\n        const rootScopeImports = [];\n        const rootProviderOverrides = this._rootProviderOverrides;\n        if (this._isRoot) {\n            class RootScopeModule {\n            }\n            RootScopeModule.decorators = [\n                { type: NgModule, args: [{\n                            providers: [\n                                ...rootProviderOverrides,\n                            ],\n                            jit: true,\n                        },] }\n            ];\n            rootScopeImports.push(RootScopeModule);\n        }\n        providers.push({ provide: ɵINJECTOR_SCOPE, useValue: this._isRoot ? 'root' : null });\n        const imports = [rootScopeImports, this.ngModule, this._imports];\n        const schemas = this._schemas;\n        class DynamicTestModule {\n        }\n        DynamicTestModule.decorators = [\n            { type: NgModule, args: [{ providers, declarations, imports, schemas, jit: true },] }\n        ];\n        const compilerFactory = this.platform.injector.get(TestingCompilerFactory);\n        this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n        for (const summary of [this._testEnvAotSummaries, ...this._aotSummaries]) {\n            this._compiler.loadAotSummaries(summary);\n        }\n        this._moduleOverrides.forEach((entry) => this._compiler.overrideModule(entry[0], entry[1]));\n        this._componentOverrides.forEach((entry) => this._compiler.overrideComponent(entry[0], entry[1]));\n        this._directiveOverrides.forEach((entry) => this._compiler.overrideDirective(entry[0], entry[1]));\n        this._pipeOverrides.forEach((entry) => this._compiler.overridePipe(entry[0], entry[1]));\n        return DynamicTestModule;\n    }\n    _assertNotInstantiated(methodName, methodDescription) {\n        if (this._instantiated) {\n            throw new Error(`Cannot ${methodDescription} when the test module has already been instantiated. ` +\n                `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n        }\n    }\n    inject(token, notFoundValue, flags) {\n        this._initIfNeeded();\n        if (token === TestBed) {\n            return this;\n        }\n        // Tests can inject things from the ng module and from the compiler,\n        // but the ng module can't inject things from the compiler and vice versa.\n        const UNDEFINED = {};\n        const result = this._moduleRef.injector.get(token, UNDEFINED, flags);\n        return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue, flags) :\n            result;\n    }\n    /** @deprecated from v9.0.0 use TestBed.inject */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n        return this.inject(token, notFoundValue, flags);\n    }\n    execute(tokens, fn, context) {\n        this._initIfNeeded();\n        const params = tokens.map(t => this.inject(t));\n        return fn.apply(context, params);\n    }\n    overrideModule(ngModule, override) {\n        this._assertNotInstantiated('overrideModule', 'override module metadata');\n        this._moduleOverrides.push([ngModule, override]);\n    }\n    overrideComponent(component, override) {\n        this._assertNotInstantiated('overrideComponent', 'override component metadata');\n        this._componentOverrides.push([component, override]);\n    }\n    overrideDirective(directive, override) {\n        this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n        this._directiveOverrides.push([directive, override]);\n    }\n    overridePipe(pipe, override) {\n        this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n        this._pipeOverrides.push([pipe, override]);\n    }\n    overrideProvider(token, provider) {\n        this._assertNotInstantiated('overrideProvider', 'override provider');\n        this.overrideProviderImpl(token, provider);\n    }\n    overrideProviderImpl(token, provider, deprecated = false) {\n        let def = null;\n        if (typeof token !== 'string' && (def = ɵgetInjectableDef(token)) && def.providedIn === 'root') {\n            if (provider.useFactory) {\n                this._rootProviderOverrides.push({ provide: token, useFactory: provider.useFactory, deps: provider.deps || [] });\n            }\n            else {\n                this._rootProviderOverrides.push({ provide: token, useValue: provider.useValue });\n            }\n        }\n        let flags = 0;\n        let value;\n        if (provider.useFactory) {\n            flags |= 1024 /* TypeFactoryProvider */;\n            value = provider.useFactory;\n        }\n        else {\n            flags |= 256 /* TypeValueProvider */;\n            value = provider.useValue;\n        }\n        const deps = (provider.deps || []).map((dep) => {\n            let depFlags = 0 /* None */;\n            let depToken;\n            if (Array.isArray(dep)) {\n                dep.forEach((entry) => {\n                    if (entry instanceof Optional) {\n                        depFlags |= 2 /* Optional */;\n                    }\n                    else if (entry instanceof SkipSelf) {\n                        depFlags |= 1 /* SkipSelf */;\n                    }\n                    else {\n                        depToken = entry;\n                    }\n                });\n            }\n            else {\n                depToken = dep;\n            }\n            return [depFlags, depToken];\n        });\n        ɵoverrideProvider({ token, flags, deps, value, deprecatedBehavior: deprecated });\n    }\n    overrideTemplateUsingTestingModule(component, template) {\n        this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n        class OverrideComponent {\n        }\n        OverrideComponent.decorators = [\n            { type: Component, args: [{ selector: 'empty', template, jit: true },] }\n        ];\n        this._templateOverrides.push({ component, templateOf: OverrideComponent });\n    }\n    createComponent(component) {\n        this._initIfNeeded();\n        const componentFactory = this._compiler.getComponentFactory(component);\n        if (!componentFactory) {\n            throw new Error(`Cannot create the component ${ɵstringify(component)} as it was not imported into the testing module!`);\n        }\n        // TODO: Don't cast as `InjectionToken<boolean>`, declared type is boolean[]\n        const noNgZone = this.inject(ComponentFixtureNoNgZone, false);\n        // TODO: Don't cast as `InjectionToken<boolean>`, declared type is boolean[]\n        const autoDetect = this.inject(ComponentFixtureAutoDetect, false);\n        const ngZone = noNgZone ? null : this.inject(NgZone, null);\n        const testComponentRenderer = this.inject(TestComponentRenderer);\n        const rootElId = `root${_nextRootElementId$1++}`;\n        testComponentRenderer.insertRootElement(rootElId);\n        const initComponent = () => {\n            const componentRef = componentFactory.create(Injector.NULL, [], `#${rootElId}`, this._moduleRef);\n            return new ComponentFixture(componentRef, ngZone, autoDetect);\n        };\n        const fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n        this._activeFixtures.push(fixture);\n        return fixture;\n    }\n}\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n *\n * @publicApi\n */\nconst TestBed = ɵivyEnabled ? TestBedRender3 : TestBedViewEngine;\n/**\n * Returns a singleton of the applicable `TestBed`.\n *\n * It will be either an instance of `TestBedViewEngine` or `TestBedRender3`.\n *\n * @publicApi\n */\nconst getTestBed = ɵivyEnabled ? _getTestBedRender3 : _getTestBedViewEngine;\nlet testBed$1;\nfunction _getTestBedViewEngine() {\n    return testBed$1 = testBed$1 || new TestBedViewEngine();\n}\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n * @publicApi\n */\nfunction inject(tokens, fn) {\n    const testBed = getTestBed();\n    if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n            // the injected tokens.\n            return testBed.compileComponents().then(() => {\n                const completer = testBed.inject(AsyncTestCompleter);\n                testBed.execute(tokens, fn, this);\n                return completer.promise;\n            });\n        };\n    }\n    else {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            return testBed.execute(tokens, fn, this);\n        };\n    }\n}\n/**\n * @publicApi\n */\nclass InjectSetupWrapper {\n    constructor(_moduleDef) {\n        this._moduleDef = _moduleDef;\n    }\n    _addModule() {\n        const moduleDef = this._moduleDef();\n        if (moduleDef) {\n            getTestBed().configureTestingModule(moduleDef);\n        }\n    }\n    inject(tokens, fn) {\n        const self = this;\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            self._addModule();\n            return inject(tokens, fn).call(this);\n        };\n    }\n}\nfunction withModule(moduleDef, fn) {\n    if (fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            const testBed = getTestBed();\n            if (moduleDef) {\n                testBed.configureTestingModule(moduleDef);\n            }\n            return fn.apply(this);\n        };\n    }\n    return new InjectSetupWrapper(() => moduleDef);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _global = (typeof window === 'undefined' ? global : window);\n// Reset the test providers and the fake async zone before each test.\nif (_global.beforeEach) {\n    _global.beforeEach(() => {\n        TestBed.resetTestingModule();\n        resetFakeAsyncZone();\n    });\n}\n/**\n * This API should be removed. But doing so seems to break `google3` and so it requires a bit of\n * investigation.\n *\n * A work around is to mark it as `@codeGenApi` for now and investigate later.\n *\n * @codeGenApi\n */\n// TODO(iminar): Remove this code in a safe way.\nconst __core_private_testing_placeholder__ = '';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ComponentFixture, ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, InjectSetupWrapper, TestBed, TestComponentRenderer, __core_private_testing_placeholder__, async, discardPeriodicTasks, fakeAsync, flush, flushMicrotasks, getTestBed, inject, resetFakeAsyncZone, tick, waitForAsync, withModule, MetadataOverrider as ɵMetadataOverrider, TestingCompiler as ɵTestingCompiler, TestingCompilerFactory as ɵTestingCompilerFactory, TestBedViewEngine as ɵangular_packages_core_testing_testing_a, TestBedRender3 as ɵangular_packages_core_testing_testing_b, _getTestBedRender3 as ɵangular_packages_core_testing_testing_c };\n\n//# sourceMappingURL=testing.js.map"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
