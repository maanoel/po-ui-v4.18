{
  "ast": null,
  "code": "import _get from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license Angular v11.2.14\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { ResourceLoader, core, DirectiveResolver, NgModuleResolver, PipeResolver } from '@angular/compiler';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A mock implementation of {@link ResourceLoader} that allows outgoing requests to be mocked\n * and responded to within a single test, without going to the network.\n */\n\nvar MockResourceLoader = /*#__PURE__*/function (_ResourceLoader) {\n  _inherits(MockResourceLoader, _ResourceLoader);\n\n  var _super = _createSuper(MockResourceLoader);\n\n  function MockResourceLoader() {\n    var _this;\n\n    _classCallCheck(this, MockResourceLoader);\n\n    _this = _super.apply(this, arguments);\n    _this._expectations = [];\n    _this._definitions = new Map();\n    _this._requests = [];\n    return _this;\n  }\n\n  _createClass(MockResourceLoader, [{\n    key: \"get\",\n    value: function get(url) {\n      var request = new _PendingRequest(url);\n\n      this._requests.push(request);\n\n      return request.getPromise();\n    }\n  }, {\n    key: \"hasPendingRequests\",\n    value: function hasPendingRequests() {\n      return !!this._requests.length;\n    }\n    /**\n     * Add an expectation for the given URL. Incoming requests will be checked against\n     * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n     * can be used to check if any expectations have not yet been met.\n     *\n     * The response given will be returned if the expectation matches.\n     */\n\n  }, {\n    key: \"expect\",\n    value: function expect(url, response) {\n      var expectation = new _Expectation(url, response);\n\n      this._expectations.push(expectation);\n    }\n    /**\n     * Add a definition for the given URL to return the given response. Unlike expectations,\n     * definitions have no order and will satisfy any matching request at any time. Also\n     * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n     * to return an error.\n     */\n\n  }, {\n    key: \"when\",\n    value: function when(url, response) {\n      this._definitions.set(url, response);\n    }\n    /**\n     * Process pending requests and verify there are no outstanding expectations. Also fails\n     * if no requests are pending.\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (this._requests.length === 0) {\n        throw new Error('No pending requests to flush');\n      }\n\n      do {\n        this._processRequest(this._requests.shift());\n      } while (this._requests.length > 0);\n\n      this.verifyNoOutstandingExpectations();\n    }\n    /**\n     * Throw an exception if any expectations have not been satisfied.\n     */\n\n  }, {\n    key: \"verifyNoOutstandingExpectations\",\n    value: function verifyNoOutstandingExpectations() {\n      if (this._expectations.length === 0) return;\n      var urls = [];\n\n      for (var i = 0; i < this._expectations.length; i++) {\n        var expectation = this._expectations[i];\n        urls.push(expectation.url);\n      }\n\n      throw new Error(\"Unsatisfied requests: \".concat(urls.join(', ')));\n    }\n  }, {\n    key: \"_processRequest\",\n    value: function _processRequest(request) {\n      var url = request.url;\n\n      if (this._expectations.length > 0) {\n        var expectation = this._expectations[0];\n\n        if (expectation.url == url) {\n          remove(this._expectations, expectation);\n          request.complete(expectation.response);\n          return;\n        }\n      }\n\n      if (this._definitions.has(url)) {\n        var response = this._definitions.get(url);\n\n        request.complete(response == null ? null : response);\n        return;\n      }\n\n      throw new Error(\"Unexpected request \".concat(url));\n    }\n  }]);\n\n  return MockResourceLoader;\n}(ResourceLoader);\n\nvar _PendingRequest = /*#__PURE__*/function () {\n  function _PendingRequest(url) {\n    var _this2 = this;\n\n    _classCallCheck(this, _PendingRequest);\n\n    this.url = url;\n    this.promise = new Promise(function (res, rej) {\n      _this2.resolve = res;\n      _this2.reject = rej;\n    });\n  }\n\n  _createClass(_PendingRequest, [{\n    key: \"complete\",\n    value: function complete(response) {\n      if (response == null) {\n        this.reject(\"Failed to load \".concat(this.url));\n      } else {\n        this.resolve(response);\n      }\n    }\n  }, {\n    key: \"getPromise\",\n    value: function getPromise() {\n      return this.promise;\n    }\n  }]);\n\n  return _PendingRequest;\n}();\n\nvar _Expectation = /*#__PURE__*/_createClass(function _Expectation(url, response) {\n  _classCallCheck(this, _Expectation);\n\n  this.url = url;\n  this.response = response;\n});\n\nfunction remove(list, el) {\n  var index = list.indexOf(el);\n\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MockSchemaRegistry = /*#__PURE__*/function () {\n  function MockSchemaRegistry(existingProperties, attrPropMapping, existingElements, invalidProperties, invalidAttributes) {\n    _classCallCheck(this, MockSchemaRegistry);\n\n    this.existingProperties = existingProperties;\n    this.attrPropMapping = attrPropMapping;\n    this.existingElements = existingElements;\n    this.invalidProperties = invalidProperties;\n    this.invalidAttributes = invalidAttributes;\n  }\n\n  _createClass(MockSchemaRegistry, [{\n    key: \"hasProperty\",\n    value: function hasProperty(tagName, property, schemas) {\n      var value = this.existingProperties[property];\n      return value === void 0 ? true : value;\n    }\n  }, {\n    key: \"hasElement\",\n    value: function hasElement(tagName, schemaMetas) {\n      var value = this.existingElements[tagName.toLowerCase()];\n      return value === void 0 ? true : value;\n    }\n  }, {\n    key: \"allKnownElementNames\",\n    value: function allKnownElementNames() {\n      return Object.keys(this.existingElements);\n    }\n  }, {\n    key: \"securityContext\",\n    value: function securityContext(selector, property, isAttribute) {\n      return core.SecurityContext.NONE;\n    }\n  }, {\n    key: \"getMappedPropName\",\n    value: function getMappedPropName(attrName) {\n      return this.attrPropMapping[attrName] || attrName;\n    }\n  }, {\n    key: \"getDefaultComponentElementName\",\n    value: function getDefaultComponentElementName() {\n      return 'ng-component';\n    }\n  }, {\n    key: \"validateProperty\",\n    value: function validateProperty(name) {\n      if (this.invalidProperties.indexOf(name) > -1) {\n        return {\n          error: true,\n          msg: \"Binding to property '\".concat(name, \"' is disallowed for security reasons\")\n        };\n      } else {\n        return {\n          error: false\n        };\n      }\n    }\n  }, {\n    key: \"validateAttribute\",\n    value: function validateAttribute(name) {\n      if (this.invalidAttributes.indexOf(name) > -1) {\n        return {\n          error: true,\n          msg: \"Binding to attribute '\".concat(name, \"' is disallowed for security reasons\")\n        };\n      } else {\n        return {\n          error: false\n        };\n      }\n    }\n  }, {\n    key: \"normalizeAnimationStyleProperty\",\n    value: function normalizeAnimationStyleProperty(propName) {\n      return propName;\n    }\n  }, {\n    key: \"normalizeAnimationStyleValue\",\n    value: function normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {\n      return {\n        error: null,\n        value: val.toString()\n      };\n    }\n  }]);\n\n  return MockSchemaRegistry;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An implementation of {@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\n\n\nvar MockDirectiveResolver = /*#__PURE__*/function (_DirectiveResolver) {\n  _inherits(MockDirectiveResolver, _DirectiveResolver);\n\n  var _super2 = _createSuper(MockDirectiveResolver);\n\n  function MockDirectiveResolver(reflector) {\n    var _this3;\n\n    _classCallCheck(this, MockDirectiveResolver);\n\n    _this3 = _super2.call(this, reflector);\n    _this3._directives = new Map();\n    return _this3;\n  }\n\n  _createClass(MockDirectiveResolver, [{\n    key: \"resolve\",\n    value: function resolve(type) {\n      var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return this._directives.get(type) || _get(_getPrototypeOf(MockDirectiveResolver.prototype), \"resolve\", this).call(this, type, throwIfNotFound);\n    }\n    /**\n     * Overrides the {@link core.Directive} for a directive.\n     */\n\n  }, {\n    key: \"setDirective\",\n    value: function setDirective(type, metadata) {\n      this._directives.set(type, metadata);\n    }\n  }]);\n\n  return MockDirectiveResolver;\n}(DirectiveResolver);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MockNgModuleResolver = /*#__PURE__*/function (_NgModuleResolver) {\n  _inherits(MockNgModuleResolver, _NgModuleResolver);\n\n  var _super3 = _createSuper(MockNgModuleResolver);\n\n  function MockNgModuleResolver(reflector) {\n    var _this4;\n\n    _classCallCheck(this, MockNgModuleResolver);\n\n    _this4 = _super3.call(this, reflector);\n    _this4._ngModules = new Map();\n    return _this4;\n  }\n  /**\n   * Overrides the {@link NgModule} for a module.\n   */\n\n\n  _createClass(MockNgModuleResolver, [{\n    key: \"setNgModule\",\n    value: function setNgModule(type, metadata) {\n      this._ngModules.set(type, metadata);\n    }\n    /**\n     * Returns the {@link NgModule} for a module:\n     * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\n     * default\n     * `NgModuleResolver`, see `setNgModule`.\n     */\n\n  }, {\n    key: \"resolve\",\n    value: function resolve(type) {\n      var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return this._ngModules.get(type) || _get(_getPrototypeOf(MockNgModuleResolver.prototype), \"resolve\", this).call(this, type, throwIfNotFound);\n    }\n  }]);\n\n  return MockNgModuleResolver;\n}(NgModuleResolver);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MockPipeResolver = /*#__PURE__*/function (_PipeResolver) {\n  _inherits(MockPipeResolver, _PipeResolver);\n\n  var _super4 = _createSuper(MockPipeResolver);\n\n  function MockPipeResolver(refector) {\n    var _this5;\n\n    _classCallCheck(this, MockPipeResolver);\n\n    _this5 = _super4.call(this, refector);\n    _this5._pipes = new Map();\n    return _this5;\n  }\n  /**\n   * Overrides the {@link Pipe} for a pipe.\n   */\n\n\n  _createClass(MockPipeResolver, [{\n    key: \"setPipe\",\n    value: function setPipe(type, metadata) {\n      this._pipes.set(type, metadata);\n    }\n    /**\n     * Returns the {@link Pipe} for a pipe:\n     * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\n     * default\n     * `PipeResolver`, see `setPipe`.\n     */\n\n  }, {\n    key: \"resolve\",\n    value: function resolve(type) {\n      var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var metadata = this._pipes.get(type);\n\n      if (!metadata) {\n        metadata = _get(_getPrototypeOf(MockPipeResolver.prototype), \"resolve\", this).call(this, type, throwIfNotFound);\n      }\n\n      return metadata;\n    }\n  }]);\n\n  return MockPipeResolver;\n}(PipeResolver);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MockDirectiveResolver, MockNgModuleResolver, MockPipeResolver, MockResourceLoader, MockSchemaRegistry }; //# sourceMappingURL=testing.js.map",
  "map": {
    "version": 3,
    "sources": [
      "c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@angular/compiler/__ivy_ngcc__/fesm2015/testing.js"
    ],
    "names": [
      "ResourceLoader",
      "core",
      "DirectiveResolver",
      "NgModuleResolver",
      "PipeResolver",
      "MockResourceLoader",
      "arguments",
      "_expectations",
      "_definitions",
      "Map",
      "_requests",
      "url",
      "request",
      "_PendingRequest",
      "push",
      "getPromise",
      "length",
      "response",
      "expectation",
      "_Expectation",
      "set",
      "Error",
      "_processRequest",
      "shift",
      "verifyNoOutstandingExpectations",
      "urls",
      "i",
      "join",
      "remove",
      "complete",
      "has",
      "get",
      "promise",
      "Promise",
      "res",
      "rej",
      "resolve",
      "reject",
      "list",
      "el",
      "index",
      "indexOf",
      "splice",
      "MockSchemaRegistry",
      "existingProperties",
      "attrPropMapping",
      "existingElements",
      "invalidProperties",
      "invalidAttributes",
      "tagName",
      "property",
      "schemas",
      "value",
      "schemaMetas",
      "toLowerCase",
      "Object",
      "keys",
      "selector",
      "isAttribute",
      "SecurityContext",
      "NONE",
      "attrName",
      "name",
      "error",
      "msg",
      "propName",
      "camelCaseProp",
      "userProvidedProp",
      "val",
      "toString",
      "MockDirectiveResolver",
      "reflector",
      "_directives",
      "type",
      "throwIfNotFound",
      "metadata",
      "MockNgModuleResolver",
      "_ngModules",
      "MockPipeResolver",
      "refector",
      "_pipes"
    ],
    "mappings": "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",
    "sourcesContent": [
      "/**\n * @license Angular v11.2.14\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ResourceLoader, core, DirectiveResolver, NgModuleResolver, PipeResolver } from '@angular/compiler';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A mock implementation of {@link ResourceLoader} that allows outgoing requests to be mocked\n * and responded to within a single test, without going to the network.\n */\nclass MockResourceLoader extends ResourceLoader {\n    constructor() {\n        super(...arguments);\n        this._expectations = [];\n        this._definitions = new Map();\n        this._requests = [];\n    }\n    get(url) {\n        const request = new _PendingRequest(url);\n        this._requests.push(request);\n        return request.getPromise();\n    }\n    hasPendingRequests() {\n        return !!this._requests.length;\n    }\n    /**\n     * Add an expectation for the given URL. Incoming requests will be checked against\n     * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n     * can be used to check if any expectations have not yet been met.\n     *\n     * The response given will be returned if the expectation matches.\n     */\n    expect(url, response) {\n        const expectation = new _Expectation(url, response);\n        this._expectations.push(expectation);\n    }\n    /**\n     * Add a definition for the given URL to return the given response. Unlike expectations,\n     * definitions have no order and will satisfy any matching request at any time. Also\n     * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n     * to return an error.\n     */\n    when(url, response) {\n        this._definitions.set(url, response);\n    }\n    /**\n     * Process pending requests and verify there are no outstanding expectations. Also fails\n     * if no requests are pending.\n     */\n    flush() {\n        if (this._requests.length === 0) {\n            throw new Error('No pending requests to flush');\n        }\n        do {\n            this._processRequest(this._requests.shift());\n        } while (this._requests.length > 0);\n        this.verifyNoOutstandingExpectations();\n    }\n    /**\n     * Throw an exception if any expectations have not been satisfied.\n     */\n    verifyNoOutstandingExpectations() {\n        if (this._expectations.length === 0)\n            return;\n        const urls = [];\n        for (let i = 0; i < this._expectations.length; i++) {\n            const expectation = this._expectations[i];\n            urls.push(expectation.url);\n        }\n        throw new Error(`Unsatisfied requests: ${urls.join(', ')}`);\n    }\n    _processRequest(request) {\n        const url = request.url;\n        if (this._expectations.length > 0) {\n            const expectation = this._expectations[0];\n            if (expectation.url == url) {\n                remove(this._expectations, expectation);\n                request.complete(expectation.response);\n                return;\n            }\n        }\n        if (this._definitions.has(url)) {\n            const response = this._definitions.get(url);\n            request.complete(response == null ? null : response);\n            return;\n        }\n        throw new Error(`Unexpected request ${url}`);\n    }\n}\nclass _PendingRequest {\n    constructor(url) {\n        this.url = url;\n        this.promise = new Promise((res, rej) => {\n            this.resolve = res;\n            this.reject = rej;\n        });\n    }\n    complete(response) {\n        if (response == null) {\n            this.reject(`Failed to load ${this.url}`);\n        }\n        else {\n            this.resolve(response);\n        }\n    }\n    getPromise() {\n        return this.promise;\n    }\n}\nclass _Expectation {\n    constructor(url, response) {\n        this.url = url;\n        this.response = response;\n    }\n}\nfunction remove(list, el) {\n    const index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MockSchemaRegistry {\n    constructor(existingProperties, attrPropMapping, existingElements, invalidProperties, invalidAttributes) {\n        this.existingProperties = existingProperties;\n        this.attrPropMapping = attrPropMapping;\n        this.existingElements = existingElements;\n        this.invalidProperties = invalidProperties;\n        this.invalidAttributes = invalidAttributes;\n    }\n    hasProperty(tagName, property, schemas) {\n        const value = this.existingProperties[property];\n        return value === void 0 ? true : value;\n    }\n    hasElement(tagName, schemaMetas) {\n        const value = this.existingElements[tagName.toLowerCase()];\n        return value === void 0 ? true : value;\n    }\n    allKnownElementNames() {\n        return Object.keys(this.existingElements);\n    }\n    securityContext(selector, property, isAttribute) {\n        return core.SecurityContext.NONE;\n    }\n    getMappedPropName(attrName) {\n        return this.attrPropMapping[attrName] || attrName;\n    }\n    getDefaultComponentElementName() {\n        return 'ng-component';\n    }\n    validateProperty(name) {\n        if (this.invalidProperties.indexOf(name) > -1) {\n            return { error: true, msg: `Binding to property '${name}' is disallowed for security reasons` };\n        }\n        else {\n            return { error: false };\n        }\n    }\n    validateAttribute(name) {\n        if (this.invalidAttributes.indexOf(name) > -1) {\n            return {\n                error: true,\n                msg: `Binding to attribute '${name}' is disallowed for security reasons`\n            };\n        }\n        else {\n            return { error: false };\n        }\n    }\n    normalizeAnimationStyleProperty(propName) {\n        return propName;\n    }\n    normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {\n        return { error: null, value: val.toString() };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An implementation of {@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\nclass MockDirectiveResolver extends DirectiveResolver {\n    constructor(reflector) {\n        super(reflector);\n        this._directives = new Map();\n    }\n    resolve(type, throwIfNotFound = true) {\n        return this._directives.get(type) || super.resolve(type, throwIfNotFound);\n    }\n    /**\n     * Overrides the {@link core.Directive} for a directive.\n     */\n    setDirective(type, metadata) {\n        this._directives.set(type, metadata);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MockNgModuleResolver extends NgModuleResolver {\n    constructor(reflector) {\n        super(reflector);\n        this._ngModules = new Map();\n    }\n    /**\n     * Overrides the {@link NgModule} for a module.\n     */\n    setNgModule(type, metadata) {\n        this._ngModules.set(type, metadata);\n    }\n    /**\n     * Returns the {@link NgModule} for a module:\n     * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\n     * default\n     * `NgModuleResolver`, see `setNgModule`.\n     */\n    resolve(type, throwIfNotFound = true) {\n        return this._ngModules.get(type) || super.resolve(type, throwIfNotFound);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MockPipeResolver extends PipeResolver {\n    constructor(refector) {\n        super(refector);\n        this._pipes = new Map();\n    }\n    /**\n     * Overrides the {@link Pipe} for a pipe.\n     */\n    setPipe(type, metadata) {\n        this._pipes.set(type, metadata);\n    }\n    /**\n     * Returns the {@link Pipe} for a pipe:\n     * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\n     * default\n     * `PipeResolver`, see `setPipe`.\n     */\n    resolve(type, throwIfNotFound = true) {\n        let metadata = this._pipes.get(type);\n        if (!metadata) {\n            metadata = super.resolve(type, throwIfNotFound);\n        }\n        return metadata;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MockDirectiveResolver, MockNgModuleResolver, MockPipeResolver, MockResourceLoader, MockSchemaRegistry };\n\n//# sourceMappingURL=testing.js.map"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
