{
  "ast": null,
  "code": "import _classCallCheck from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license Angular v11.2.14\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { Location, LocationStrategy } from '@angular/common';\nimport { SpyLocation, MockLocationStrategy } from '@angular/common/testing';\nimport { Injectable, Compiler, NgModule, NgModuleFactoryLoader, Injector, Optional } from '@angular/core';\nimport { Router, ɵflatten, ɵassignExtraOptionsToRouter, provideRoutes, ROUTER_CONFIGURATION, RouterModule, ɵROUTER_PROVIDERS, UrlSerializer, ChildrenOutletContexts, ROUTES, UrlHandlingStrategy, PreloadingStrategy, NoPreloading } from '@angular/router';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @description\n *\n * Allows to simulate the loading of ng modules in tests.\n *\n * ```\n * const loader = TestBed.inject(NgModuleFactoryLoader);\n *\n * @Component({template: 'lazy-loaded'})\n * class LazyLoadedComponent {}\n * @NgModule({\n *   declarations: [LazyLoadedComponent],\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\n * })\n *\n * class LoadedModule {}\n *\n * // sets up stubbedModules\n * loader.stubbedModules = {lazyModule: LoadedModule};\n *\n * router.resetConfig([\n *   {path: 'lazy', loadChildren: 'lazyModule'},\n * ]);\n *\n * router.navigateByUrl('/lazy/loaded');\n * ```\n *\n * @publicApi\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar SpyNgModuleFactoryLoader = /*#__PURE__*/function () {\n  function SpyNgModuleFactoryLoader(compiler) {\n    _classCallCheck(this, SpyNgModuleFactoryLoader);\n\n    this.compiler = compiler;\n    /**\n     * @docsNotRequired\n     */\n\n    this._stubbedModules = {};\n  }\n  /**\n   * @docsNotRequired\n   */\n\n\n  _createClass(SpyNgModuleFactoryLoader, [{\n    key: \"stubbedModules\",\n    get:\n    /**\n     * @docsNotRequired\n     */\n    function get() {\n      return this._stubbedModules;\n    },\n    set: function set(modules) {\n      var res = {};\n\n      for (var _i = 0, _Object$keys = Object.keys(modules); _i < _Object$keys.length; _i++) {\n        var t = _Object$keys[_i];\n        res[t] = this.compiler.compileModuleAsync(modules[t]);\n      }\n\n      this._stubbedModules = res;\n    }\n  }, {\n    key: \"load\",\n    value: function load(path) {\n      if (this._stubbedModules[path]) {\n        return this._stubbedModules[path];\n      } else {\n        return Promise.reject(new Error(\"Cannot find module \".concat(path)));\n      }\n    }\n  }]);\n\n  return SpyNgModuleFactoryLoader;\n}();\n\nSpyNgModuleFactoryLoader.ɵfac = function SpyNgModuleFactoryLoader_Factory(t) {\n  return new (t || SpyNgModuleFactoryLoader)(ɵngcc0.ɵɵinject(ɵngcc0.Compiler));\n};\n\nSpyNgModuleFactoryLoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: SpyNgModuleFactoryLoader,\n  factory: SpyNgModuleFactoryLoader.ɵfac\n});\n\nSpyNgModuleFactoryLoader.ctorParameters = function () {\n  return [{\n    type: Compiler\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SpyNgModuleFactoryLoader, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc0.Compiler\n    }];\n  }, null);\n})();\n\nfunction isUrlHandlingStrategy(opts) {\n  // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\n  // runtime.\n  return 'shouldProcessUrl' in opts;\n}\n/**\n * Router setup factory function used for testing.\n *\n * @publicApi\n */\n\n\nfunction setupTestingRouter(urlSerializer, contexts, location, loader, compiler, injector, routes, opts, urlHandlingStrategy) {\n  var router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, ɵflatten(routes));\n\n  if (opts) {\n    // Handle deprecated argument ordering.\n    if (isUrlHandlingStrategy(opts)) {\n      router.urlHandlingStrategy = opts;\n    } else {\n      // Handle ExtraOptions\n      ɵassignExtraOptionsToRouter(opts, router);\n    }\n  }\n\n  if (urlHandlingStrategy) {\n    router.urlHandlingStrategy = urlHandlingStrategy;\n  }\n\n  return router;\n}\n/**\n * @description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location`, `LocationStrategy`, and {@link\n * NgModuleFactoryLoader}.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * beforeEach(() => {\n *   TestBed.configureTestingModule({\n *     imports: [\n *       RouterTestingModule.withRoutes(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n * @publicApi\n */\n\n\nvar RouterTestingModule = /*#__PURE__*/function () {\n  function RouterTestingModule() {\n    _classCallCheck(this, RouterTestingModule);\n  }\n\n  _createClass(RouterTestingModule, null, [{\n    key: \"withRoutes\",\n    value: function withRoutes(routes, config) {\n      return {\n        ngModule: RouterTestingModule,\n        providers: [provideRoutes(routes), {\n          provide: ROUTER_CONFIGURATION,\n          useValue: config ? config : {}\n        }]\n      };\n    }\n  }]);\n\n  return RouterTestingModule;\n}();\n\nRouterTestingModule.ɵfac = function RouterTestingModule_Factory(t) {\n  return new (t || RouterTestingModule)();\n};\n\nRouterTestingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: RouterTestingModule\n});\nRouterTestingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [ɵROUTER_PROVIDERS, {\n    provide: Location,\n    useClass: SpyLocation\n  }, {\n    provide: LocationStrategy,\n    useClass: MockLocationStrategy\n  }, {\n    provide: NgModuleFactoryLoader,\n    useClass: SpyNgModuleFactoryLoader\n  }, {\n    provide: Router,\n    useFactory: setupTestingRouter,\n    deps: [UrlSerializer, ChildrenOutletContexts, Location, NgModuleFactoryLoader, Compiler, Injector, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()]]\n  }, {\n    provide: PreloadingStrategy,\n    useExisting: NoPreloading\n  }, provideRoutes([])],\n  imports: [RouterModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RouterTestingModule, {\n    exports: function exports() {\n      return [RouterModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RouterTestingModule, [{\n    type: NgModule,\n    args: [{\n      exports: [RouterModule],\n      providers: [ɵROUTER_PROVIDERS, {\n        provide: Location,\n        useClass: SpyLocation\n      }, {\n        provide: LocationStrategy,\n        useClass: MockLocationStrategy\n      }, {\n        provide: NgModuleFactoryLoader,\n        useClass: SpyNgModuleFactoryLoader\n      }, {\n        provide: Router,\n        useFactory: setupTestingRouter,\n        deps: [UrlSerializer, ChildrenOutletContexts, Location, NgModuleFactoryLoader, Compiler, Injector, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()]]\n      }, {\n        provide: PreloadingStrategy,\n        useExisting: NoPreloading\n      }, provideRoutes([])]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { RouterTestingModule, SpyNgModuleFactoryLoader, setupTestingRouter }; //# sourceMappingURL=testing.js.map",
  "map": {
    "version": 3,
    "sources": [
      "c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@angular/router/__ivy_ngcc__/fesm2015/testing.js"
    ],
    "names": [
      "Location",
      "LocationStrategy",
      "SpyLocation",
      "MockLocationStrategy",
      "Injectable",
      "Compiler",
      "NgModule",
      "NgModuleFactoryLoader",
      "Injector",
      "Optional",
      "Router",
      "ɵflatten",
      "ɵassignExtraOptionsToRouter",
      "provideRoutes",
      "ROUTER_CONFIGURATION",
      "RouterModule",
      "ɵROUTER_PROVIDERS",
      "UrlSerializer",
      "ChildrenOutletContexts",
      "ROUTES",
      "UrlHandlingStrategy",
      "PreloadingStrategy",
      "NoPreloading",
      "ɵngcc0",
      "SpyNgModuleFactoryLoader",
      "compiler",
      "_stubbedModules",
      "modules",
      "res",
      "Object",
      "keys",
      "t",
      "compileModuleAsync",
      "path",
      "Promise",
      "reject",
      "Error",
      "ɵfac",
      "SpyNgModuleFactoryLoader_Factory",
      "ɵɵinject",
      "ɵprov",
      "ɵɵdefineInjectable",
      "token",
      "factory",
      "ctorParameters",
      "type",
      "ngDevMode",
      "ɵsetClassMetadata",
      "isUrlHandlingStrategy",
      "opts",
      "setupTestingRouter",
      "urlSerializer",
      "contexts",
      "location",
      "loader",
      "injector",
      "routes",
      "urlHandlingStrategy",
      "router",
      "RouterTestingModule",
      "config",
      "ngModule",
      "providers",
      "provide",
      "useValue",
      "RouterTestingModule_Factory",
      "ɵmod",
      "ɵɵdefineNgModule",
      "ɵinj",
      "ɵɵdefineInjector",
      "useClass",
      "useFactory",
      "deps",
      "useExisting",
      "imports",
      "ngJitMode",
      "ɵɵsetNgModuleScope",
      "exports",
      "args"
    ],
    "mappings": "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",
    "sourcesContent": [
      "/**\n * @license Angular v11.2.14\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Location, LocationStrategy } from '@angular/common';\nimport { SpyLocation, MockLocationStrategy } from '@angular/common/testing';\nimport { Injectable, Compiler, NgModule, NgModuleFactoryLoader, Injector, Optional } from '@angular/core';\nimport { Router, ɵflatten, ɵassignExtraOptionsToRouter, provideRoutes, ROUTER_CONFIGURATION, RouterModule, ɵROUTER_PROVIDERS, UrlSerializer, ChildrenOutletContexts, ROUTES, UrlHandlingStrategy, PreloadingStrategy, NoPreloading } from '@angular/router';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Allows to simulate the loading of ng modules in tests.\n *\n * ```\n * const loader = TestBed.inject(NgModuleFactoryLoader);\n *\n * @Component({template: 'lazy-loaded'})\n * class LazyLoadedComponent {}\n * @NgModule({\n *   declarations: [LazyLoadedComponent],\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\n * })\n *\n * class LoadedModule {}\n *\n * // sets up stubbedModules\n * loader.stubbedModules = {lazyModule: LoadedModule};\n *\n * router.resetConfig([\n *   {path: 'lazy', loadChildren: 'lazyModule'},\n * ]);\n *\n * router.navigateByUrl('/lazy/loaded');\n * ```\n *\n * @publicApi\n */\nimport * as ɵngcc0 from '@angular/core';\nclass SpyNgModuleFactoryLoader {\n    constructor(compiler) {\n        this.compiler = compiler;\n        /**\n         * @docsNotRequired\n         */\n        this._stubbedModules = {};\n    }\n    /**\n     * @docsNotRequired\n     */\n    set stubbedModules(modules) {\n        const res = {};\n        for (const t of Object.keys(modules)) {\n            res[t] = this.compiler.compileModuleAsync(modules[t]);\n        }\n        this._stubbedModules = res;\n    }\n    /**\n     * @docsNotRequired\n     */\n    get stubbedModules() {\n        return this._stubbedModules;\n    }\n    load(path) {\n        if (this._stubbedModules[path]) {\n            return this._stubbedModules[path];\n        }\n        else {\n            return Promise.reject(new Error(`Cannot find module ${path}`));\n        }\n    }\n}\nSpyNgModuleFactoryLoader.ɵfac = function SpyNgModuleFactoryLoader_Factory(t) { return new (t || SpyNgModuleFactoryLoader)(ɵngcc0.ɵɵinject(ɵngcc0.Compiler)); };\nSpyNgModuleFactoryLoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SpyNgModuleFactoryLoader, factory: SpyNgModuleFactoryLoader.ɵfac });\nSpyNgModuleFactoryLoader.ctorParameters = () => [\n    { type: Compiler }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SpyNgModuleFactoryLoader, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.Compiler }]; }, null); })();\nfunction isUrlHandlingStrategy(opts) {\n    // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\n    // runtime.\n    return 'shouldProcessUrl' in opts;\n}\n/**\n * Router setup factory function used for testing.\n *\n * @publicApi\n */\nfunction setupTestingRouter(urlSerializer, contexts, location, loader, compiler, injector, routes, opts, urlHandlingStrategy) {\n    const router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, ɵflatten(routes));\n    if (opts) {\n        // Handle deprecated argument ordering.\n        if (isUrlHandlingStrategy(opts)) {\n            router.urlHandlingStrategy = opts;\n        }\n        else {\n            // Handle ExtraOptions\n            ɵassignExtraOptionsToRouter(opts, router);\n        }\n    }\n    if (urlHandlingStrategy) {\n        router.urlHandlingStrategy = urlHandlingStrategy;\n    }\n    return router;\n}\n/**\n * @description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location`, `LocationStrategy`, and {@link\n * NgModuleFactoryLoader}.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * beforeEach(() => {\n *   TestBed.configureTestingModule({\n *     imports: [\n *       RouterTestingModule.withRoutes(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n * @publicApi\n */\nclass RouterTestingModule {\n    static withRoutes(routes, config) {\n        return {\n            ngModule: RouterTestingModule,\n            providers: [\n                provideRoutes(routes),\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n            ]\n        };\n    }\n}\nRouterTestingModule.ɵfac = function RouterTestingModule_Factory(t) { return new (t || RouterTestingModule)(); };\nRouterTestingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: RouterTestingModule });\nRouterTestingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        ɵROUTER_PROVIDERS, { provide: Location, useClass: SpyLocation },\n        { provide: LocationStrategy, useClass: MockLocationStrategy },\n        { provide: NgModuleFactoryLoader, useClass: SpyNgModuleFactoryLoader }, {\n            provide: Router,\n            useFactory: setupTestingRouter,\n            deps: [\n                UrlSerializer, ChildrenOutletContexts, Location, NgModuleFactoryLoader, Compiler, Injector,\n                ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()]\n            ]\n        },\n        { provide: PreloadingStrategy, useExisting: NoPreloading }, provideRoutes([])\n    ], imports: [RouterModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RouterTestingModule, { exports: function () { return [RouterModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RouterTestingModule, [{\n        type: NgModule,\n        args: [{\n                exports: [RouterModule],\n                providers: [\n                    ɵROUTER_PROVIDERS, { provide: Location, useClass: SpyLocation },\n                    { provide: LocationStrategy, useClass: MockLocationStrategy },\n                    { provide: NgModuleFactoryLoader, useClass: SpyNgModuleFactoryLoader }, {\n                        provide: Router,\n                        useFactory: setupTestingRouter,\n                        deps: [\n                            UrlSerializer, ChildrenOutletContexts, Location, NgModuleFactoryLoader, Compiler, Injector,\n                            ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()]\n                        ]\n                    },\n                    { provide: PreloadingStrategy, useExisting: NoPreloading }, provideRoutes([])\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RouterTestingModule, SpyNgModuleFactoryLoader, setupTestingRouter };\n\n//# sourceMappingURL=testing.js.map"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
