{
  "ast": null,
  "code": "import _createClass from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license Angular v11.2.14\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { HttpHeaders, HttpResponse, HttpErrorResponse, HttpEventType, HttpClientModule, HttpBackend } from '@angular/common/http';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Observable } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n *\n * @publicApi\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nvar HttpTestingController = /*#__PURE__*/_createClass(function HttpTestingController() {\n  _classCallCheck(this, HttpTestingController);\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n * @publicApi\n */\n\n\nvar TestRequest = /*#__PURE__*/function () {\n  function TestRequest(request, observer) {\n    _classCallCheck(this, TestRequest);\n\n    this.request = request;\n    this.observer = observer;\n    /**\n     * @internal set by `HttpClientTestingBackend`\n     */\n\n    this._cancelled = false;\n  }\n  /**\n   * Whether the request was cancelled after it was sent.\n   */\n\n\n  _createClass(TestRequest, [{\n    key: \"cancelled\",\n    get: function get() {\n      return this._cancelled;\n    }\n    /**\n     * Resolve the request by returning a body plus additional HTTP information (such as response\n     * headers) if provided.\n     * If the request specifies an expected body type, the body is converted into the requested type.\n     * Otherwise, the body is converted to `JSON` by default.\n     *\n     * Both successful and unsuccessful responses can be delivered via `flush()`.\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush(body) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this.cancelled) {\n        throw new Error(\"Cannot flush a cancelled request.\");\n      }\n\n      var url = this.request.urlWithParams;\n      var headers = opts.headers instanceof HttpHeaders ? opts.headers : new HttpHeaders(opts.headers);\n      body = _maybeConvertBody(this.request.responseType, body);\n      var statusText = opts.statusText;\n      var status = opts.status !== undefined ? opts.status : 200;\n\n      if (opts.status === undefined) {\n        if (body === null) {\n          status = 204;\n          statusText = statusText || 'No Content';\n        } else {\n          statusText = statusText || 'OK';\n        }\n      }\n\n      if (statusText === undefined) {\n        throw new Error('statusText is required when setting a custom status.');\n      }\n\n      if (status >= 200 && status < 300) {\n        this.observer.next(new HttpResponse({\n          body: body,\n          headers: headers,\n          status: status,\n          statusText: statusText,\n          url: url\n        }));\n        this.observer.complete();\n      } else {\n        this.observer.error(new HttpErrorResponse({\n          error: body,\n          headers: headers,\n          status: status,\n          statusText: statusText,\n          url: url\n        }));\n      }\n    }\n    /**\n     * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\n     */\n\n  }, {\n    key: \"error\",\n    value: function error(_error) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this.cancelled) {\n        throw new Error(\"Cannot return an error for a cancelled request.\");\n      }\n\n      if (opts.status && opts.status >= 200 && opts.status < 300) {\n        throw new Error(\"error() called with a successful status.\");\n      }\n\n      var headers = opts.headers instanceof HttpHeaders ? opts.headers : new HttpHeaders(opts.headers);\n      this.observer.error(new HttpErrorResponse({\n        error: _error,\n        headers: headers,\n        status: opts.status || 0,\n        statusText: opts.statusText || '',\n        url: this.request.urlWithParams\n      }));\n    }\n    /**\n     * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n     * request.\n     */\n\n  }, {\n    key: \"event\",\n    value: function event(_event) {\n      if (this.cancelled) {\n        throw new Error(\"Cannot send events to a cancelled request.\");\n      }\n\n      this.observer.next(_event);\n    }\n  }]);\n\n  return TestRequest;\n}();\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n */\n\n\nfunction _toArrayBufferBody(body) {\n  if (typeof ArrayBuffer === 'undefined') {\n    throw new Error('ArrayBuffer responses are not supported on this platform.');\n  }\n\n  if (body instanceof ArrayBuffer) {\n    return body;\n  }\n\n  throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to a Blob.\n */\n\n\nfunction _toBlob(body) {\n  if (typeof Blob === 'undefined') {\n    throw new Error('Blob responses are not supported on this platform.');\n  }\n\n  if (body instanceof Blob) {\n    return body;\n  }\n\n  if (ArrayBuffer && body instanceof ArrayBuffer) {\n    return new Blob([body]);\n  }\n\n  throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to JSON data.\n */\n\n\nfunction _toJsonBody(body) {\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'JSON';\n\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error(\"Automatic conversion to \".concat(format, \" is not supported for ArrayBuffers.\"));\n  }\n\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error(\"Automatic conversion to \".concat(format, \" is not supported for Blobs.\"));\n  }\n\n  if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' || typeof body === 'boolean' || Array.isArray(body)) {\n    return body;\n  }\n\n  throw new Error(\"Automatic conversion to \".concat(format, \" is not supported for response type.\"));\n}\n/**\n * Helper function to convert a response body to a string.\n */\n\n\nfunction _toTextBody(body) {\n  if (typeof body === 'string') {\n    return body;\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n  }\n\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error('Automatic conversion to text is not supported for Blobs.');\n  }\n\n  return JSON.stringify(_toJsonBody(body, 'text'));\n}\n/**\n * Convert a response body to the requested type.\n */\n\n\nfunction _maybeConvertBody(responseType, body) {\n  if (body === null) {\n    return null;\n  }\n\n  switch (responseType) {\n    case 'arraybuffer':\n      return _toArrayBufferBody(body);\n\n    case 'blob':\n      return _toBlob(body);\n\n    case 'json':\n      return _toJsonBody(body);\n\n    case 'text':\n      return _toTextBody(body);\n\n    default:\n      throw new Error(\"Unsupported responseType: \".concat(responseType));\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n *\n */\n\n\nvar HttpClientTestingBackend = /*#__PURE__*/function () {\n  function HttpClientTestingBackend() {\n    _classCallCheck(this, HttpClientTestingBackend);\n\n    /**\n     * List of pending requests which have not yet been expected.\n     */\n    this.open = [];\n  }\n  /**\n   * Handle an incoming request by queueing it in the list of open requests.\n   */\n\n\n  _createClass(HttpClientTestingBackend, [{\n    key: \"handle\",\n    value: function handle(req) {\n      var _this = this;\n\n      return new Observable(function (observer) {\n        var testReq = new TestRequest(req, observer);\n\n        _this.open.push(testReq);\n\n        observer.next({\n          type: HttpEventType.Sent\n        });\n        return function () {\n          testReq._cancelled = true;\n        };\n      });\n    }\n    /**\n     * Helper function to search for requests in the list of open requests.\n     */\n\n  }, {\n    key: \"_match\",\n    value: function _match(match) {\n      if (typeof match === 'string') {\n        return this.open.filter(function (testReq) {\n          return testReq.request.urlWithParams === match;\n        });\n      } else if (typeof match === 'function') {\n        return this.open.filter(function (testReq) {\n          return match(testReq.request);\n        });\n      } else {\n        return this.open.filter(function (testReq) {\n          return (!match.method || testReq.request.method === match.method.toUpperCase()) && (!match.url || testReq.request.urlWithParams === match.url);\n        });\n      }\n    }\n    /**\n     * Search for requests in the list of open requests, and return all that match\n     * without asserting anything about the number of matches.\n     */\n\n  }, {\n    key: \"match\",\n    value: function match(_match2) {\n      var _this2 = this;\n\n      var results = this._match(_match2);\n\n      results.forEach(function (result) {\n        var index = _this2.open.indexOf(result);\n\n        if (index !== -1) {\n          _this2.open.splice(index, 1);\n        }\n      });\n      return results;\n    }\n    /**\n     * Expect that a single outstanding request matches the given matcher, and return\n     * it.\n     *\n     * Requests returned through this API will no longer be in the list of open requests,\n     * and thus will not match twice.\n     */\n\n  }, {\n    key: \"expectOne\",\n    value: function expectOne(match, description) {\n      description = description || this.descriptionFromMatcher(match);\n      var matches = this.match(match);\n\n      if (matches.length > 1) {\n        throw new Error(\"Expected one matching request for criteria \\\"\".concat(description, \"\\\", found \").concat(matches.length, \" requests.\"));\n      }\n\n      if (matches.length === 0) {\n        var message = \"Expected one matching request for criteria \\\"\".concat(description, \"\\\", found none.\");\n\n        if (this.open.length > 0) {\n          // Show the methods and URLs of open requests in the error, for convenience.\n          var requests = this.open.map(function (testReq) {\n            var url = testReq.request.urlWithParams;\n            var method = testReq.request.method;\n            return \"\".concat(method, \" \").concat(url);\n          }).join(', ');\n          message += \" Requests received are: \".concat(requests, \".\");\n        }\n\n        throw new Error(message);\n      }\n\n      return matches[0];\n    }\n    /**\n     * Expect that no outstanding requests match the given matcher, and throw an error\n     * if any do.\n     */\n\n  }, {\n    key: \"expectNone\",\n    value: function expectNone(match, description) {\n      description = description || this.descriptionFromMatcher(match);\n      var matches = this.match(match);\n\n      if (matches.length > 0) {\n        throw new Error(\"Expected zero matching requests for criteria \\\"\".concat(description, \"\\\", found \").concat(matches.length, \".\"));\n      }\n    }\n    /**\n     * Validate that there are no outstanding requests.\n     */\n\n  }, {\n    key: \"verify\",\n    value: function verify() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var open = this.open; // It's possible that some requests may be cancelled, and this is expected.\n      // The user can ask to ignore open requests which have been cancelled.\n\n      if (opts.ignoreCancelled) {\n        open = open.filter(function (testReq) {\n          return !testReq.cancelled;\n        });\n      }\n\n      if (open.length > 0) {\n        // Show the methods and URLs of open requests in the error, for convenience.\n        var requests = open.map(function (testReq) {\n          var url = testReq.request.urlWithParams.split('?')[0];\n          var method = testReq.request.method;\n          return \"\".concat(method, \" \").concat(url);\n        }).join(', ');\n        throw new Error(\"Expected no open requests, found \".concat(open.length, \": \").concat(requests));\n      }\n    }\n  }, {\n    key: \"descriptionFromMatcher\",\n    value: function descriptionFromMatcher(matcher) {\n      if (typeof matcher === 'string') {\n        return \"Match URL: \".concat(matcher);\n      } else if (typeof matcher === 'object') {\n        var method = matcher.method || '(any)';\n        var url = matcher.url || '(any)';\n        return \"Match method: \".concat(method, \", URL: \").concat(url);\n      } else {\n        return \"Match by function: \".concat(matcher.name);\n      }\n    }\n  }]);\n\n  return HttpClientTestingBackend;\n}();\n\nHttpClientTestingBackend.Éµfac = function HttpClientTestingBackend_Factory(t) {\n  return new (t || HttpClientTestingBackend)();\n};\n\nHttpClientTestingBackend.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: HttpClientTestingBackend,\n  factory: HttpClientTestingBackend.Éµfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpClientTestingBackend, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n *\n * Inject `HttpTestingController` to expect and flush requests in your tests.\n *\n * @publicApi\n */\n\n\nvar HttpClientTestingModule = /*#__PURE__*/_createClass(function HttpClientTestingModule() {\n  _classCallCheck(this, HttpClientTestingModule);\n});\n\nHttpClientTestingModule.Éµfac = function HttpClientTestingModule_Factory(t) {\n  return new (t || HttpClientTestingModule)();\n};\n\nHttpClientTestingModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: HttpClientTestingModule\n});\nHttpClientTestingModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  providers: [HttpClientTestingBackend, {\n    provide: HttpBackend,\n    useExisting: HttpClientTestingBackend\n  }, {\n    provide: HttpTestingController,\n    useExisting: HttpClientTestingBackend\n  }],\n  imports: [[HttpClientModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(HttpClientTestingModule, {\n    imports: function imports() {\n      return [HttpClientModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpClientTestingModule, [{\n    type: NgModule,\n    args: [{\n      imports: [HttpClientModule],\n      providers: [HttpClientTestingBackend, {\n        provide: HttpBackend,\n        useExisting: HttpClientTestingBackend\n      }, {\n        provide: HttpTestingController,\n        useExisting: HttpClientTestingBackend\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { HttpClientTestingModule, HttpTestingController, TestRequest, HttpClientTestingBackend as Éµangular_packages_common_http_testing_testing_a }; //# sourceMappingURL=testing.js.map",
  "map": {
    "version": 3,
    "sources": [
      "c:/Users/manoel.vitor/Desktop/teste/po/po-angular/node_modules/@angular/common/__ivy_ngcc__/fesm2015/http/testing.js"
    ],
    "names": [
      "HttpHeaders",
      "HttpResponse",
      "HttpErrorResponse",
      "HttpEventType",
      "HttpClientModule",
      "HttpBackend",
      "Injectable",
      "NgModule",
      "Observable",
      "Éµngcc0",
      "HttpTestingController",
      "TestRequest",
      "request",
      "observer",
      "_cancelled",
      "body",
      "opts",
      "cancelled",
      "Error",
      "url",
      "urlWithParams",
      "headers",
      "_maybeConvertBody",
      "responseType",
      "statusText",
      "status",
      "undefined",
      "next",
      "complete",
      "error",
      "event",
      "_toArrayBufferBody",
      "ArrayBuffer",
      "_toBlob",
      "Blob",
      "_toJsonBody",
      "format",
      "Array",
      "isArray",
      "_toTextBody",
      "JSON",
      "stringify",
      "HttpClientTestingBackend",
      "open",
      "req",
      "testReq",
      "push",
      "type",
      "Sent",
      "match",
      "filter",
      "method",
      "toUpperCase",
      "results",
      "_match",
      "forEach",
      "result",
      "index",
      "indexOf",
      "splice",
      "description",
      "descriptionFromMatcher",
      "matches",
      "length",
      "message",
      "requests",
      "map",
      "join",
      "ignoreCancelled",
      "split",
      "matcher",
      "name",
      "Éµfac",
      "HttpClientTestingBackend_Factory",
      "t",
      "Éµprov",
      "ÉµÉµdefineInjectable",
      "token",
      "factory",
      "ngDevMode",
      "ÉµsetClassMetadata",
      "HttpClientTestingModule",
      "HttpClientTestingModule_Factory",
      "Éµmod",
      "ÉµÉµdefineNgModule",
      "Éµinj",
      "ÉµÉµdefineInjector",
      "providers",
      "provide",
      "useExisting",
      "imports",
      "ngJitMode",
      "ÉµÉµsetNgModuleScope",
      "args",
      "Éµangular_packages_common_http_testing_testing_a"
    ],
    "mappings": "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",
    "sourcesContent": [
      "/**\n * @license Angular v11.2.14\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { HttpHeaders, HttpResponse, HttpErrorResponse, HttpEventType, HttpClientModule, HttpBackend } from '@angular/common/http';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n *\n * @publicApi\n */\nimport * as Éµngcc0 from '@angular/core';\nclass HttpTestingController {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n * @publicApi\n */\nclass TestRequest {\n    constructor(request, observer) {\n        this.request = request;\n        this.observer = observer;\n        /**\n         * @internal set by `HttpClientTestingBackend`\n         */\n        this._cancelled = false;\n    }\n    /**\n     * Whether the request was cancelled after it was sent.\n     */\n    get cancelled() {\n        return this._cancelled;\n    }\n    /**\n     * Resolve the request by returning a body plus additional HTTP information (such as response\n     * headers) if provided.\n     * If the request specifies an expected body type, the body is converted into the requested type.\n     * Otherwise, the body is converted to `JSON` by default.\n     *\n     * Both successful and unsuccessful responses can be delivered via `flush()`.\n     */\n    flush(body, opts = {}) {\n        if (this.cancelled) {\n            throw new Error(`Cannot flush a cancelled request.`);\n        }\n        const url = this.request.urlWithParams;\n        const headers = (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n        body = _maybeConvertBody(this.request.responseType, body);\n        let statusText = opts.statusText;\n        let status = opts.status !== undefined ? opts.status : 200;\n        if (opts.status === undefined) {\n            if (body === null) {\n                status = 204;\n                statusText = statusText || 'No Content';\n            }\n            else {\n                statusText = statusText || 'OK';\n            }\n        }\n        if (statusText === undefined) {\n            throw new Error('statusText is required when setting a custom status.');\n        }\n        if (status >= 200 && status < 300) {\n            this.observer.next(new HttpResponse({ body, headers, status, statusText, url }));\n            this.observer.complete();\n        }\n        else {\n            this.observer.error(new HttpErrorResponse({ error: body, headers, status, statusText, url }));\n        }\n    }\n    /**\n     * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\n     */\n    error(error, opts = {}) {\n        if (this.cancelled) {\n            throw new Error(`Cannot return an error for a cancelled request.`);\n        }\n        if (opts.status && opts.status >= 200 && opts.status < 300) {\n            throw new Error(`error() called with a successful status.`);\n        }\n        const headers = (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n        this.observer.error(new HttpErrorResponse({\n            error,\n            headers,\n            status: opts.status || 0,\n            statusText: opts.statusText || '',\n            url: this.request.urlWithParams,\n        }));\n    }\n    /**\n     * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n     * request.\n     */\n    event(event) {\n        if (this.cancelled) {\n            throw new Error(`Cannot send events to a cancelled request.`);\n        }\n        this.observer.next(event);\n    }\n}\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n */\nfunction _toArrayBufferBody(body) {\n    if (typeof ArrayBuffer === 'undefined') {\n        throw new Error('ArrayBuffer responses are not supported on this platform.');\n    }\n    if (body instanceof ArrayBuffer) {\n        return body;\n    }\n    throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to a Blob.\n */\nfunction _toBlob(body) {\n    if (typeof Blob === 'undefined') {\n        throw new Error('Blob responses are not supported on this platform.');\n    }\n    if (body instanceof Blob) {\n        return body;\n    }\n    if (ArrayBuffer && body instanceof ArrayBuffer) {\n        return new Blob([body]);\n    }\n    throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to JSON data.\n */\nfunction _toJsonBody(body, format = 'JSON') {\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n        throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\n    }\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\n        throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\n    }\n    if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' ||\n        typeof body === 'boolean' || Array.isArray(body)) {\n        return body;\n    }\n    throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\n}\n/**\n * Helper function to convert a response body to a string.\n */\nfunction _toTextBody(body) {\n    if (typeof body === 'string') {\n        return body;\n    }\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n        throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n    }\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\n        throw new Error('Automatic conversion to text is not supported for Blobs.');\n    }\n    return JSON.stringify(_toJsonBody(body, 'text'));\n}\n/**\n * Convert a response body to the requested type.\n */\nfunction _maybeConvertBody(responseType, body) {\n    if (body === null) {\n        return null;\n    }\n    switch (responseType) {\n        case 'arraybuffer':\n            return _toArrayBufferBody(body);\n        case 'blob':\n            return _toBlob(body);\n        case 'json':\n            return _toJsonBody(body);\n        case 'text':\n            return _toTextBody(body);\n        default:\n            throw new Error(`Unsupported responseType: ${responseType}`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n *\n */\nclass HttpClientTestingBackend {\n    constructor() {\n        /**\n         * List of pending requests which have not yet been expected.\n         */\n        this.open = [];\n    }\n    /**\n     * Handle an incoming request by queueing it in the list of open requests.\n     */\n    handle(req) {\n        return new Observable((observer) => {\n            const testReq = new TestRequest(req, observer);\n            this.open.push(testReq);\n            observer.next({ type: HttpEventType.Sent });\n            return () => {\n                testReq._cancelled = true;\n            };\n        });\n    }\n    /**\n     * Helper function to search for requests in the list of open requests.\n     */\n    _match(match) {\n        if (typeof match === 'string') {\n            return this.open.filter(testReq => testReq.request.urlWithParams === match);\n        }\n        else if (typeof match === 'function') {\n            return this.open.filter(testReq => match(testReq.request));\n        }\n        else {\n            return this.open.filter(testReq => (!match.method || testReq.request.method === match.method.toUpperCase()) &&\n                (!match.url || testReq.request.urlWithParams === match.url));\n        }\n    }\n    /**\n     * Search for requests in the list of open requests, and return all that match\n     * without asserting anything about the number of matches.\n     */\n    match(match) {\n        const results = this._match(match);\n        results.forEach(result => {\n            const index = this.open.indexOf(result);\n            if (index !== -1) {\n                this.open.splice(index, 1);\n            }\n        });\n        return results;\n    }\n    /**\n     * Expect that a single outstanding request matches the given matcher, and return\n     * it.\n     *\n     * Requests returned through this API will no longer be in the list of open requests,\n     * and thus will not match twice.\n     */\n    expectOne(match, description) {\n        description = description || this.descriptionFromMatcher(match);\n        const matches = this.match(match);\n        if (matches.length > 1) {\n            throw new Error(`Expected one matching request for criteria \"${description}\", found ${matches.length} requests.`);\n        }\n        if (matches.length === 0) {\n            let message = `Expected one matching request for criteria \"${description}\", found none.`;\n            if (this.open.length > 0) {\n                // Show the methods and URLs of open requests in the error, for convenience.\n                const requests = this.open\n                    .map(testReq => {\n                    const url = testReq.request.urlWithParams;\n                    const method = testReq.request.method;\n                    return `${method} ${url}`;\n                })\n                    .join(', ');\n                message += ` Requests received are: ${requests}.`;\n            }\n            throw new Error(message);\n        }\n        return matches[0];\n    }\n    /**\n     * Expect that no outstanding requests match the given matcher, and throw an error\n     * if any do.\n     */\n    expectNone(match, description) {\n        description = description || this.descriptionFromMatcher(match);\n        const matches = this.match(match);\n        if (matches.length > 0) {\n            throw new Error(`Expected zero matching requests for criteria \"${description}\", found ${matches.length}.`);\n        }\n    }\n    /**\n     * Validate that there are no outstanding requests.\n     */\n    verify(opts = {}) {\n        let open = this.open;\n        // It's possible that some requests may be cancelled, and this is expected.\n        // The user can ask to ignore open requests which have been cancelled.\n        if (opts.ignoreCancelled) {\n            open = open.filter(testReq => !testReq.cancelled);\n        }\n        if (open.length > 0) {\n            // Show the methods and URLs of open requests in the error, for convenience.\n            const requests = open.map(testReq => {\n                const url = testReq.request.urlWithParams.split('?')[0];\n                const method = testReq.request.method;\n                return `${method} ${url}`;\n            })\n                .join(', ');\n            throw new Error(`Expected no open requests, found ${open.length}: ${requests}`);\n        }\n    }\n    descriptionFromMatcher(matcher) {\n        if (typeof matcher === 'string') {\n            return `Match URL: ${matcher}`;\n        }\n        else if (typeof matcher === 'object') {\n            const method = matcher.method || '(any)';\n            const url = matcher.url || '(any)';\n            return `Match method: ${method}, URL: ${url}`;\n        }\n        else {\n            return `Match by function: ${matcher.name}`;\n        }\n    }\n}\nHttpClientTestingBackend.Éµfac = function HttpClientTestingBackend_Factory(t) { return new (t || HttpClientTestingBackend)(); };\nHttpClientTestingBackend.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: HttpClientTestingBackend, factory: HttpClientTestingBackend.Éµfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpClientTestingBackend, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n *\n * Inject `HttpTestingController` to expect and flush requests in your tests.\n *\n * @publicApi\n */\nclass HttpClientTestingModule {\n}\nHttpClientTestingModule.Éµfac = function HttpClientTestingModule_Factory(t) { return new (t || HttpClientTestingModule)(); };\nHttpClientTestingModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({ type: HttpClientTestingModule });\nHttpClientTestingModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({ providers: [\n        HttpClientTestingBackend,\n        { provide: HttpBackend, useExisting: HttpClientTestingBackend },\n        { provide: HttpTestingController, useExisting: HttpClientTestingBackend },\n    ], imports: [[\n            HttpClientModule,\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(HttpClientTestingModule, { imports: function () { return [HttpClientModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpClientTestingModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    HttpClientModule,\n                ],\n                providers: [\n                    HttpClientTestingBackend,\n                    { provide: HttpBackend, useExisting: HttpClientTestingBackend },\n                    { provide: HttpTestingController, useExisting: HttpClientTestingBackend },\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HttpClientTestingModule, HttpTestingController, TestRequest, HttpClientTestingBackend as Éµangular_packages_common_http_testing_testing_a };\n\n//# sourceMappingURL=testing.js.map"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
